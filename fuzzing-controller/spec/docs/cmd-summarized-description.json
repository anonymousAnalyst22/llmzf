{"52719": {"0": "The Zigbee cluster command \"ReadAttributes\" is used for a device to determine the values of one or more attributes located on another device. This command allows a device to read attributes defined for any cluster in the Zigbee Cluster Library (ZCL) or manufacturer-specific attributes.\n\nThe Read Attributes command frame is formatted with a ZCL header and one or more attribute identifiers. The frame control field specifies that it is a global command, and the manufacturer specific sub-field indicates whether the command is used to read standard or manufacturer-specific attributes. The command identifier field is set to indicate the Read Attributes command.\n\nWhen a device receives the Read Attributes command, it processes each specified attribute identifier and generates a Read Attributes Response command. The response command contains read attribute status records for each attribute identifier included in the command frame. Each read attribute status record includes the corresponding attribute identifier, a status value, and, depending on the status value, the value of the attribute itself.\n\nThe device creates an attribute status record for each attribute identifier as follows:\n- If the attribute identifier does not correspond to an attribute that exists on the device, the status field of the corresponding read attribute status record is set to UNSUPPORTED_ATTRIBUTE, and no attribute value field is included.\n- If the attribute identified by the attribute identifier is supported, the device checks if the attribute status record fits into the remaining space available in the response frame. If it does not fit, the status field of the corresponding record is set to INSUFFICIENT_SPACE, and the data type and value fields are not included. Otherwise, the status field is set to SUCCESS, and the attribute value field is set to its current value.\n- If the resulting attribute status record does not fit into the response frame, the device transmits the response frame as assembled so far and terminates the process. Otherwise, the device moves on to the next attribute identifier.\n\nThe Read Attributes Response command frame is formatted with a ZCL header and one or more read attribute status records. Each read attribute status record includes the attribute identifier, status, attribute data type, and attribute value.\n\nThe Read Attributes command is essential for devices to gather information about attributes on other devices. By successfully executing this command, a Zigbee device can retrieve attribute values and determine the status of each attribute. The command allows for the differentiation between supported and unsupported attributes and handles cases where there is insufficient space to include attribute data in the response frame.\n\nThe influence of the Read Attributes command on the Zigbee device is that it enables the device to gather attribute information from other devices, facilitating communication and interoperability within the Zigbee network. The successful execution of this command allows the device to retrieve attribute values, which can be used for various purposes such as monitoring, control, and decision-making processes. Additionally, the command ensures efficient use of space in the response frame by excluding attribute data if there is insufficient space, preventing data loss or transmission errors.\n\nIn summary, the Read Attributes command is a crucial Zigbee cluster command that allows devices to read attribute values from other devices. It provides a standardized method for retrieving attribute information and ensures efficient data transmission. By successfully executing this command, Zigbee devices can gather attribute values and make informed decisions based on the retrieved data.", "1": "The \"ReadAttributesResponse\" command is a Zigbee cluster command that is used to retrieve the current values of attributes from a Zigbee device. This command is generated in response to a \"Read Attributes\" or \"Read Attributes Structured\" command, which is used to request the values of specific attributes from a device.\n\nThe purpose of the \"ReadAttributesResponse\" command is to provide the requested attribute values to the originator of the original \"Read Attributes\" command. It allows the originator to be notified of the results of its request and obtain the values of the requested attributes.\n\nThe functionality of the \"ReadAttributesResponse\" command is defined by its frame format and the fields within it. The command frame consists of a ZCL header followed by one or more \"read attribute status records\". Each status record contains information about a specific attribute, including its identifier, status, data type, and value.\n\nWhen generating the \"ReadAttributesResponse\" command, a read attribute status record is included for each attribute identifier specified in the original \"Read Attributes\" command. The attribute identifier field in each record contains the identifier specified in the original command. The status field indicates the success or failure of the read operation on the attribute, with a value of \"SUCCESS\" for successful operations and an error code for unsuccessful operations. The data type and value fields are included only if the read operation was successful, providing the current value of the attribute.\n\nThe \"ReadAttributesResponse\" command may span multiple frames if the response exceeds the capacity of a single frame. In such cases, fragmentation support may be needed to return the entire response. If fragmentation is not supported, the command will return as many read attribute status records as will fit in the frame.\n\nOnce the \"ReadAttributesResponse\" command is successfully executed, it has an influence on the Zigbee device by notifying the originator of the requested attributes' values. The originator can use this information for further processing or to update its own state. If some attribute values were not returned due to space limitations in the frame, the originator may issue additional \"Read Attributes\" commands to obtain those values.\n\nIn summary, the \"ReadAttributesResponse\" command serves the purpose of providing attribute values to the originator of a \"Read Attributes\" command. It includes information about the status, data type, and current value of each requested attribute. Once successfully executed, the command notifies the originator of the read operation's results and allows it to retrieve the values of the requested attributes.", "2": "The \"WriteAttributes\" command is a Zigbee cluster command that is used to change the values of one or more attributes located on another Zigbee device. This command allows devices to communicate and update attribute values in a Zigbee network.\n\nThe command frame for the WriteAttributes command consists of a ZCL header followed by one or more write attribute records. Each write attribute record contains the attribute identifier, attribute data type, and the actual value of the attribute that is to be written.\n\nWhen a device receives the WriteAttributes command, it attempts to process each specified write attribute record. The device performs a series of error checks for each attribute record in the command frame. If an error is detected, a corresponding write attribute status record is generated, and the status field is set according to the specific error condition.\n\nThe error checks performed by the device include:\n\n1. Checking if the attribute is supported on the device. If not supported, the status field of the corresponding write attribute status record is set to UNSUPPORTED_ATTRIBUTE.\n\n2. Verifying the attribute data type. If the attribute data type field is incorrect, the status field of the corresponding write attribute status record is set to INVALID_DATA_TYPE.\n\n3. Checking if the attribute is designated as read-only. If the attribute is read-only, the status field of the corresponding write attribute status record is set to READ_ONLY.\n\n4. Verifying if the device is currently accepting write attribute commands for the attribute. If not authorized or the attribute is read-only, the status field of the corresponding write attribute status record is set to NOT_AUTHORIZED or READ_ONLY.\n\n5. Checking if the supplied value is within the specified range of the attribute. If the value is outside the valid range, the status field of the corresponding write attribute status record is set to INVALID_VALUE.\n\n6. Verifying if the device can support the supplied value. If the device cannot support the value, the status field of the corresponding write attribute status record is set to INVALID_VALUE.\n\nIf all the error checks pass without generating a write attribute status record, the device writes the supplied value to the identified attribute. Once all the write attribute records have been processed, the device generates the WriteAttributes Response command.\n\nThe WriteAttributes Response command frame contains one or more write attribute status records, each formatted with a status field and attribute identifier. The status field specifies the status of the write operation attempted on the attribute. If all attributes were written successfully, only a single write attribute status record is included in the command with the status field set to SUCCESS and the attribute identifier field omitted.\n\nThe WriteAttributes command allows devices to update attribute values and communicate changes within a Zigbee network. It provides a standardized way to modify attributes on remote devices. Once the command is successfully executed, the Zigbee device that received the command will process each attribute record and update the corresponding attribute values. The WriteAttributes command facilitates the dynamic configuration and control of Zigbee devices in a network.", "4": "The \"WriteAttributesResponse\" is a Zigbee cluster command that is used when a device wants to change the values of one or more attributes located on another device. This command ensures that if any attribute cannot be written, no attribute values are changed. The purpose of this command is to provide a way for devices to communicate and update attribute values without causing any inconsistencies or errors.\n\nThe format and operation of the WriteAttributesResponse command are the same as the WriteAttributes command, with the only difference being the command identifier field, which is set to indicate the WriteAttributesResponse command. This command is generated in response to a WriteAttributes command, and it provides the device with the results of its original WriteAttributes command.\n\nThe WriteAttributesResponse command frame consists of a ZCL header and one or more write attribute status records. Each write attribute status record contains the status of the write operation attempted on an attribute, the attribute identifier, and the attribute value. The status field specifies the status of the write operation, such as success or failure. If an attribute was successfully written, the write attribute status record is not included in the command to save bandwidth.\n\nWhen the WriteAttributesResponse command is received, the device is notified of the results of its original WriteAttributes command. This allows the device to determine whether the attribute values were successfully updated or if there were any errors or failures during the write operation. The device can then take appropriate actions based on the results, such as updating its internal state or notifying the user.\n\nThe WriteAttributesResponse command is important for maintaining consistency and integrity in a Zigbee network. By ensuring that attribute values are only changed if all attributes can be written successfully, this command prevents any inconsistencies or errors that could occur if only some attributes were updated while others were not. It also allows devices to handle errors or failures gracefully and take appropriate actions.\n\nThe WriteAttributesResponse command also has an influence on the Zigbee device once the command is successfully executed. If all attributes were successfully written, the device receives a single write attribute status record with the status field set to SUCCESS and the attribute identifier field omitted. This indicates that all attribute values were updated successfully. The device can then use the updated attribute values for its intended purpose, such as controlling a device or providing information to the user.\n\nOn the other hand, if there were any errors or failures during the write operation, the write attribute status records in the WriteAttributesResponse command provide information about which attributes were not successfully written and the reason for the failure. This allows the device to identify and handle any issues that occurred during the write operation. The device can then take appropriate actions, such as retrying the write operation, notifying the user of the failure, or reverting back to the previous attribute values.\n\nIn conclusion, the WriteAttributesResponse command is a Zigbee cluster command used to update attribute values on another device. It ensures that if any attribute cannot be written, no attribute values are changed. The command provides the device with the results of its original WriteAttributes command, allowing it to handle errors or failures and maintain consistency in the Zigbee network. Once successfully executed, the command influences the device by providing information about the success or failure of the write operation, allowing the device to take appropriate actions based on the results.", "5": "The \"WriteAttributesNoResponse\" command is a Zigbee cluster command used to change the value of one or more attributes located on another device without requiring a response. This command is generated when a device wants to update the attributes of another device but does not need confirmation of the successful write operation.\n\nThe command frame of \"WriteAttributesNoResponse\" consists of a ZCL header followed by one or more write attribute records. Each write attribute record contains the identifier and the actual value of the attribute to be written. The frame control field in the ZCL header specifies that this is a global command, and the manufacturer specific sub-field indicates whether the command is used for writing attributes defined for any cluster or manufacturer specific attributes.\n\nWhen a device receives the \"WriteAttributesNoResponse\" command, it processes each specified write attribute record without sending any response or error message. The device first checks if the attribute in the record is implemented on itself. If not, it ignores the attribute and moves on to the next write attribute record. If the attribute is supported, the device then checks if it is writable. If the attribute is designated as read-only, it ignores the attribute and proceeds to the next record. However, if the attribute is writable, the device checks if the supplied value falls within the specified range of the attribute. If the value is outside the range, the attribute is ignored, and the device moves on to the next record. If the value is within the range, the device writes the supplied value to the identified attribute and proceeds to the next record.\n\nThe purpose of the \"WriteAttributesNoResponse\" command is to allow a device to remotely update the attributes of another device without requiring a response. It provides a mechanism for changing the values of attributes on a different device within the Zigbee network. This command is useful in scenarios where a device needs to control or configure attributes on another device without the need for confirmation or response.\n\nThe functionality of the \"WriteAttributesNoResponse\" command is to enable the remote modification of attributes on another device. By specifying the attribute identifier and the desired value in the write attribute records, a device can send this command to update the attributes of another device in the Zigbee network. The command ensures that the attribute is implemented, writable, and the supplied value falls within the specified range before making the update.\n\nOnce the \"WriteAttributesNoResponse\" command is successfully executed, it influences the Zigbee device by changing the values of the specified attributes. The device that receives the command will process each write attribute record and update the attributes accordingly. This can result in changes in the behavior, configuration, or state of the device. The command allows for remote control and configuration of attributes, enabling devices to be dynamically modified without requiring direct physical interaction.\n\nIn summary, the \"WriteAttributesNoResponse\" command in Zigbee is used to remotely change the values of attributes on another device without requiring a response. It allows for the control and configuration of attributes in a Zigbee network. Once executed, the command updates the specified attributes on the receiving device, influencing its behavior or state.", "6": "", "7": "The ConfigureReportingResponse command is a Zigbee cluster command that is used to respond to a ConfigureReporting command. Its purpose is to provide feedback to the device regarding the success or failure of the configuration of attribute reporting.\n\nThe command is formatted as a Zigbee Cluster Library (ZCL) command frame, with a variable number of attribute status records. Each attribute status record contains information about the status, direction, and attribute identifier of the configured attribute.\n\nThe direction field in the attribute status record specifies whether values of the attribute are reported or received. A value of 0x00 indicates that values of the attribute are reported, while a value of 0x01 indicates that reports of the attribute are received. Other values of this field are reserved.\n\nThe status field in the attribute status record specifies the status of the Configure Reporting operation for the attribute. There are several possible status values:\n\n- If the attribute is not reportable (either because it is not in the list of mandatory reportable attributes or it is not implemented as a manufacturer option), the status field is set to UNREPORTABLE_ATTRIBUTE.\n- If the attribute data type is incorrect, the status field is set to INVALID_DATA_TYPE.\n- If the minimum reporting interval is less than the minimum set by the relevant cluster specification or application, or if the maximum reporting interval is non-zero and less than the minimum reporting interval, the status field is set to INVALID_VALUE.\n- If the minimum or maximum reporting interval is not supported by the product, the status field is set to INVALID_VALUE.\n\nIf all attribute reporting configuration records have been processed successfully, the Configure Reporting Response command is generated. If there are no attribute status records in the command, indicating that all attributes were configured successfully, a single attribute status record is included with the status field set to SUCCESS and the direction and attribute identifier fields omitted.\n\nOnce the Configure Reporting Response command is successfully executed, it has an influence on the Zigbee device. The device is notified of the success or failure of its original Configure Reporting command for each attribute. This allows the device to determine whether the attribute reporting configuration was set up correctly.\n\nThe successful execution of the Configure Reporting Response command enables the device to generate or receive attribute reports according to the configuration that was set up. This is done through the use of the Report Attributes command, which allows the device to send attribute reports to the appropriate destination.\n\nIn summary, the ConfigureReportingResponse command is used to respond to a ConfigureReporting command and provides feedback to the device regarding the success or failure of attribute reporting configuration. It allows the device to determine the status of the configuration for each attribute and enables the device to generate or receive attribute reports based on the configuration.", "8": "The \"ReadReportingConfiguration\" command is a Zigbee cluster command that is used to read the configuration details of the reporting mechanism for one or more attributes of a cluster. It is part of the Zigbee Cluster Library Specification and is designed to provide a way for Zigbee devices to retrieve information about how attribute reporting is configured.\n\nThe purpose of the \"ReadReportingConfiguration\" command is to allow a Zigbee device to query another device for the configuration details of its attribute reporting mechanism. This can be useful in scenarios where a device needs to know how attribute reporting is configured in order to make informed decisions or perform specific actions based on that information.\n\nThe functionality of the command is based on a request-response model. When a device sends a \"ReadReportingConfiguration\" command to another device, it is requesting the configuration details for one or more attributes. The command frame consists of a ZCL header and one or more attribute records. Each attribute record contains the direction field, attribute identifier field, and any other relevant information.\n\nOnce the command is successfully executed and received by the device, it generates a \"ReadReportingConfigurationResponse\" command as a response. This response command contains the details of the reporting configuration for each of the attributes specified in the original command. The response allows the requesting device to obtain the necessary information about how attribute reporting is configured on the target device.\n\nThe influence of the \"ReadReportingConfiguration\" command on the Zigbee device is that it provides a means for retrieving important information about attribute reporting. By successfully executing this command, a device can gain insight into how attribute reporting is configured, including details such as the direction of reporting (whether values of the attribute are reported or reports of the attribute are received), the status of the configuration operation, and the attribute identifier.\n\nThis information can be used by the device to make decisions or perform actions based on the reporting configuration. For example, if a device needs to know when certain attribute values are updated, it can use the \"ReadReportingConfiguration\" command to retrieve the reporting configuration for those attributes and then set up appropriate handlers or callbacks to respond to attribute value changes.\n\nIn summary, the \"ReadReportingConfiguration\" command is a Zigbee cluster command that allows a device to read the configuration details of the reporting mechanism for one or more attributes of a cluster. It provides a way for devices to retrieve important information about how attribute reporting is configured, and the successful execution of this command allows a device to gain insight into the reporting configuration and make informed decisions or perform specific actions based on that information.", "9": "The Read Reporting Configuration Response is a Zigbee cluster command that is used to retrieve the reporting configuration details of specific attributes in a Zigbee device. This command allows a device to request information about how certain attributes are reported or received.\n\nThe command frame format for the Read Reporting Configuration Response is specified in the Zigbee Cluster Library Specification. It consists of a ZCL header followed by one or more attribute records. Each attribute record contains information about the reporting configuration of a particular attribute.\n\nThe ZCL header fields in the command frame specify the type of command and whether it is used to read the reporting configuration of standard or manufacturer-specific attributes. The command identifier field is set to indicate the Read Reporting Configuration command.\n\nThe direction field in each attribute record indicates whether the attribute values are reported (0x00) or if reports of the attribute are received (0x01). Other values in this field are reserved.\n\nThe attribute identifier field in each attribute record contains the identifier of the attribute for which the reporting configuration details are requested.\n\nWhen a device receives the Read Reporting Configuration Response command, it generates a response command that contains the reporting configuration details for each of the attributes specified in the original command. This response allows the requesting device to obtain the necessary information about how the attributes are reported or received.\n\nThe purpose of the Read Reporting Configuration Response command is to enable devices to retrieve the reporting configuration details of specific attributes. This information is crucial for devices to properly communicate and exchange data with each other within a Zigbee network.\n\nThe functionality of the command lies in its ability to provide detailed information about how attributes are reported or received. By retrieving the reporting configuration details, devices can ensure that they are correctly interpreting and handling attribute values. This command allows devices to establish a common understanding of how attributes should be reported or received, enhancing interoperability within the Zigbee network.\n\nOnce the Read Reporting Configuration Response command is successfully executed, the Zigbee device that requested the information can use the reporting configuration details to adjust its behavior accordingly. For example, if an attribute is configured to report its values periodically, the device can set up timers or triggers to capture and process these reports. On the other hand, if the device is expecting reports of an attribute, it can prepare to receive and process them appropriately.\n\nIn summary, the Read Reporting Configuration Response command in Zigbee is used to retrieve the reporting configuration details of specific attributes. It allows devices to obtain information about how attributes are reported or received, facilitating proper communication and data exchange within a Zigbee network. Once the command is successfully executed, the requesting device can adjust its behavior based on the reporting configuration details received.", "10": "The \"Report Attributes\" command is a Zigbee cluster command that allows a device to report the values of its attributes to another device. This command is used in scenarios where a device needs to periodically send attribute reports to another device, based on certain conditions and configurations.\n\nThe command consists of a ZCL header, followed by one or more attribute reports. Each attribute report contains the attribute identifier, attribute data type, and the actual value of the attribute being reported.\n\nThe purpose of the \"Report Attributes\" command is to enable devices to share attribute information with other devices in a Zigbee network. By reporting attribute values, devices can provide real-time updates on their status, measurements, or any other relevant information to other devices or the network coordinator.\n\nThe functionality of the command is determined by the conditions and configurations set for reporting attributes. There are several conditions that trigger attribute reporting:\n\n1. Periodic Reporting: A report is generated when the time elapsed since the previous report of the same attribute equals the maximum reporting interval configured for that attribute. This allows devices to regularly update attribute values at a specified interval.\n\n2. Changes to 'Discrete' Attributes: If an attribute has a 'discrete' data type, a report is generated whenever the attribute undergoes any change in value. This applies to general data types, logical types, bitmap types, enumerations, strings, identifiers, IEEE address, and security key. The reporting interval is determined by the minimum reporting interval configured for that attribute.\n\n3. Changes to 'Analog' Attributes: If an attribute has an 'analog' data type, a report is generated when the attribute undergoes a change in value, either positive or negative, equal to or greater than the reportable change configured for that attribute. The reporting interval is determined by the minimum reporting interval configured for that attribute.\n\n4. Cluster Specific Conditions: Some clusters may have additional conditions for specific attributes, which may trigger attribute reporting based on cluster-specific rules.\n\nOnce the \"Report Attributes\" command is successfully executed, the Zigbee device that receives the command will be notified of the latest values of one or more attributes from another device. This allows devices to stay updated on the status, measurements, or any other relevant information of other devices in the network.\n\nThe command enables efficient communication and coordination among Zigbee devices by providing a standardized mechanism for reporting attribute values. It ensures that devices can share real-time information, allowing for better monitoring, control, and automation within the Zigbee network.\n\nOverall, the \"Report Attributes\" command plays a crucial role in facilitating data exchange and enabling devices to stay synchronized with attribute values in a Zigbee network.", "11": "The Default Response command is a Zigbee cluster command that is used to notify a device of the latest values of one or more attributes of another device. It is generated in response to a unicast command that is not a Default Response command, and when no other command is sent in response to the received command using the same Transaction sequence number. The command is only generated if the Disable Default Response bit of the Frame control field is set to 0 or when an error occurs.\n\nThe Default Response command frame consists of three fields: the ZCL header, the Command identifier, and the Status code. The ZCL header specifies the frame type, which is set to indicate a global command, and the manufacturer specific sub-field, which is set to 0 for a command defined for any cluster in the ZCL or 1 for a manufacturer specific command. The Command identifier field indicates that it is a Default Response command, and the Status code field specifies the success or nature of the error detected in the received command.\n\nWhen a device receives a Default Response command, it is notified of the success or failure of the generated command with the same transaction sequence number. The Default Response command is generated in response to the reception of all commands, including response commands, under certain conditions. However, it is not generated in response to the reception of another Default Response command.\n\nThe purpose of the Default Response command is to provide a mechanism for devices to receive feedback on the success or failure of their commands. It allows devices to synchronize their state with the latest values of attributes from other devices. By consolidating attribute reports for different attributes of the same cluster at the same time, the Default Response command helps reduce network traffic.\n\nThe functionality of the Default Response command is to send a response to a received command, indicating the success or nature of the error detected. The command identifier field specifies the identifier of the received command to which the Default Response command is a response. The status code field specifies the status of the received command, such as SUCCESS, UNSUP_COMMAND, or UNSUPPORTED_CLUSTER. The Default Response command allows devices to handle errors and unsupported commands appropriately.\n\nOnce the Default Response command is successfully executed, it influences the Zigbee device by providing feedback on the success or failure of the generated command. This allows the device to take appropriate actions based on the received status code. For example, if the status code indicates success, the device can proceed with its operations. If the status code indicates an unsupported command or cluster, the device can handle the error and adjust its behavior accordingly.\n\nIn summary, the Default Response command in Zigbee is used to notify a device of the latest attribute values of another device and provide feedback on the success or failure of a command. It helps reduce network traffic by consolidating attribute reports and allows devices to handle errors and unsupported commands appropriately. Once executed successfully, the command influences the device by providing information on the success or failure of the generated command, enabling the device to adjust its behavior accordingly.", "12": "The DiscoverAttributes command is a Zigbee cluster command that allows a remote device to discover the identifiers and types of attributes on another device within a specific cluster. This command is used to gather information about the supported attributes on a device and their corresponding data types.\n\nThe command is defined in the Zigbee Cluster Library Specification, and its frame format consists of several fields. The ZCL header fields specify the type of command and whether it is for discovering standard attributes or manufacturer-specific attributes. The start attribute identifier field indicates the attribute identifier at which the discovery should begin, and the maximum attribute identifiers field specifies the maximum number of attribute identifiers that should be returned in the response.\n\nWhen the DiscoverAttributes command is received by a device, it constructs an ordered list of attribute information records. Each record contains a discovered attribute identifier and its data type, sorted in ascending order of attribute identifiers. The list starts with the first attribute that has an identifier equal to or greater than the one specified in the start attribute identifier field. The number of attribute identifiers included in the list is limited by the value specified in the maximum attribute identifiers field.\n\nOnce the device has constructed the list of attribute information records, it generates a DiscoverAttributesResponse command. This response command contains the discovered attributes and their corresponding data types. The response is then returned to the originator of the DiscoverAttributes command.\n\nThe purpose of the DiscoverAttributes command is to enable a remote device to gather information about the attributes supported by another device within a specific cluster. By discovering the attributes and their data types, a device can understand the capabilities and functionalities of the target device. This information is crucial for interoperability and communication between devices in a Zigbee network.\n\nThe DiscoverAttributes command provides functionality for attribute discovery and retrieval. It allows a device to retrieve a list of attribute identifiers and their data types from another device. This information can be used for various purposes, such as configuring and interacting with the target device. The command enables efficient and standardized attribute discovery across different Zigbee devices and clusters.\n\nThe successful execution of the DiscoverAttributes command has several influences on the Zigbee device. Firstly, it allows the device to gather information about the supported attributes of another device. This information can be used for device configuration, control, and interaction. Secondly, the command facilitates interoperability between devices by providing a standardized method for attribute discovery. It ensures that devices can communicate effectively and understand each other's capabilities. Lastly, the DiscoverAttributes command promotes efficient resource management by limiting the number of attribute identifiers returned in the response. This helps in reducing unnecessary data transmission and conserving network resources.\n\nIn conclusion, the DiscoverAttributes command in Zigbee allows a remote device to discover the identifiers and types of attributes on another device within a specific cluster. It provides functionality for attribute discovery and retrieval, enabling efficient and standardized communication between devices. The successful execution of this command influences the device by providing information about the supported attributes, promoting interoperability, and facilitating efficient resource management.", "13": "The Zigbee cluster command \"DiscoverAttributesResponse\" is part of the Zigbee Cluster Library Specification and is used to discover the identifiers and types of attributes supported within a specific cluster on a Zigbee device. \n\nThe command is generated by a remote device when it wants to discover the attributes on another device within the cluster. When the device receives this command, it constructs an ordered list of attribute information records in ascending order of attribute identifiers. The list starts with the first attribute that has an identifier equal to or greater than the identifier specified in the start attribute identifier field. The maximum number of attribute identifiers included in the list is specified by the maximum attribute identifiers field.\n\nOnce the device has constructed the list, it generates a Discover Attributes Response command. This command contains the discovered attributes and their types and is sent back to the originator of the Discover Attributes command. The Discover Attributes Response command frame includes a ZCL header, a discovery complete field, and one or more attribute information fields.\n\nThe discovery complete field in the Discover Attributes Response command is a Boolean field that indicates if there are more attributes to be discovered. A value of 0 means there are more attributes with higher attribute identifiers, while a value of 1 means there are no more attributes to be discovered.\n\nThe attribute information fields in the Discover Attributes Response command include the attribute identifier and attribute data type. The attribute identifier field contains the identifier of a discovered attribute, and the attributes are included in ascending order starting from the lowest attribute identifier that is greater than or equal to the start attribute identifier specified in the received Discover Attributes command. The attribute data type field specifies the data type of the attribute.\n\nThe Discover Attributes Response command is generated in response to a Discover Attributes command. When a device receives this command, it is notified of the results of its attribute discovery request. If the discovery complete field indicates that there are more attributes to be discovered, the device can choose to send subsequent Discover Attributes request commands to obtain the rest of the attribute identifiers. In this case, the start attribute identifier specified in the next request command should be set to one plus the last attribute identifier received in the Discover Attributes Response command.\n\nOverall, the purpose of the DiscoverAttributesResponse command is to allow a remote device to discover the attributes and their types supported within a specific cluster on a Zigbee device. It provides a way for devices to gather information about the attributes available on other devices within the network. Once the command is successfully executed, it allows the device to construct a list of discovered attributes and their types, which can be used for further communication and interaction within the Zigbee network.", "14": "The Zigbee cluster command \"ReadAttributesStructured\" is defined in the Zigbee Cluster Library Specification. This command is used to read the values of one or more attributes or elements of attributes located on another Zigbee device.\n\nThe command frame format for the Read Attributes Structured command consists of a ZCL header followed by one or more attribute identifier-selector pairs. The attribute identifier field contains the identifier of the attribute to be read, while the selector field specifies whether the whole attribute value or an individual element of it should be read. The selector field is used for attributes with types of Array or Structure.\n\nWhen the Read Attributes Structured command is generated, it indicates that a device wants to retrieve the values of specific attributes from another device. The device receiving this command will process each specified attribute identifier and associated selector and generate a Read Attributes Response command. The Read Attributes Response command will contain read attribute status records, each corresponding to an attribute identifier in the command frame.\n\nThe device receiving the Read Attributes Structured command will first check if the attribute identifier corresponds to an attribute that exists on the device and if the associated selector field is valid. If the attribute is not supported or the selector is invalid, the device will set the status field of the corresponding read attribute status record to indicate UNSUPPORTED_ATTRIBUTE or INVALID_SELECTOR, respectively, and will not include an attribute value field.\n\nIf the attribute is supported and the selector is valid, the device will set the status field of the read attribute status record to indicate SUCCESS and will set the attribute value field to the value of the attribute or its selected element. The device will then move on to the next attribute identifier in the command frame.\n\nThe Read Attributes Structured command allows a Zigbee device to retrieve attribute values from another device in a structured manner. By specifying the attribute identifiers and selectors, the device can read specific attributes or elements of attributes. This command provides a way to access and retrieve attribute values, enabling devices to gather information or monitor the status of other devices.\n\nOnce the Read Attributes Structured command is successfully executed, the device receiving the command will generate a Read Attributes Response command. This response command will provide the requested attribute values or indicate any unsupported attributes or invalid selectors. The device initiating the command can then process the response and use the retrieved attribute values for its intended purpose, such as displaying information or making decisions based on the received data.\n\nIn summary, the Read Attributes Structured command in Zigbee allows a device to read attribute values from another device. It provides a structured way to retrieve specific attribute values or elements of attributes. The command's successful execution results in a response command containing the requested attribute values, allowing the initiating device to process the data and utilize it as needed.", "15": "", "16": "The Write Attributes Structured Response command is a Zigbee cluster command that is used to provide a response to the Write Attributes Structured command. It is generated by a device in response to receiving the Write Attributes Structured command.\n\nThe purpose of the Write Attributes Structured Response command is to notify the device of the results of its original Write Attributes Structured command. It provides information about the status of the write operation attempted on each attribute specified in the original command.\n\nThe command frame of the Write Attributes Structured Response command consists of a ZCL header followed by one or more write attribute status records. Each write attribute status record contains information about the status of the write operation for a specific attribute.\n\nThe ZCL header fields of the command frame specify the type of command and whether it is used to write attributes defined for any cluster in the ZCL or manufacturer-specific attributes. The command identifier field is set to indicate the Write Attributes Structured Response command.\n\nThe status field in each write attribute status record is 8 bits in length and specifies the status of the write operation attempted on the attribute. Successful write operations are not included in the command to save bandwidth. Only failed write operations are included in the command, with the status field indicating the specific failure.\n\nThe attribute identifier field in each write attribute status record is 16 bits in length and contains the identifier of the attribute on which the write operation was attempted.\n\nThe selector field in each write attribute status record specifies the element of the attribute on which the write operation that failed was attempted. For attribute data types other than array or structure, this field consists of a single octet with value zero. For array or structure types, a single octet with value zero indicates that no information is available about which element of the attribute caused the failure.\n\nOnce the Write Attributes Structured Response command is successfully executed, it provides the device with information about the success or failure of the write operations attempted on the specified attributes. The device can use this information to take appropriate actions based on the results.\n\nIf all attributes were successfully written, only a single write attribute status record will be included in the command, with the status field set to SUCCESS and the attribute identifier and selector fields omitted. This indicates that all write operations were successful.\n\nThe Write Attributes Structured Response command is an important command in Zigbee clusters as it allows devices to communicate the results of attribute write operations. It helps in ensuring the proper functioning and coordination of devices within a Zigbee network.", "17": "The \"DiscoverCommandsReceived\" command is a Zigbee cluster command that allows a device to discover all commands processed by a specific cluster, including optional or manufacturer-specific commands. It is used to obtain information about the commands that the cluster can process.\n\nThe command is generated in response to a Write Attributes Structured command, specifically the Write Attributes Structured response command. When a device receives this command, it is notified of the results of its original Write Attributes Structured command.\n\nThe command frame format of the DiscoverCommandsReceived command consists of several fields. The ZCL header fields specify the type of command and whether it is a global command or a manufacturer-specific command. The start command identifier field indicates the value of the identifier at which to begin the command discovery. The maximum command identifiers field specifies the maximum number of command identifiers to be returned in the response.\n\nWhen the DiscoverCommandsReceived command is generated, it allows a remote device to discover the optional and mandatory commands that the cluster can process. Upon receipt of this command, the device constructs an ordered list of command identifiers. This list starts with the first command that has an identifier equal to or greater than the identifier specified in the start command identifier field. The number of command identifiers included in the list does not exceed the value specified in the maximum command identifiers field.\n\nThe DiscoverCommandsReceived command response is sent in response to the DiscoverCommandsReceived command. It is used to discover which commands a cluster can process. The response frame includes the ZCL header fields, the discovery complete field, and the command identifier fields. The discovery complete field is a boolean field that indicates whether there are more commands to be discovered or not. A value of 0 indicates that there are more commands, while a value of 1 indicates that there are no more commands to be discovered. The command identifier fields contain the identifiers of the discovered commands, listed in ascending order.\n\nOnce the DiscoverCommandsReceived command is successfully executed, it provides valuable information about the commands that a cluster can process. This information can be used by the device to determine the capabilities and functionality of the cluster. It allows the device to understand which commands it can send to the cluster and what responses it can expect in return.\n\nOverall, the DiscoverCommandsReceived command is a useful tool for discovering and exploring the capabilities of a Zigbee cluster. It helps devices to communicate effectively with the cluster by providing information about the supported commands.", "18": "The Zigbee cluster command called \"DiscoverCommandsReceivedResponse\" is used to discover the optional and mandatory commands that a cluster can process. This command is generated when a remote device wants to know which commands a cluster supports. \n\nWhen the DiscoverCommandsReceivedResponse command is received, the device constructs an ordered list of command identifiers. This list starts with the first command that has an identifier that is equal to or greater than the identifier specified in the start command identifier field. The number of command identifiers included in the list cannot exceed the value specified in the maximum command identifiers field.\n\nThe DiscoverCommandsReceivedResponse command frame consists of the ZCL Header, Discovery complete field, and Command identifier fields. The ZCL Header contains the frame control field, which indicates a global command, and the manufacturer-specific sub-field, which specifies the manufacturer ID of the commands. The Command identifier field is set to indicate the Discover Commands Received Response command.\n\nThe Discovery complete field is a boolean field that indicates whether there are more commands to be discovered. A value of 0 means there are more commands, while a value of 1 means there are no more commands to be discovered.\n\nOnce the device receives the DiscoverCommandsReceivedResponse command, it is notified of the results of its command discovery request. If the discovery complete field indicates that there are more commands to be discovered, the device may choose to send subsequent discover command request commands to obtain the rest of the command identifiers. In this case, the start command identifier specified in the next command discovery request command should be set equal to one plus the last command identifier received in the Discover Commands Received Response.\n\nThe DiscoverCommandsGeneratedCommand is another Zigbee cluster command that can be used to discover all commands that a cluster may generate on the device. Similar to the DiscoverCommandsReceivedResponse command, it is generated when a remote device wants to know the commands that a cluster can generate.\n\nUpon receiving the DiscoverCommandsGeneratedCommand, the device constructs an ordered list of command identifiers, starting with the first command that has an identifier equal to or greater than the identifier specified in the start command identifier field. The number of command identifiers included in the list cannot exceed the value specified in the maximum command identifiers field.\n\nThe DiscoverCommandsGeneratedResponse command is sent in response to the DiscoverCommandsGeneratedCommand and is used to discover which commands a cluster supports. The format of the DiscoverCommandsGeneratedResponse command frame is the same as the DiscoverCommandsReceivedResponse command frame.\n\nIn summary, the DiscoverCommandsReceivedResponse command is used to discover the commands that a cluster can process, while the DiscoverCommandsGeneratedCommand is used to discover the commands that a cluster can generate. These commands allow a remote device to obtain information about the supported commands of a cluster, which can be useful for interoperability and functionality purposes. Once these commands are successfully executed, the device is notified of the results and can choose to send subsequent commands to obtain more command identifiers if necessary.", "19": "The Zigbee cluster command \"DiscoverCommandsGenerated\" is a command used to discover all commands that a cluster may generate or send to a device. This command allows a remote device to request information about the commands supported by a specific cluster in another device.\n\nThe purpose of the \"DiscoverCommandsGenerated\" command is to provide a way for a remote device to gather information about the commands that a cluster can generate or send. This is useful for devices that need to interact with other devices and clusters in a Zigbee network. By discovering the supported commands, a device can understand the capabilities of a cluster and determine how to interact with it effectively.\n\nWhen the \"DiscoverCommandsGenerated\" command is received by a device, it triggers the device to construct an ordered list of command identifiers. This list starts with the first command that has an identifier equal to or greater than the identifier specified in the \"start command identifier\" field. The number of command identifiers included in the list is limited by the value specified in the \"maximum command identifiers\" field.\n\nThe successful execution of the \"DiscoverCommandsGenerated\" command has an influence on the Zigbee device in several ways. Firstly, it allows the device to obtain information about the commands that a cluster can generate or send. This information is crucial for the device to understand the capabilities and functionalities of the cluster it is interacting with.\n\nAdditionally, the command discovery request provides the device with the opportunity to obtain the rest of the command identifiers if the discovery complete field indicates that there are more commands to be discovered. In this case, the device can choose to send subsequent discover command request commands to retrieve the remaining command identifiers. The start command identifier specified in the next command discovery request command should be set to one plus the last command identifier received in the Discover Commands Received Response.\n\nBy successfully executing the \"DiscoverCommandsGenerated\" command, a Zigbee device gains knowledge about the supported commands of a cluster. This knowledge enables the device to effectively communicate and interact with the cluster, ensuring seamless operation within the Zigbee network.\n\nIn conclusion, the \"DiscoverCommandsGenerated\" command in Zigbee is used to discover the commands that a cluster can generate or send. It allows a device to gather information about the supported commands of a cluster, enabling effective communication and interaction. The successful execution of this command provides the device with crucial knowledge about the cluster's capabilities and influences its behavior in subsequent interactions with the cluster.", "20": "The \"DiscoverCommandsGeneratedResponse\" is a Zigbee cluster command that is used to discover the commands that a cluster may generate on a specific device. This command is a response to the \"DiscoverCommandsGenerated\" command, which is sent by a remote device to request information about the commands supported by a cluster.\n\nThe purpose of the \"DiscoverCommandsGeneratedResponse\" command is to provide the device with information about the commands that can be generated by the cluster. This includes both standard commands and optional or manufacturer-specific commands. By receiving this response, the device can determine which commands it can expect from the cluster and how to interact with it.\n\nOnce the \"DiscoverCommandsGeneratedResponse\" command is successfully executed and received by the device, it notifies the device of the results of its command discovery request. The device can then use this information to decide whether there are more commands to be discovered. If the \"discovery complete\" field indicates that there are more commands to be discovered, the device can choose to send subsequent \"DiscoverCommandsGenerated\" commands to obtain the rest of the command identifiers.\n\nIn this case, the start command identifier specified in the next \"DiscoverCommandsGenerated\" command should be set equal to one plus the last command identifier received in the \"DiscoverCommandsGeneratedResponse\". This allows the device to continue the discovery process and obtain all the command identifiers supported by the cluster.\n\nThe \"DiscoverCommandsGeneratedResponse\" command has an influence on the Zigbee device as it provides crucial information about the commands supported by the cluster. This allows the device to understand the capabilities of the cluster and enables it to interact with the cluster effectively.\n\nBy knowing the commands that can be generated by the cluster, the device can make informed decisions on how to communicate with the cluster and utilize its functionalities. The device can also use this information to determine the appropriate commands to send to the cluster for specific operations or tasks.\n\nFurthermore, the \"DiscoverCommandsGeneratedResponse\" command enables the device to dynamically discover new commands as they become available in the cluster. By checking the \"discovery complete\" field in the response, the device can determine if there are more commands to be discovered and initiate subsequent discovery commands to obtain the remaining command identifiers.\n\nIn summary, the \"DiscoverCommandsGeneratedResponse\" command in Zigbee is used to provide a device with information about the commands that a cluster can generate. It allows the device to understand the capabilities of the cluster and determine how to interact with it. The command influences the device by enabling it to discover new commands and utilize the functionalities of the cluster effectively.", "21": "The Zigbee cluster command \"DiscoverAttributesExtended\" is used to discover the identifiers and types of attributes supported within a cluster on a Zigbee device. This command provides information about whether the attributes are readable, writeable, or reportable.\n\nThe command frame format consists of several fields. The ZCL Header field specifies the frame type as a global command and indicates whether the attributes to be discovered are standard or manufacturer-specific. The direction bit determines whether the server or client hosts the attributes. The command identifier field is set to indicate the Discover Attributes Extended command.\n\nThe Start Attribute Identifier field specifies the value at which attribute discovery should begin. This allows the device to start the discovery process from a specific attribute identifier rather than starting from the beginning. The Maximum Attribute Identifiers field specifies the maximum number of attribute identifiers to be returned in the response command.\n\nUpon receipt of the Discover Attributes Extended command, the device constructs an ordered list of attribute information records. Each record contains a discovered attribute identifier and its data type, arranged in ascending order of attribute identifiers. The list starts with the first attribute that has an identifier equal to or greater than the one specified in the Start Attribute Identifier field. The number of attribute identifiers included in the list does not exceed the value specified in the Maximum Attribute Identifiers field.\n\nThe Discover Attributes Extended Response command is sent in response to the Discover Attributes Extended command. It is used to determine if the attributes are readable, writable, or reportable. The response command frame includes the ZCL header, Discovery Complete field, and one or more Extended Attribute Information fields. Each Extended Attribute Information field contains the attribute identifier, data type, and attribute access control.\n\nThe Discovery Complete field is a boolean field that indicates whether there are more attributes to be discovered. A value of 0 indicates that there are more attributes, while a value of 1 indicates that there are no more attributes to be discovered.\n\nOnce the Discover Attributes Extended command is successfully executed, the Zigbee device obtains information about the attributes supported within the cluster. This information includes the attribute identifiers, data types, and access control. The device can then use this information to interact with the attributes based on their capabilities. For example, if an attribute is readable, the device can retrieve its value. If an attribute is writeable, the device can set its value. If an attribute is reportable, the device can receive reports or notifications when the attribute's value changes.\n\nThe command allows for efficient attribute discovery by specifying a starting attribute identifier and limiting the number of attributes returned. It enables devices to understand the capabilities of a cluster and interact with its attributes accordingly. By providing information on attribute readability, writability, and reportability, the command facilitates effective communication and control between Zigbee devices within a network."}, "0": {"0": "The \"ResetToFactoryDefaults\" command is a Zigbee cluster command that allows a Zigbee device to reset all the attributes of all its clusters to their factory defaults. This command is listed under the Basic cluster command IDs and is identified by the command identifier 0x00.\n\nThe purpose of the \"ResetToFactoryDefaults\" command is to provide a way for a Zigbee device to reset its attributes to their original factory settings. This can be useful in situations where a device needs to be restored to its default configuration, such as when it is being reinstalled or when there is a need to remove any customized settings.\n\nWhen the \"ResetToFactoryDefaults\" command is successfully executed, the device will reset all the attributes of all its clusters to their factory defaults. This means that any changes made to the device's attributes, such as configuration settings or software versions, will be reverted back to their original values. However, it is important to note that this command does not affect networking functionality, bindings, groups, or other persistent data. These aspects of the device will remain unaffected by the command.\n\nThe functionality of the \"ResetToFactoryDefaults\" command is implemented through the use of the DisableLocalConfig attribute. This attribute allows the disabling of local device configuration functions, including the factory reset button and device configuration buttons. By disabling these buttons, the command ensures that only authorized personnel can initiate a factory reset or make changes to the device's configuration.\n\nIn terms of its influence on the Zigbee device, the successful execution of the \"ResetToFactoryDefaults\" command will result in the device's attributes being reset to their factory defaults. This means that any customized settings or changes made to the device's attributes will be lost. The device will revert back to its original configuration as it was when it left the factory.\n\nHowever, it is important to note that the \"ResetToFactoryDefaults\" command does not affect networking functionality, bindings, groups, or other persistent data. This means that any network connections, bindings, or groups that were established prior to executing the command will remain intact. Only the device's attributes will be reset.\n\nOverall, the \"ResetToFactoryDefaults\" command provides a convenient way for a Zigbee device to restore its attributes to their original factory settings. It ensures that any customized settings or changes made to the device's attributes can be easily reverted back to their default values. By using the DisableLocalConfig attribute, the command also ensures that only authorized personnel can initiate a factory reset or make changes to the device's configuration."}, "27": {"0": "The \"Execution of a Command\" is a Zigbee cluster command used for remotely controlling and programming household appliances. It allows users to send commands such as START, STOP, and PAUSE to control the appliance's cycle. The purpose of this command is to provide a standardized way of controlling appliances within a Zigbee network.\n\nThe command is formatted as a payload, with the Command Identification field being the most important part. This field is an 8-bit value that identifies the specific command to be executed. The available commands are defined in Table 15-6, which includes commands like START, STOP, PAUSE, and various other appliance-specific commands.\n\nOnce the command is successfully received by the appliance, it will execute the specified command based on the Command Identification field. For example, if the command is to START the appliance cycle, the appliance will start its designated cycle. The device application will be informed of the imposed command, and additional personalized tasks can be initiated, such as sending a message to the appliance's Main Board controller.\n\nAfter executing the command, the appliance will generate a Signal State Notification, which indicates the new state of the appliance. This notification allows other devices in the Zigbee network to be aware of the appliance's current state and make informed decisions based on that information.\n\nThe \"Execution of a Command\" command influences the Zigbee device by providing a standardized and efficient way to control household appliances remotely. It simplifies the process of controlling appliances within a Zigbee network by defining a common set of commands that can be understood by all devices supporting the Appliance Control cluster.\n\nBy using this command, users can easily control their appliances without needing to physically interact with them. For example, they can start a washing machine cycle while being in another room or pause an oven's cooking process while being away from the kitchen.\n\nFurthermore, the command allows for interoperability between different Zigbee devices and manufacturers. The Manufacturer Specific command identification values provide flexibility for manufacturers to define their own custom commands, ensuring compatibility with their specific appliances.\n\nIn summary, the \"Execution of a Command\" Zigbee cluster command enables remote control and programming of household appliances within a Zigbee network. It standardizes the control process by defining a set of commands that can be executed on appliances. Once the command is successfully executed, the appliance generates a Signal State Notification to indicate its new state. This command greatly enhances the convenience and interoperability of Zigbee-enabled appliances.", "1": "The SignalState command in Zigbee is a cluster command used for managing household appliances. It allows for controlling and monitoring the state of appliances within a Zigbee network. The command is defined in the ZigBee Cluster Library Specification, specifically in Chapter 15.\n\nThe purpose of the SignalState command is to control the operation of appliances by issuing various commands. The command identification values define the different commands that can be sent using the SignalState command. These commands include starting and stopping the appliance cycle, pausing the cycle, enabling and disabling gas, and starting and stopping superfreezing or supercooling cycles. Additionally, there is a manufacturer-specific range of command identification values for custom commands.\n\nWhen the SignalState command is received by an appliance, it is required to execute the command specified in the Command Identification field. This means that the appliance will perform the corresponding action based on the received command. For example, if the command is to start the appliance cycle, the appliance will begin its operation. The appliance's main board controller may also be informed of the imposed command, allowing for potential personalized tasks to be initiated.\n\nAfter executing the command, the appliance is required to generate a Signal State Notification. This notification includes information about the new state of the appliance. This allows other devices in the Zigbee network to be aware of the current state of the appliance and take appropriate actions if needed.\n\nIn addition to controlling appliances, the SignalState command can also be used to retrieve the status of household appliances. By sending a SignalState command without a payload, a device can request the current state of an appliance. In response to this command, the device will generate a Signal State Response command, providing information about the appliance's status.\n\nThe SignalState command also supports write functions. These functions are used to set appliance parameters or provide information related to the execution of an appliance cycle. For example, start time or finish time information can be provided through the write functions command. The state of these functions is reflected in the cluster attribute that represents the current state of the function. It is important to note that writing a function is different from writing an attribute value.\n\nOverall, the SignalState command in Zigbee is a versatile command that allows for controlling and monitoring household appliances within a Zigbee network. It provides a standardized way to issue commands, retrieve appliance status, and set parameters for appliance functions. By successfully executing the command, appliances can be controlled, and their status can be monitored by other devices in the network.", "2": "The \"Write Functions\" command is a Zigbee cluster command used to set appliance functions and provide information regarding the execution of an appliance cycle. This command allows for the configuration of condition parameters such as start time or finish time information for the appliance cycle.\n\nThe command is structured as a basic message and is used to write the current state of a specific function to the cluster attribute that represents it. The command frame consists of a Write Functions record, which contains the function identifier, function data type, and function data.\n\nUpon receipt of the Write Functions command, the appliance is required to set the function specified in the Function identifier field. The appliance will update its internal functions accordingly. If attribute reporting is configured for certain function attributes, an attribute reporting command will be generated to indicate that the attribute and the internal appliance function have been modified. If attribute reporting is not used, the successful execution of the Write Functions command can be verified by using the Read Attribute command to poll the written attribute.\n\nThe purpose of the Write Functions command is to provide a means of configuring and controlling the behavior of household appliances within a Zigbee network. By setting specific functions, such as start or stop cycles, superfreezing or supercooling cycles, or enabling or disabling gas, users can effectively manage the operation of their appliances remotely.\n\nOnce the Write Functions command is successfully executed, it has a significant influence on the Zigbee device. The appliance will execute the command specified in the Command Identification field, which can initiate or modify specific appliance cycles or functions. This can include starting or stopping appliance cycles, pausing or resuming cycles, enabling or disabling gas, or engaging in superfreezing or supercooling cycles.\n\nThe successful execution of the Write Functions command triggers a change in the appliance's state, which is then communicated through a Signal State Notification. This allows the device application to be informed of the imposed command and potentially initiate personalized tasks, such as sending a message to the appliance's main board controller.\n\nOverall, the Write Functions command plays a crucial role in controlling and managing household appliances within a Zigbee network. It provides the ability to configure and modify specific functions, allowing users to remotely control and monitor their appliances' behavior. The successful execution of this command triggers changes in the appliance's state and enables the appliance to generate notifications to keep the device application informed.", "3": "The \"OverloadPauseResume\" command is a Zigbee cluster command that is used in the Appliance Management Zigbee Cluster Library. This command is designed to control the behavior of a household appliance in response to an overload event.\n\nThe command consists of three different sub-commands: Overload Pause Command, Overload Pause Resume Command, and Overload Warning Command.\n\nThe Overload Pause Command is used to pause the operations of a household appliance when an imminent overload event is detected. Upon receiving this command, the appliance will stop its operations and enter a pause mode. In order to resume normal operation, an Overload Pause Resume Command should be issued by the device supporting the client side of the Appliance control cluster.\n\nThe Overload Pause Resume Command is used to resume the normal behavior of a household appliance that is in pause mode after receiving an Overload Pause Command. This command does not have any payload and upon receipt, the appliance will resume its operations.\n\nThe Overload Warning Command is used to send warnings to the household appliance about a possible overload event or to notify the end of the warning state. The payload of this command includes a Warning Event field, which represents the identifier of the events that need to be communicated to the devices to alert about a possible overload. The Warning Event field includes different event IDs that describe the type of warning, such as overall power above the \"available power\" level or overall power back below the \"power threshold\" level.\n\nOnce the OverloadPauseResume command is successfully executed, it has various effects on the Zigbee device. When the Overload Pause Command is received, the appliance will pause its operations, effectively stopping its normal behavior. In order to resume normal operation, an Overload Pause Resume Command should be issued. This command will cause the appliance to resume its operations and return to its normal behavior.\n\nIf attribute reporting is configured on some function attributes, an attribute reporting command will be generated when the attribute, and therefore the internal appliance function, is actually modified. This allows for monitoring and tracking of changes in the appliance's behavior.\n\nIf attribute reporting is not used, the correct execution of the Write Function command, which is used to set the function given in the Function identifier field, should be verified by using the Read Attribute command to poll the written attribute. This ensures that the desired changes have been successfully applied to the appliance.\n\nIn summary, the OverloadPauseResume command in the Zigbee Cluster Library's Appliance Management specification is used to control the behavior of a household appliance in response to an overload event. It allows for pausing and resuming the operations of the appliance, as well as sending warnings about possible overload events. The successful execution of this command has a direct influence on the behavior of the Zigbee device, causing it to pause, resume, or receive warnings based on the command received.", "4": "The OverloadPause command is a Zigbee cluster command that is used to pause a household appliance in the event of an imminent overload. It is defined in the ZigBee Cluster Library Specification Chapter 15.\n\nThe purpose of the OverloadPause command is to prevent a household appliance from operating when it is at risk of overloading. This command is typically sent by a device supporting the client side of the Appliance control cluster to instruct the appliance to pause its operations.\n\nThe OverloadPause command does not have any payload, meaning it does not carry any additional data or information. It is a simple command that only serves the purpose of pausing the appliance.\n\nOnce the appliance receives the OverloadPause command, it is required to pause its operations. This means that the appliance will stop functioning temporarily in order to prevent an overload. The pause will continue until a subsequent command, called the Overload Pause Resume command, is issued by the device supporting the client side of the Appliance control cluster.\n\nThe Overload Pause Resume command is used to resume the normal operation of the appliance after it has been paused due to an overload event. It is recommended to issue this command once the overload situation has been resolved and it is safe for the appliance to resume its operations.\n\nIn addition to the OverloadPause command, there is also the Overload Warning command. This command is used to send warnings to the household appliance regarding a possible overload event or to notify the end of the warning state. The payload of the Overload Warning command includes a field called Warning Event, which represents the identifier of the events that need to be communicated to the devices to alert about a possible overload.\n\nThe Warning Event field is an enum8 data type, which means it can take on values from a predefined set of options. The options represent different warning events related to the overall power consumption of the appliance. These events include warnings about the overall power being above the \"available power\" level or the \"power threshold\" level, as well as warnings about the overall power being back below these levels.\n\nOverall, the OverloadPause command is a crucial command in Zigbee networks as it allows for the safe handling of overload situations in household appliances. By pausing the appliance's operations, the command helps to prevent damage or malfunction caused by excessive power consumption. Once the overload situation is resolved, the appliance can be resumed using the Overload Pause Resume command. The Overload Warning command, on the other hand, provides a mechanism for alerting devices about possible overload events and notifying the end of warning states.", "5": "The \"OverloadWarning\" command is a Zigbee cluster command that is used to send warnings to a household appliance in the event of a possible overload. It is also used to notify the end of the warning state. This command is specified in the ZigBee Cluster Library Specification Chapter 15, which is a document published by the ZigBee Alliance.\n\nThe purpose of the \"OverloadWarning\" command is to alert the household appliance about a possible overload event. It is meant to prevent damage to the appliance and ensure the safety of the user. The command is triggered when the overall power consumption of the appliance exceeds certain predefined levels.\n\nThe command has two parts: \"Overload Pause Command\" and \"Overload Warning Command\". The \"Overload Pause Command\" is used to pause the operations of the appliance when an imminent overload event is detected. This is done to prevent further power consumption and potential damage. The command has no payload, meaning it does not require any additional data to be sent along with it.\n\nOnce the \"Overload Pause Command\" is received by the appliance, it pauses its operations. In order to resume normal operation, an \"Overload Pause Resume Command\" should be issued by the device supporting the client side of the Appliance control cluster. This command is not specified in the given description, but it can be assumed that it is used to resume the appliance's operations after the overload condition has been resolved.\n\nThe \"Overload Warning Command\" is used to send warnings to the appliance about a possible overload event. It is also used to notify the end of the warning state. The command payload is formatted as an enumeration field called \"Warning Event\". This field represents the identifier of the events that need to be communicated to the devices to alert about possible overload.\n\nThe \"Warning Event\" field has several values that represent different warning conditions. These conditions include overall power above the \"available power\" level, overall power above the \"power threshold\" level, overall power back below the \"available power\" level, overall power back below the \"power threshold\" level, and overall power potentially above the \"available power\" level if the appliance starts.\n\nUpon receiving the \"Overload Warning Command\", the appliance is expected to show the possible warning state on a display. For example, it can show an icon indicating a possible overload condition when activating the appliance in the case of Warnings 1 and 2. In the case of Warnings 3 and 4, the appliance should resume the normal state, indicating that the overload condition has been resolved.\n\nIn summary, the \"OverloadWarning\" command is used to send warnings to a household appliance in the event of a possible overload. It is also used to pause the operations of the appliance when an imminent overload event is detected. The command has a payload field called \"Warning Event\" that represents different warning conditions. Upon receiving the command, the appliance shows the warning state on a display or resumes the normal state based on the warning condition. Overall, the command helps in preventing damage to the appliance and ensuring user safety during overload events."}, "3": {"0": "The Zigbee cluster command \"Identify\" is a command that allows a device to identify itself to an observer. The purpose of this command is to provide a way for devices to indicate which device they are among several devices. This can be useful in scenarios where there are multiple devices of the same type and it is necessary to differentiate between them.\n\nThe \"Identify\" command is part of the Identify Server Cluster, which is a server-side cluster that supports the IdentifyTime attribute. This attribute specifies the length of time, in seconds, that the device will continue to identify itself. The attribute can be set to a value between 0x0000 and 0xffff. If the attribute is set to a value other than 0x0000, the device will enter its identification procedure, which typically involves flashing a light with a period of 0.5 seconds. The IdentifyTime attribute is decremented every second, and once it reaches or is set to the value 0x0000, the device will terminate its identification procedure.\n\nThe \"Identify\" command is received by the server side of the Identify cluster. It is capable of receiving three commands: Identify, Identify Query, and Trigger Effect. The Identify command is used to start or stop the device's identification procedure. When this command is received, the device sets the IdentifyTime attribute to the value specified in the command, which determines the length of time the device will identify itself.\n\nThe Identify Query command allows a sending device to request the target device to respond if it is currently identifying itself. This command has no payload. When the device receives an Identify Query command, it checks if it is currently identifying itself. If it is, it generates an Identify Query Response command and unicasts it to the requestor. If it is not currently identifying itself, it takes no further action.\n\nThe Trigger Effect command allows the device to provide visual feedback to the user, such as a light effect. This command is used to indicate certain circumstances, such as a color light turning green when it has successfully connected to a network. The payload of this command includes an Effect Identifier field, which specifies the identify effect to use. The effect identifier field contains one of the non-reserved values specified in Table 3-33 of the Zigbee Cluster Library Specification.\n\nOnce the \"Identify\" command is successfully executed, it has several influences on the Zigbee device. First, it starts or stops the device's identification procedure, which typically involves flashing a light with a period of 0.5 seconds. This allows the device to indicate to an observer which device it is among several devices. Second, the IdentifyTime attribute is set to the value specified in the command, determining the length of time the device will continue to identify itself. The attribute is decremented every second, and once it reaches or is set to 0x0000, the device will terminate its identification procedure. Finally, the Trigger Effect command allows the device to provide visual feedback to the user, such as a light effect, indicating certain circumstances. This feedback can be used to enhance the user experience and provide additional information about the device's status or actions.\n\nIn summary, the \"Identify\" command in Zigbee allows a device to identify itself to an observer. It starts or stops the device's identification procedure, sets the length of time for identification, and allows for visual feedback through the Trigger Effect command. This command enhances the user experience and provides a way to differentiate between multiple devices of the same type.", "1": "The Zigbee cluster command \"IdentifyQuery\" is used to request a Zigbee device or devices to respond if they are currently in the process of identifying themselves. This command does not have any payload.\n\nOnce a Zigbee device receives the IdentifyQuery command, it checks if it is currently identifying itself. If it is, the device generates an appropriate Identify Query Response command and unicasts it back to the requestor. The Identify Query Response command includes the Identify Time field, which specifies the duration for which the device will continue identifying itself. The device sets its IdentifyTime attribute to the value of the Identify Time field, which starts, continues, or stops the device's identification procedure as detailed in the Zigbee specification.\n\nThe purpose of the IdentifyQuery command is to allow a device to determine if other devices on the Zigbee network are currently identifying themselves. This can be useful in scenarios where a device needs to coordinate with other devices during the identification process. For example, a gateway device may use the IdentifyQuery command to check if a light bulb is currently identifying itself before sending a command to change its color.\n\nThe functionality of the IdentifyQuery command is straightforward. It is a simple request command without any payload. Its purpose is to trigger a response from devices that are currently identifying themselves. By sending this command, a device can determine the identification status of other devices on the network.\n\nOnce the IdentifyQuery command is successfully executed, it can have an influence on the Zigbee device that receives it. If the device is currently identifying itself, it generates an Identify Query Response command and sends it back to the requestor. The Identify Query Response command includes the Identify Time field, which specifies the duration for which the device will continue identifying itself.\n\nThe Identify Time field in the Identify Query Response command influences the device's identification procedure. By setting the IdentifyTime attribute to the value of the Identify Time field, the device starts, continues, or stops identifying itself based on the specified duration. This allows the device to coordinate its identification procedure with other devices on the network.\n\nOverall, the IdentifyQuery command is a useful tool for devices on a Zigbee network to communicate and coordinate during the identification process. It allows devices to determine if other devices are currently identifying themselves and enables them to synchronize their identification procedures. By using the IdentifyQuery command, devices can enhance their functionality and provide a better user experience by coordinating visual feedback or other effects during the identification process.", "64": "The Zigbee cluster command called \"TriggerEffect\" is used to provide visual feedback to the user, such as a light effect, in order to enhance the user experience. This command allows an implementation to trigger a specific effect based on certain circumstances, such as a color light turning green when it successfully connects to a network.\n\nThe command's payload is formatted with two fields: the Effect Identifier field and the Effect Variant field. The Effect Identifier field is 8-bits in length and specifies the type of effect to be triggered. It contains values such as Blink, Breathe, Okay, Channel change, Finish effect, and Stop effect. Each value represents a different visual effect that can be displayed by the Zigbee device.\n\nThe Effect Variant field is also 8-bits in length and indicates which variant of the effect should be triggered. If a device does not support the given variant, it will use the default variant. The Effect Variant field contains values such as Default, which represents the default variant of the effect.\n\nOnce the TriggerEffect command is successfully executed on a Zigbee device, the device will execute the specified trigger effect based on the values in the Effect Identifier and Effect Variant fields. If the specified variant is not supported by the device, it will execute the default variant instead.\n\nThe purpose of this command is to provide visual feedback to the user in a customizable and flexible manner. It allows implementers to define and use different visual effects to enhance the user experience. For example, a light turning on and off once (Blink effect) can indicate a specific event, while a light turning on and off repeatedly over a period of time (Breathe effect) can create a calming effect.\n\nThe TriggerEffect command does not replace the identify mechanism used during commissioning, but rather complements it by providing additional visual feedback. It allows devices to communicate their status or events to the user in a more intuitive and appealing way. For instance, a colored light turning green for a second can indicate a successful network connection, while a non-colored light flashing twice can indicate the completion of a certain task.\n\nThe successful execution of the TriggerEffect command has an influence on the Zigbee device by providing visual feedback to the user. This feedback can help users understand the status or events of the device more easily. It enhances the user experience and improves the interaction between the user and the Zigbee device.\n\nIn conclusion, the TriggerEffect command in Zigbee allows for the triggering of visual effects on a Zigbee device to provide feedback to the user. It offers a range of effects and variants that can be customized by implementers. The successful execution of this command enhances the user experience and improves the communication between the device and the user."}, "4": {"0": "The AddGroup command is a Zigbee cluster command that allows a sending device to add group membership in a particular group for one or more endpoints on the receiving device. The command is defined in the Zigbee Cluster Library Specification.\n\nThe AddGroup command has a payload format that consists of two fields: Group ID and Group Name. The Group ID field contains a valid group identifier in the range 0x0001 \u2013 0xfff7. The Group Name field is optional and can be ignored if the device is unable to store its contents.\n\nUpon receiving the AddGroup command, the device performs a series of procedures. First, it verifies that the Group ID field contains a valid group identifier within the specified range. If the Group ID is outside this range, the status is set to INVALID_VALUE.\n\nNext, the device checks if it already has an entry in its Group Table that corresponds to the value of the Group ID field. If it does, the Group Name is updated (if supported), the status is set to SUCCESS, and the device continues to the next step.\n\nThe device then checks if it has free entries in its Group Table. If there are no free entries, the status is set to INSUFFICIENT_SPACE.\n\nIf the device has a free entry in its Group Table, it adds the values of the Group ID and Group Name (if supported) fields to its Group Table, and the status is set to SUCCESS.\n\nIf the AddGroup command was received as a unicast, the device generates an Add Group Response command with the evaluated status and transmits it back to the originator of the AddGroup command.\n\nThe purpose of the AddGroup command is to allow devices to establish group membership in a particular group. By adding group membership, devices can participate in group-based operations and communications within a Zigbee network.\n\nThe AddGroup command's functionality is to add the values of the Group ID and Group Name fields to the device's Group Table. This allows the device to keep track of its group memberships and participate in group-specific activities.\n\nOnce the AddGroup command is successfully executed, the device updates its Group Table with the new group membership. This enables the device to receive group-specific commands or messages targeted at the added group. The device can then perform actions or respond accordingly based on the group membership.\n\nOverall, the AddGroup command plays a crucial role in establishing group membership within a Zigbee network. It allows devices to join specific groups and participate in group-based operations, enhancing the overall functionality and communication capabilities of the Zigbee network.", "1": "The \"ViewGroup\" command in Zigbee is used to request a response from a receiving entity or entities containing the application name string for a specific group. This command allows a device to retrieve information about a particular group within its network.\n\nThe payload format for the ViewGroup command consists of a single field called \"Group ID,\" which is a 16-bit unsigned integer. This field represents the identifier of the group for which the device wants to retrieve information.\n\nUpon receiving the ViewGroup command, the device follows a specific procedure. First, it verifies that the Group ID field contains a valid group identifier within the range of 0x0001 to 0xfff7. If the Group ID is outside this range, the device sets the status as \"INVALID_VALUE\" and proceeds to the next step.\n\nNext, the device attempts to retrieve the corresponding entry in its Group Table using the provided Group ID. If no entry exists for the specified group, the status is set as \"NOT_FOUND.\"\n\nIf the device successfully retrieves the requested entry from its Group Table, the status is set as \"SUCCESS.\" Finally, if the ViewGroup command was received as a unicast (directed to a specific device), the device generates a ViewGroup Response command. This command includes the retrieved group entry and the evaluated status. The device then transmits the ViewGroup Response command back to the originator of the ViewGroup command.\n\nThe purpose of the ViewGroup command is to allow devices to obtain information about a specific group within the Zigbee network. By requesting the application name string for a group, devices can gather essential details about the group's purpose, functionality, and members.\n\nThe functionality of the ViewGroup command lies in its ability to retrieve the requested group entry from the device's Group Table. By providing the Group ID, the command allows devices to access the relevant information associated with the specified group. This information can be crucial for various network management tasks, such as monitoring group activities, controlling group behavior, or facilitating group communication.\n\nOnce the ViewGroup command is successfully executed, it has several influences on the Zigbee device. Firstly, it allows the device to respond to the originator of the command with a ViewGroup Response command. This response contains the retrieved group entry and the evaluated status, providing the originator with the requested information.\n\nAdditionally, the ViewGroup command enables the device to validate the Group ID and ensure it falls within the acceptable range. This validation helps maintain the integrity of the Zigbee network by preventing invalid or unauthorized access to group information.\n\nFurthermore, the ViewGroup command plays a role in facilitating efficient network management. By allowing devices to retrieve group-specific details, it enables better control and coordination within the network. Devices can use the obtained information to make informed decisions, optimize group operations, and enhance overall network performance.\n\nIn conclusion, the ViewGroup command in Zigbee serves the purpose of requesting information about a specific group within the network. It allows devices to retrieve the application name string for a group and provides essential details about its functionality and members. By successfully executing this command, devices can respond with the requested information and utilize it for various network management tasks.", "2": "The \"GetGroupMembership\" command in Zigbee is used to inquire about the group membership of a receiving device and endpoint. It allows the sending device to retrieve information about the groups that the receiving device is a member of.\n\nThe payload format of the \"GetGroupMembership\" command consists of two fields: \"Group count\" and \"Group list\". The \"Group count\" field is a uint8 type that indicates the number of groups in the \"Group list\" field. The \"Group list\" field is a list of 16-bit integers that contains the group identifiers.\n\nUpon receiving the \"GetGroupMembership\" command, the receiving entity (device or endpoint) responds with group membership information using the \"GetGroupMembershipResponse\" frame. The response depends on the values in the command frame:\n\n1. If the \"Group count\" field of the command frame is 0, indicating an empty \"Group list\" field, the entity responds with all group identifiers of which it is a member.\n\n2. If the \"Group list\" field of the command frame contains at least one group of which the entity is a member, the entity responds with each entity group identifier that matches a group in the \"Group list\" field.\n\n3. If the \"Group count\" is non-zero and the \"Group list\" field does not contain any group of which the entity is a member, the entity only responds if the command is unicast. The response will have a group count of zero.\n\nThe purpose of the \"GetGroupMembership\" command is to provide a means for devices to inquire about the group membership of other devices. This information can be useful for various purposes, such as coordinating group actions or managing group-related functionalities.\n\nThe functionality of the \"GetGroupMembership\" command allows a device to retrieve information about the groups that another device is a member of. By specifying the group identifiers in the command frame, the sending device can request specific group membership information from the receiving device. The receiving device then responds with the requested information, allowing the sending device to gather data about the group membership of the receiving device.\n\nOnce the \"GetGroupMembership\" command is successfully executed, the Zigbee device that initiated the command will receive a response containing the group membership information of the receiving device. This information can be used by the sending device for various purposes, such as determining which groups the receiving device belongs to and coordinating group actions accordingly.\n\nIn summary, the \"GetGroupMembership\" command in Zigbee is used to inquire about the group membership of a receiving device and endpoint. It allows a sending device to retrieve information about the groups that the receiving device is a member of. The command's functionality enables the sending device to request specific group membership information from the receiving device, and the response provides the requested information. Once successfully executed, the command provides the sending device with valuable data about the group membership of the receiving device, which can be used for coordination and management purposes.", "3": "The \"RemoveGroup\" command is a Zigbee cluster command that allows a sender to request that a receiving entity or entities remove their membership in a particular group. When a group is removed, any scenes associated with that group should also be removed.\n\nThe payload format for the Remove Group command consists of a 16-bit field called \"Group ID\" which specifies the group identifier to be removed.\n\nUpon receipt of the Remove Group command, the device performs the following procedure:\n\n1. The device verifies that the Group ID field contains a valid group identifier in the range of 0x0001 to 0xfff7. If the Group ID is outside this range, the status is set to INVALID_VALUE.\n\n2. The device attempts to remove the entry in its Group Table corresponding to the group identifier specified in the Group ID field. If no such entry exists in the Group Table, the status is set to NOT_FOUND.\n\n3. If the entry is successfully removed from the Group Table, the status is set to SUCCESS.\n\n4. If the Remove Group command was received as a unicast, the device generates a Remove Group Response command with the Status field set to the evaluated status and transmits it back to the originator of the Remove Group command.\n\nThe Remove All Groups command is another Zigbee cluster command that allows the sending device to direct the receiving entity or entities to remove all group associations. This command does not have a payload. When the Remove All Groups command is received, the device removes all groups on its endpoint from its Group Table. If the Remove All Groups command was received as a unicast and a default response is requested, the device generates a Default Response command with the Status field set to SUCCESS and transmits it back to the originator of the command.\n\nThe Add Group If Identifying command is a command that allows the sending device to add group membership in a particular group for one or more endpoints on the receiving device, on condition that it is identifying itself. This command is used to assist in configuring group membership when a commissioning tool is not available. The payload format for this command includes a Group ID field and a Group Name field. If the device is unable to store the contents of the Group Name field, it may be ignored.\n\nIn summary, the RemoveGroup command allows a sender to request the removal of group membership in a specific group, the Remove All Groups command directs the removal of all group associations, and the Add Group If Identifying command adds group membership for one or more endpoints on the receiving device. These commands have specific procedures to follow upon receipt and can influence the Zigbee device by removing or adding group associations and associated scenes.", "4": "The RemoveAllGroups command is a Zigbee cluster command that allows a sending device to direct the receiving entity or entities to remove all group associations. This command is used to remove all groups on a specific endpoint of a Zigbee device, which also necessitates the removal of all associated scenes.\n\nThe command does not have any payload and is simply sent to the receiving device to initiate the removal process. Upon receiving the RemoveAllGroups command, the device is required to remove all groups on the specified endpoint from its Group Table. If the command is received as a unicast (directed to a specific device), the receiving device is also required to generate a Remove Group Response command with the evaluated status and transmit it back to the originator of the RemoveAllGroups command. The Remove Group Response command provides information about the status of the removal process.\n\nThe RemoveAllGroups command has a significant influence on the Zigbee device once it is successfully executed. By removing all group associations, the device effectively eliminates any group-based functionalities and associations. This means that any devices or endpoints that were previously associated with a group will no longer receive group-specific commands or messages.\n\nAdditionally, as mentioned in the description, removing all groups also necessitates the removal of all associated scenes. Scenes are pre-defined configurations or settings that can be applied to a group of devices simultaneously. Therefore, when all groups are removed, any scenes associated with those groups will also be removed.\n\nIt is important to note that scenes not associated with a group do not need to be removed. This means that if a scene is configured to control devices or endpoints individually rather than as a group, it will not be affected by the RemoveAllGroups command.\n\nIf the RemoveAllGroups command is received as a unicast and a default response is requested, the device is required to generate a Default Response command with the Status field set to SUCCESS and transmit it back to the originator of the RemoveAllGroups command. The Default Response command is a confirmation message that indicates the successful execution of the command.\n\nOverall, the RemoveAllGroups command serves the purpose of removing all group associations on a specific endpoint of a Zigbee device. It ensures that devices or endpoints are no longer part of any groups, effectively disabling group-specific functionalities. The command also removes any associated scenes, but scenes not associated with a group are not affected. The successful execution of the command results in the removal of group associations and the generation of a response message to confirm the status of the removal process.", "5": "The \"AddGroupIfIdentifying\" command is a Zigbee cluster command that allows a sending device to add group membership in a particular group for one or more endpoints on the receiving device, on the condition that it is identifying itself. This command is used to assist in configuring group membership when a commissioning tool is not available.\n\nThe payload format of the \"AddGroupIfIdentifying\" command consists of two fields: Group ID and Group Name. The Group ID field contains a valid group identifier in the range 0x0001 \u2013 0xfff7. The Group Name field is optional and may be ignored if the device is unable to store its contents.\n\nWhen the receiving device receives the \"AddGroupIfIdentifying\" command, it performs the following procedure:\n\n1. The device verifies if it is currently identifying itself. If it is not identifying itself, and the command was received as unicast with a default response requested, the device generates a Default Response command with the Status field set to SUCCESS and transmits it back to the originator of the command. If the command was not received as unicast or the device is not currently identifying itself, no further processing is performed.\n\n2. The device verifies if the Group ID field contains a valid group identifier within the specified range. If the Group ID is outside this range, the status is set to INVALID_VALUE, and the device proceeds to step 6.\n\n3. The device checks if it already has an entry in its Group Table that corresponds to the value of the Group ID field. If the requested entry already exists, the status is set to SUCCESS, and the device proceeds to step 6.\n\n4. The device verifies if it has free entries in its Group Table. If there are no free entries, the status is set to INSUFFICIENT_SPACE, and the device proceeds to step 6.\n\n5. If all the above verifications pass, the device adds the values of the Group ID and Group Name (if supported) fields to its Group Table, and the status is set to SUCCESS.\n\n6. If the \"AddGroupIfIdentifying\" command was received as unicast and the evaluated status is not SUCCESS, the device generates a Default Response command with the Status field set to the evaluated status and transmits it back to the originator of the command. If the command is multicast or broadcast, no response is defined. However, if the command is unicast and there is no error or the endpoint is not identifying, a Default Response with a Status of SUCCESS is expected.\n\nThe \"AddGroupIfIdentifying\" command has the following influence on the Zigbee device once it is successfully executed:\n\n- The device adds group membership for one or more endpoints in a particular group if it is currently identifying itself.\n- The device verifies the validity of the Group ID field and checks if it already has an entry for the requested group in its Group Table.\n- If the device has free entries in its Group Table, it adds the Group ID and Group Name (if supported) to its Group Table.\n- If the command was received as unicast and the evaluated status is not SUCCESS, a Default Response command is generated with the appropriate status and transmitted back to the originator.\n- If the command is multicast or broadcast, no response is defined.\n- If the command is unicast and there is no error or the endpoint is not identifying, a Default Response with a Status of SUCCESS is expected.\n\nIn summary, the \"AddGroupIfIdentifying\" command allows a Zigbee device to add group membership for one or more endpoints in a particular group, provided that the device is identifying itself. It verifies the validity of the Group ID field, checks for existing entries in the Group Table, and adds the requested group if there is sufficient space. The command generates a response in certain scenarios, ensuring proper communication between devices in the Zigbee network."}, "5": {"0": "The \"AddScene\" command is a Zigbee cluster command specified in the Zigbee Cluster Library Specification. It is used to add a new scene to a Zigbee device's Scene Table. The command allows for the creation of customized scenes that can be recalled later to set specific attribute values for different clusters.\n\nThe purpose of the \"AddScene\" command is to enable the addition of new scenes to a Zigbee device's Scene Table. A scene is a predefined set of attribute values for one or more clusters that can be recalled and applied to the device. By adding scenes, users can create customized settings for different scenarios or preferences.\n\nThe functionality of the \"AddScene\" command involves sending a command frame with the appropriate payload to the Zigbee device. The payload format includes fields such as Group ID, Scene ID, Transition time, Scene Name, and extension field sets. The extension field sets allow for additional attributes specific to different clusters to be included in the scene.\n\nOnce the \"AddScene\" command is successfully executed, the Zigbee device performs the following procedure:\n\n1. The device verifies the validity of the Group ID field, checking if it falls within the range of 0x0000 to 0xfff7. If the Group ID is outside this range, the status is set to INVALID_VALUE.\n\n2. If the Group ID is non-zero, the device checks if it corresponds to an entry in its Group Table. If there is no such entry, the status is set to INVALID_FIELD.\n\n3. The device checks if there are free entries in its Scene Table. If there are no free entries, the status is set to INSUFFICIENT_SPACE.\n\n4. If there are free entries, the device adds the scene entry to its Scene Table, copying the fields from the Add Scene command payload. If there is already a scene in the Scene Table with the same Scene ID and Group ID, it will be overwritten.\n\n5. If the Add Scene command was received as a unicast, the device generates an Add Scene Response command with the evaluated status and transmits it back to the originator of the Add Scene command.\n\nThe successful execution of the \"AddScene\" command allows the Zigbee device to store the newly added scene in its Scene Table. This scene can then be recalled later using the \"ViewScene\" command or applied using the \"RecallScene\" command. The Scene Transition Time element of the scene table is updated with the Transition Time field value, and the TransitionTime100ms element is set to zero.\n\nIt is important to note that when the Add Scene, View Scene, Remove Scene, Remove All Scenes, Store Scene, Enhanced Add Scene, Enhanced View Scene, or Copy Scene command frames are received via the groupcast or broadcast transmission service, no response is given. This ensures efficient communication and avoids unnecessary responses.\n\nIn summary, the \"AddScene\" command in Zigbee allows for the addition of customized scenes to a Zigbee device's Scene Table. These scenes can be recalled or applied later to set specific attribute values for different clusters. The command's successful execution involves verifying the input parameters, adding the scene to the Scene Table, and generating a response if the command was received as a unicast.", "1": "The ViewScene command is a Zigbee cluster command that allows a Zigbee device to view a specific scene stored in its Scene Table. This command is part of the Zigbee Cluster Library Specification and is defined in the Zigbee Alliance document.\n\nThe purpose of the ViewScene command is to retrieve a scene entry from the device's Scene Table and provide it to the requesting entity. A scene in Zigbee represents a specific configuration or state of a group of devices within a network. Scenes can be used to control multiple devices simultaneously and provide a convenient way to recall predefined configurations.\n\nThe ViewScene command requires two parameters: Group ID and Scene ID. The Group ID field contains a valid group identifier in the range 0x0000 \u2013 0xfff7, and the Scene ID field specifies the specific scene to be viewed. The device receiving the command verifies the validity of these parameters before proceeding with the command execution.\n\nOnce the ViewScene command is successfully executed, the device performs the following procedure:\n\n1. Verify Group ID: The device checks if the Group ID field contains a valid group identifier within the allowed range. If the Group ID is outside this range, the status is set to INVALID_VALUE, indicating an error.\n\n2. Verify Group Table: If the Group ID is non-zero, the device verifies if it corresponds to an entry in its Group Table. The Group Table is a data structure that stores information about the groups to which the device belongs. If there is no corresponding entry in the Group Table, the status is set to INVALID_FIELD, indicating an error.\n\n3. Verify Scene Table: The device checks if the scene entry corresponding to the Group ID and Scene ID fields exists in its Scene Table. The Scene Table is a data structure that stores information about the scenes configured on the device. If the requested scene entry is not found in the Scene Table, the status is set to NOT_FOUND, indicating an error.\n\n4. Retrieve Scene Entry: If the scene entry is found in the Scene Table, the device retrieves the requested scene entry. The scene entry contains the necessary information to recreate the scene, including the configuration and state of the devices associated with the scene.\n\n5. Generate View Scene Response: If the ViewScene command was received as a unicast (directed to a specific device), the device generates a View Scene Response command. The View Scene Response command includes the retrieved scene entry and the status of the command execution. The device then transmits this response back to the originator of the ViewScene command.\n\nThe successful execution of the ViewScene command allows the requesting entity to obtain the scene configuration and state stored in the device's Scene Table. This information can be used to recreate the scene on other devices or to display the scene details in a user interface.\n\nIn summary, the ViewScene command in Zigbee allows a device to retrieve a specific scene from its Scene Table and provide it to the requesting entity. This command facilitates the management and control of scenes within a Zigbee network, enabling synchronized control of multiple devices and providing a convenient way to recall predefined configurations.", "2": "The \"RemoveScene\" command is a Zigbee cluster command that is used to remove a specific scene from a Zigbee device's Scene Table. This command is part of the Zigbee Cluster Library Specification and is defined in Chapter 3 of the specification document.\n\nThe payload of the \"RemoveScene\" command is formatted as illustrated in Figure 3-21. It consists of two fields: Group ID and Scene ID. The Group ID field contains a valid group identifier in the range 0x0000 \u2013 0xfff7, and the Scene ID field corresponds to the scene entry that needs to be removed from the device's Scene Table.\n\nOnce the Zigbee device receives the \"RemoveScene\" command, it performs the following procedure:\n\n1. Verify Group ID: The device checks if the Group ID field contains a valid group identifier within the specified range. If the Group ID is outside this range, the status is set to INVALID_VALUE, and the device proceeds to step 5.\n\n2. Verify Group ID Entry: If the Group ID field is non-zero, the device verifies if it corresponds to an entry in its Group Table. If there is no such entry, the status is set to INVALID_FIELD, and the device proceeds to step 5.\n\n3. Verify Scene Entry: The device checks if the scene entry corresponding to the Group ID and Scene ID fields exists in its Scene Table. If there is no such entry, the status is set to NOT_FOUND, and the device proceeds to step 5.\n\n4. Remove Scene Entry: If the scene entry is found, the device removes it from its Scene Table, and the status is set to SUCCESS.\n\n5. Generate Response: If the \"RemoveScene\" command was received as a unicast, the device generates a \"Remove Scene Response\" command with the Status field set to the evaluated status. This response command is then transmitted back to the originator of the \"RemoveScene\" command.\n\nThe purpose of the \"RemoveScene\" command is to allow a Zigbee device to remove a specific scene from its Scene Table. Scenes are predefined configurations of device attributes that can be recalled and applied to the device, allowing for easy customization and control. By removing a scene, the device can reset its attributes to their default values or remove any customized settings associated with that scene.\n\nThe functionality of the \"RemoveScene\" command is to perform the necessary checks to ensure the validity of the Group ID and Scene ID fields and to remove the specified scene entry from the device's Scene Table. It also generates a response command to inform the originator of the status of the command execution.\n\nOnce the \"RemoveScene\" command is successfully executed, the Zigbee device removes the specified scene entry from its Scene Table. This means that the device will no longer have access to the configuration settings associated with that scene. Any attributes or settings that were customized or modified by the scene will be reverted to their default values or previous state.\n\nOverall, the \"RemoveScene\" command provides a means for Zigbee devices to manage their Scene Tables and remove specific scene entries as needed. It allows for efficient scene management and customization, ensuring that devices can easily reset or remove scene configurations when required.", "3": "The \"RemoveAllScenes\" command is a Zigbee cluster command that is used to remove all scenes associated with a specific group from a Zigbee device's Scene Table. This command is defined in the Zigbee Cluster Library Specification.\n\nThe purpose of the \"RemoveAllScenes\" command is to provide a way for a Zigbee device to remove all scenes associated with a particular group. A scene is a predefined state of a Zigbee network that can be recalled and applied to devices within that network. By removing all scenes associated with a group, a Zigbee device can effectively reset the state of the devices within that group to their default settings.\n\nThe functionality of the \"RemoveAllScenes\" command is defined by a series of steps that the Zigbee device must follow upon receiving the command. \n\nFirst, the device verifies that the Group ID field in the command payload contains a valid group identifier within the range of 0x0000 to 0xfff7. If the Group ID is outside this range, the status is set to INVALID_VALUE.\n\nNext, if the Group ID is non-zero, the device checks if it corresponds to an entry in its Group Table. The Group Table is a data structure that stores information about the groups to which the device belongs. If there is no corresponding entry in the Group Table, the status is set to INVALID_FIELD.\n\nAfter verifying the Group ID, the device checks if there are any scene entries in its Scene Table that correspond to the Group ID. The Scene Table is a data structure that stores information about the scenes associated with the device. If there are no corresponding scene entries, the status is set to NOT_FOUND.\n\nIf there are scene entries corresponding to the Group ID, the device removes all these scene entries from its Scene Table. The status is then set to SUCCESS.\n\nFinally, if the \"RemoveAllScenes\" command was received as a unicast (a message sent to a specific device), the device generates a \"Remove All Scenes Response\" command with the status field set to the evaluated status. This response command is then transmitted back to the originator of the \"RemoveAllScenes\" command.\n\nOnce the \"RemoveAllScenes\" command is successfully executed, the Zigbee device's Scene Table will no longer contain any scenes associated with the specified group. This means that any predefined states or configurations that were previously associated with the group will be removed. The devices within the group will revert to their default settings or states.\n\nIn summary, the \"RemoveAllScenes\" command in Zigbee is used to remove all scenes associated with a specific group from a Zigbee device's Scene Table. It allows a device to reset the state of devices within a group to their default settings. The command verifies the validity of the Group ID, checks for corresponding entries in the Group Table and Scene Table, removes the scene entries, and generates a response command if necessary. Once successfully executed, the command removes all scene configurations associated with the group, restoring the devices within the group to their default states.", "4": "The StoreScene command is a Zigbee cluster command that is used to store a scene in a Zigbee device. A scene is a predefined state of the device that can be recalled later. \n\nThe purpose of the StoreScene command is to allow a Zigbee device to store a scene in its Scene Table. The Scene Table is a data structure in the device that stores information about scenes, including their Group ID, Scene ID, and other extension field sets. \n\nThe StoreScene command has a payload format that includes the Group ID and Scene ID fields. The Group ID field contains a valid group identifier in the range 0x0000 \u2013 0xfff7, and the Scene ID field identifies the scene to be stored. \n\nWhen the StoreScene command is received by a Zigbee device, the device performs the following procedure:\n\n1. The device verifies that the Group ID field contains a valid group identifier. If the Group ID field contains a group identifier outside the valid range, the status is set to INVALID_VALUE.\n\n2. If the value of the Group ID field is non-zero, the device verifies that it corresponds to an entry in its Group Table. If there is no such entry in the Group Table, the status is set to INVALID_FIELD.\n\n3. The device verifies that it has free entries in its Scene Table. If there are no further free entries in the Scene Table, the status is set to INSUFFICIENT_SPACE.\n\n4. The device adds the scene entry into its Scene Table along with all extension field sets corresponding to the current state of other clusters on the same endpoint on the device. The Transition Time and Scene Name entries are set to 0 and the null string, respectively. If there is already a scene in the Scene Table with the same Scene ID and Group ID, it is overwritten, except for the Transition Time and Scene Name entries which are left unaltered. The status is set to SUCCESS.\n\n5. If the StoreScene command was received as a unicast, the device generates a Store Scene Response command with the Status field set to the evaluated status and transmits it back to the originator of the Store Scene command. \n\nIn summary, the StoreScene command allows a Zigbee device to store a scene in its Scene Table. The command verifies the validity of the Group ID and Scene ID fields, checks for available space in the Scene Table, and adds the scene entry along with extension field sets. If a scene with the same Group ID and Scene ID already exists, it is overwritten. Once the command is successfully executed, the device generates a Store Scene Response command with the status of the operation.", "5": "The RecallScene command is a Zigbee cluster command that allows a device to recall a previously stored scene. A scene is a predefined state of a device or group of devices that can be recalled and applied at any time. \n\nThe purpose of the RecallScene command is to retrieve a scene entry from the device's Scene Table and set the attributes and states of the corresponding clusters accordingly. This command is typically used to restore a specific state or configuration of a device or group of devices.\n\nThe RecallScene command payload consists of three fields: Group ID, Scene ID, and Transition Time. The Group ID field specifies the group to which the scene belongs, the Scene ID field identifies the specific scene to be recalled, and the Transition Time field indicates the duration of the transition from the old state to the new state.\n\nUpon receipt of the RecallScene command, the device performs the following procedure:\n\n1. The device verifies that the Group ID field contains a valid group identifier within the range of 0x0000 to 0xfff7. If the Group ID is outside this range, the status is set to INVALID_VALUE.\n\n2. If the Group ID field is non-zero, the device checks if it corresponds to an entry in its Group Table. If there is no such entry, the status is set to INVALID_FIELD.\n\n3. The device verifies if the scene entry corresponding to the Group ID and Scene ID fields exists in its Scene Table. If there is no such entry, the status is set to NOT_FOUND.\n\n4. If the scene entry exists, the device retrieves the requested scene entry from its Scene Table. For each cluster on the device, it retrieves any corresponding extension fields from the Scene Table and sets the attributes and states of the cluster accordingly. If there is no extension field set for a cluster, the state remains unchanged. If an extension field set omits the values of trailing attributes, those values remain unchanged.\n\n5. The RecallScene command does not result in a corresponding response command unless it is a unicast command and an error occurs during processing. In such cases, a Default Response command is generated with the status code set to the error status. If the RecallScene command is a unicast command and no error occurs, a Default Response command is generated with the status code field set to SUCCESS.\n\nThe Transition Time field in the command payload indicates the duration of the transition from the old cluster state to the new cluster state. If the Transition Time field is present and its value is not equal to 0xffff, it indicates the transition time in 1/10ths of a second. Otherwise, the transition time is determined by the scene transition time field of the Scene Table entry.\n\nOnce the RecallScene command is successfully executed, the device retrieves the specified scene entry from its Scene Table and applies the stored state to the corresponding clusters. This allows the device to restore a specific configuration or state that was previously stored as a scene. The Transition Time field determines the duration of the transition between the old and new states, providing a smooth and gradual transition where possible.\n\nIn summary, the RecallScene command in Zigbee allows a device to recall a previously stored scene and apply the stored state to the corresponding clusters. It verifies the validity of the Group ID and Scene ID fields, retrieves the scene entry from the Scene Table, and sets the attributes and states of the clusters accordingly. The Transition Time field determines the duration of the transition between the old and new states. Overall, this command enables devices to easily restore predefined configurations or states, enhancing the flexibility and convenience of Zigbee networks.", "6": "The \"GetSceneMembership\" command is a Zigbee cluster command that allows a device to retrieve information about the scenes associated with a specific group. The command is used to find an unused scene number within the group when no commissioning tool is available in the network or for a commissioning tool to retrieve information about used scenes for a group on a single device or on all devices in the group.\n\nThe command has a payload format that includes a Group ID field, which should contain a valid group identifier in the range of 0x0000 to 0xfff7. If the Group ID field contains a group identifier outside this range, the status of the command will be set to INVALID_VALUE. If the Group ID field is non-zero, the device verifies that it corresponds to an entry in its Group Table. If there is no such entry, the status will be set to INVALID_FIELD.\n\nUpon receiving the GetSceneMembership command, the device performs the following procedure:\n1. The device verifies the validity of the Group ID field.\n2. If the Group ID field is non-zero, the device checks if it corresponds to an entry in its Group Table.\n3. If the command was received as a unicast, the device generates a Get Scene Membership Response command with the evaluated status and transmits it back to the originator of the command. If the command was not received as a unicast, the device only generates a Get Scene Membership Response command if an entry within the Scene Table corresponds to the Group ID, and transmits it back to the originator.\n\nThe Get Scene Membership Response command provides information about the scenes associated with the specified group. The response includes the status of the command and, if applicable, the scene membership information.\n\nThe command does not result in a corresponding response command unless it is a unicast command and an error occurs during its processing. In that case, a Default Response command is generated with the status code set to the error status. If the command is a unicast command and no error occurs, a Default Response command is generated with the status code field set to SUCCESS.\n\nThe influence of the GetSceneMembership command on the Zigbee device depends on its successful execution. Once the command is successfully executed, the device retrieves information about the scenes associated with the specified group. This information can be used by the device or a commissioning tool to determine the available scenes and their corresponding attributes and states. The command allows for the retrieval of scene membership information, which can be useful for various purposes such as scene management, scene activation, or configuration of devices within the group.\n\nOverall, the GetSceneMembership command provides a means for devices to retrieve information about the scenes associated with a specific group, enabling scene management and configuration in a Zigbee network.", "64": "The Zigbee cluster command called \"EnhancedAddScene\" is used to add a scene to a Zigbee device using a finer scene transition time compared to the standard \"Add Scene\" command. The command payload is formatted in the same way as the Add Scene command, but with the difference that the Transition Time field is measured in tenths of a second instead of seconds.\n\nWhen the Enhanced Add Scene command is received, the Zigbee device performs the following procedure:\n\n1. The device verifies that the Group ID field contains a valid group identifier in the range 0x0000 \u2013 0xfff7. If the Group ID is outside this range, the status is set to INVALID_VALUE.\n2. If the Group ID is non-zero, the device verifies that it corresponds to an entry in its Group Table. If there is no such entry, the status is set to INVALID_FIELD.\n3. The device checks if there are free entries in its Scene Table. If there are no free entries, the status is set to INSUFFICIENT_SPACE.\n4. The device adds the scene entry into its Scene Table with the fields copied from the Enhanced Add Scene command payload. If there is already a scene in the Scene Table with the same Scene ID and Group ID, it is overwritten by the new scene entry. The Transition Time is separated into whole seconds for the standard Transition Time field of the scene table entry and the new TransitionTime100ms field.\n5. If the Enhanced Add Scene command was received as a unicast, the device generates an Enhanced Add Scene Response command with the evaluated status and transmits it back to the originator of the command.\n\nThe purpose of the Enhanced Add Scene command is to provide a way to add scenes with a finer scene transition time to a Zigbee device. This allows for more precise control over the transition between different scenes, enabling smoother and more customized lighting or device behavior changes.\n\nThe command's functionality is similar to the standard Add Scene command, but with the added capability of specifying the transition time in tenths of a second. This allows for more granular control over the speed at which the scene transitions.\n\nOnce the Enhanced Add Scene command is successfully executed, the Zigbee device adds the scene entry to its Scene Table, overwriting any existing scene with the same Scene ID and Group ID. The Transition Time is stored in two separate fields, one for whole seconds and another for tenths of a second.\n\nThe command's influence on the Zigbee device is that it expands the device's capability to support scenes with finer transition times. This can enhance the user experience by providing smoother and more precise control over lighting or device behavior changes. Additionally, by overwriting existing scenes with the same Scene ID and Group ID, the command allows for easy updating and modification of scenes without the need for manual deletion or reconfiguration.\n\nIn summary, the Enhanced Add Scene command in Zigbee allows for the addition of scenes with a finer transition time to a device. It verifies the validity of the Group ID, checks for available space in the Scene Table, and adds the scene entry with the specified transition time. The command's successful execution enhances the device's capability to support more precise and customizable scene transitions.", "65": "The EnhancedViewScene command is a Zigbee cluster command that allows for the retrieval of a scene using a finer scene transition time compared to the View Scene command. The purpose of this command is to provide a more precise and detailed view of a scene, allowing for smoother and more accurate scene transitions.\n\nWhen the command is received, the Zigbee device performs a series of procedures to ensure the validity and existence of the requested scene. First, it verifies that the Group ID field contains a valid group identifier within the range of 0x0000 to 0xfff7. If the Group ID field contains a group identifier outside this range, the status is set to INVALID_VALUE.\n\nNext, if the value of the Group ID field is non-zero, the device checks if it corresponds to an entry in its Group Table. If there is no such entry, the status is set to INVALID_FIELD.\n\nThe device then verifies if the scene entry corresponding to the Group ID and Scene ID fields exists in its Scene Table. If there is no such entry, the status is set to NOT_FOUND.\n\nIf all the previous checks pass successfully, the device retrieves the requested scene entry from its Scene Table, and the status is set to SUCCESS. The Transition Time, measured in tenths of a second, is separated into whole seconds for the standard Transition Time field of the scene table entry and the new TransitionTime100ms field, as specified.\n\nIf the Enhanced View Scene command was received as a unicast, the device generates an Enhanced View Scene Response command with the Status field set to the evaluated status and transmits it back to the originator of the command.\n\nThe functionality of the EnhancedViewScene command provides a more advanced way of viewing scenes compared to the standard View Scene command. By allowing for a finer scene transition time, it enables smoother and more precise scene transitions, enhancing the overall user experience.\n\nOnce the command is successfully executed, the Zigbee device retrieves the requested scene entry from its Scene Table. This allows for the device to have access to the specific scene details and parameters associated with the requested Group ID and Scene ID. The device can then use this information to perform various actions, such as adjusting lighting levels, setting the color temperature, or activating specific devices or appliances associated with the scene.\n\nOverall, the EnhancedViewScene command enhances the functionality of Zigbee devices by providing a more detailed and accurate view of scenes. It allows for smoother transitions and enables devices to have access to specific scene parameters, enhancing the overall control and customization capabilities of Zigbee networks.", "66": "The Copy Scene command in Zigbee is used to efficiently copy scenes from one group/scene identifier pair to another group/scene identifier pair. The command allows a device to duplicate scenes without having to manually recreate them. \n\nThe command payload is formatted with several fields: Mode, Group identifier from, Scene identifier from, Group identifier to, and Scene identifier to. \n\nThe Mode field is an 8-bit field that determines how the scene copy is to proceed. It contains two subfields: Copy All Scenes and Reserved. The Copy All Scenes subfield is a 1-bit field that indicates whether all scenes are to be copied. If set to 1, all scenes will be copied, and the Scene Identifier From and Scene Identifier To fields will be ignored. If set to 0, only the specified scene will be copied. \n\nThe Group Identifier From field is a 16-bit field that specifies the identifier of the group from which the scene is to be copied. Together with the Scene Identifier From field, this field uniquely identifies the scene to copy from the scene table. \n\nThe Group Identifier To field is a 16-bit field that specifies the identifier of the group to which the scene is to be copied. Together with the Scene Identifier To field, this field uniquely identifies the scene to copy to the scene table. \n\nThe Scene Identifier From field is an 8-bit field that specifies the identifier of the scene from which the scene is to be copied. Together with the Group Identifier From field, this field uniquely identifies the scene to copy from the scene table. \n\nThe Scene Identifier To field is an 8-bit field that specifies the identifier of the scene to which the scene is to be copied. Together with the Group Identifier To field, this field uniquely identifies the scene to copy to the scene table. \n\nOnce the Copy Scene command is received by a Zigbee device, it goes through a procedure to execute the command. \n\nFirst, the device verifies that the Group Identifier From and Group Identifier To fields contain a valid group identifier in the range 0x0000 \u2013 0xfff7. If either of these fields contains a group identifier outside this range, the status will be set to INVALID_VALUE. \n\nNext, the device checks if the specified group identifiers correspond to entries in its Group Table. If there is no such entry, the status will be set to INVALID_FIELD. \n\nThe device then verifies if the scene entry corresponding to the Group Identifier From and Scene Identifier From fields exists in its Scene Table. If there is no such entry, the status will be set to NOT_FOUND. \n\nIf the Copy All Scenes subfield of the Mode field is set to 1 or the scene entry corresponding to the Group Identifier To and Scene Identifier To fields does not exist in the scene table and the device has no further free entries in its Scene Table, the status will be set to INSUFFICIENT_SPACE. \n\nIf all the above verifications pass, the status will be set to SUCCESS. If the Copy All Scenes subfield of the Mode field is set to 1, the device will copy all its available scenes with the group identifier equal to the Group Identifier From field under the group identifier specified in the Group Identifier To field, keeping the scene identifiers the same. If the Copy All Scenes subfield is set to 0, the device will copy the specified scene entry to the scene table entry corresponding to the Group Identifier To and Scene Identifier To fields. If a scene already exists under the same group/scene identifier pair, it will be overwritten. \n\nFinally, if the Copy Scene command was received as a unicast, the device will generate a Copy Scene Response command with the Status field set to the evaluated status and transmit it back to the originator of the Copy Scene command. \n\nIn summary, the Copy Scene command in Zigbee allows for efficient copying of scenes from one group/scene identifier pair to another. It simplifies the process of duplicating scenes and enables devices to quickly create new scenes based on existing ones. The command's successful execution results in the creation of a copy of the specified scene in the destination group/scene identifier pair, overwriting any existing scene if necessary."}, "6": {"0": "The \"Off\" command in the Zigbee Cluster Library is used to turn off a Zigbee device. It is one of the command IDs for the On/Off cluster. \n\nThe purpose of the \"Off\" command is to instruct a device to enter its \"Off\" state, which is device-dependent but typically used for powering off or similar functions. When the command is received, the device will enter its \"Off\" state and the OnTime attribute will be set to 0x0000.\n\nThe \"Off\" command does not have a payload, meaning it does not require any additional data to be sent along with the command.\n\nThe functionality of the \"Off\" command is straightforward. When the command is received, the device will immediately switch to its \"Off\" state. This can be used to turn off lights, appliances, or any other Zigbee device that supports the On/Off cluster.\n\nThe command has an influence on the Zigbee device once it is successfully executed. By entering the \"Off\" state, the device will stop consuming power and will no longer perform its intended function. This can be useful for conserving energy or for turning off devices when they are not in use.\n\nIn addition to the \"Off\" command, there are other related commands in the On/Off cluster. The \"On\" command instructs a device to enter its \"On\" state, which is typically used for powering on or similar functions. The \"Toggle\" command allows a device to switch between its \"On\" and \"Off\" states. The \"Off with Effect\" command provides enhanced ways of fading devices off, allowing for different fading effects to be specified.\n\nThe behavior of the device upon receiving the \"Off\" command can be further influenced by the OffWaitTime attribute and the StartUpOnOff attribute. The OffWaitTime attribute specifies the length of time that the device should remain in its \"Off\" state to prevent an \"On\" command from immediately turning it back on. The StartUpOnOff attribute defines the desired startup behavior of the device when it is supplied with power, and this state is reflected in the OnOff attribute.\n\nOverall, the \"Off\" command is a fundamental command in the Zigbee Cluster Library's On/Off cluster. It allows for the easy control of Zigbee devices by turning them off, conserving energy, and preventing unintended switching to the \"On\" state.", "1": "The \"On\" command is a Zigbee cluster command that is used to control the power state of a Zigbee device. When this command is received by a device, it will either enter its \"On\" state or its \"Off\" state, depending on the current state of the device. The specific state that the device enters is device-dependent, but it is recommended that the \"On\" state be used for power on or similar functions, while the \"Off\" state be used for power off or similar functions.\n\nThe \"On\" command does not have a payload, meaning it does not carry any additional data or information. It is a simple command used to trigger the change in power state of the device.\n\nUpon receiving the \"On\" command, if the value of the OnTime attribute (a device-specific attribute) is equal to 0x0000, the device will set the OffWaitTime attribute to 0x0000. This means that if the device was previously in its \"Off\" state and the OnTime attribute is not set, the device will immediately transition to its \"On\" state without any delay.\n\nIn addition to the \"On\" command, there is also a \"Toggle\" command available in the Zigbee cluster. The \"Toggle\" command is used to switch the device's power state between \"On\" and \"Off\". When the \"Toggle\" command is received, if the device is in its \"Off\" state, it will transition to its \"On\" state. Conversely, if the device is in its \"On\" state, it will transition to its \"Off\" state. Similar to the \"On\" command, if the value of the OnOff attribute is equal to 0x00 and the value of the OnTime attribute is equal to 0x0000, the device will set the OffWaitTime attribute to 0x0000. If the value of the OnOff attribute is equal to 0x01, the OnTime attribute will be set to 0x0000.\n\nFurthermore, there is a command called \"Off With Effect\" that allows devices to be turned off using enhanced fading effects. This command has a payload that is formatted according to a specific structure. The payload consists of two fields: the Effect Identifier field and the Effect Variant field. The Effect Identifier field is 8-bits in length and specifies the fading effect to use when switching the device off. The Effect Variant field is also 8-bits in length and provides further details or variations of the fading effect.\n\nThe purpose of the \"On\" command and its related commands is to provide a standardized way of controlling the power state of Zigbee devices. By using these commands, devices can easily be turned on or off, and the \"Toggle\" command allows for toggling between the two states. The \"Off With Effect\" command adds the capability of using fading effects when turning off devices, allowing for enhanced user experiences.\n\nOnce the \"On\" command is successfully executed, the Zigbee device will transition to its \"On\" state. This means that it will be powered on or activated, depending on the specific function of the device. Similarly, when the \"Off\" command or \"Toggle\" command is successfully executed, the device will transition to its \"Off\" state, resulting in it being powered off or deactivated.\n\nIn summary, the \"On\" command is used to switch a Zigbee device to its \"On\" state, the \"Toggle\" command is used to toggle the power state between \"On\" and \"Off\", and the \"Off With Effect\" command provides enhanced ways of fading when turning off devices. These commands provide standardized control over the power state of Zigbee devices and allow for easy and efficient management of their power consumption and functionality.", "64": "The OffWithEffect command is a Zigbee cluster command that is used to turn off a Zigbee device using enhanced fading effects. It allows for different fading effects to be applied when switching the device off. The command has a payload that includes an Effect Identifier field and an Effect Variant field.\n\nThe Effect Identifier field is 8-bits in length and specifies the fading effect to use when switching the device off. It contains non-reserved values that correspond to different fading effects. The available values for the Effect Identifier field are listed in Table 3-48. Some of the values include Delayed All Off, Dying Light, and Reserved values.\n\nThe Effect Variant field is 8-bits in length and is used to indicate which variant of the effect should be triggered. If a device does not support the given variant, it will use the default variant. The values for the Effect Variant field depend on the value of the Effect Identifier field and are listed in Table 3-49. The Effect Variant field allows for customization of the fading effect, such as fade duration or dimming level.\n\nWhen the OffWithEffect command is received, the device will enter its 'Off' state. The specific 'Off' state may vary depending on the device, but it is recommended to be used for power off or similar functions. Additionally, the OnTime attribute of the device will be set to 0x0000, indicating that the device should not turn on automatically after a certain time.\n\nThe command does not have a payload for the On and Toggle commands. When the On command is received, the device will enter its 'On' state, which is recommended to be used for power on or similar functions. If the value of the OnTime attribute is 0x0000, the device will set the OffWaitTime attribute to 0x0000, indicating that the device should not wait before turning off again.\n\nThe Toggle command allows the device to switch between the 'On' and 'Off' states. If the device is in the 'Off' state, it will enter the 'On' state upon receiving the Toggle command. If it is in the 'On' state, it will enter the 'Off' state. If the value of the OnOff attribute is 0x00 and the value of the OnTime attribute is 0x0000, the device will set the OffWaitTime attribute to 0x0000. If the value of the OnOff attribute is 0x01, the OnTime attribute will be set to 0x0000.\n\nThe Off With Effect command allows devices to be turned off using enhanced fading effects. The payload of this command includes the Effect Identifier field and the Effect Variant field. The Effect Identifier field specifies the fading effect to use, while the Effect Variant field indicates which variant of the effect should be triggered. The command has an effect on the device's state and attributes. When the command is received, the device will enter its 'Off' state, update the OnOff attribute accordingly, and set the OnTime attribute to 0x0000. If the GlobalSceneControl attribute is equal to TRUE, the application on the associated endpoint will store its settings in its global scene and set the GlobalSceneControl attribute to FALSE. In all other cases, the application will enter its 'Off' state and update the OnOff attribute accordingly.\n\nIn summary, the OffWithEffect command in Zigbee is used to turn off a Zigbee device using enhanced fading effects. It allows for different fading effects to be applied when switching the device off. The command has a payload that includes an Effect Identifier field and an Effect Variant field, which specify the fading effect and its variant. When the command is successfully executed, the device will enter its 'Off' state and update relevant attributes. The command also has an effect on the device's global scene settings and control attribute.", "65": "The \"OnWithRecallGlobalScene\" command is a Zigbee cluster command that allows the recall of settings when a Zigbee device is turned off. This command is defined in the Zigbee Cluster Library Specification Foundation and is used to control the behavior of Zigbee devices.\n\nThe purpose of the \"OnWithRecallGlobalScene\" command is to provide a way for Zigbee devices to store their settings in a global scene when they are turned off and recall those settings when they are turned back on. This allows for consistent behavior and easy restoration of settings when devices are powered on.\n\nThe functionality of the command is as follows: when a Zigbee device receives the \"OnWithRecallGlobalScene\" command, it checks the value of the GlobalSceneControl attribute. If the attribute is set to TRUE, the command is discarded. If the attribute is set to FALSE, the device recalls its global scene, enters the appropriate state, and updates the OnOff attribute accordingly. The GlobalSceneControl attribute is then set to TRUE. Additionally, if the value of the OnTime attribute is equal to 0x0000, the device sets the OffWaitTime attribute to 0x0000.\n\nThe \"OnWithRecallGlobalScene\" command has a significant influence on the behavior of Zigbee devices once the command is successfully executed. When a device receives this command and the GlobalSceneControl attribute is set to FALSE, it recalls its global scene, which means it restores its settings to the state they were in when the device was turned off. This allows for seamless restoration of settings and ensures that the device behaves consistently.\n\nBy using this command, Zigbee devices can easily restore their settings and provide a consistent user experience. For example, if a Zigbee light bulb is turned off using the \"OnWithRecallGlobalScene\" command, it will remember its previous brightness level and color temperature when it is turned back on. This eliminates the need for users to manually adjust the settings every time they turn on the device.\n\nFurthermore, the command allows for customization of the effect variant that is triggered when the device is turned off. The Effect Variant field in the command specifies different variants of the effect, such as fade to off or dimming down before fading to off. Devices that do not support a specific variant will use the default variant.\n\nOverall, the \"OnWithRecallGlobalScene\" command provides a convenient way for Zigbee devices to store and recall their settings, ensuring consistent behavior and a seamless user experience. It allows for customization of the effect variant and eliminates the need for manual adjustment of settings when devices are turned on.", "66": "The \"OnWithTimedOff\" command is a Zigbee cluster command that allows devices to be turned on for a specific duration with a guarded off duration. This command is used to control the on/off state of a Zigbee device and set a specific time for the device to remain on before automatically turning off.\n\nThe command consists of three fields: On/Off Control, On Time, and Off Wait Time. The On/Off Control field is used to specify how the device is to be operated. It contains a sub-field called \"Accept Only When On\" which determines whether the command should be processed unconditionally or only when the device is already in the on state. If this sub-field is set to 1, the command will only be accepted if the device is already on.\n\nThe On Time field specifies the length of time in 1/10ths of a second that the device should remain on before automatically turning off. It has a range of 0x0000 to 0xfffe. The Off Wait Time field specifies the length of time in 1/10ths of a second that the device should remain off and guarded to prevent it from being turned on by subsequent commands. Like the On Time field, it also has a range of 0x0000 to 0xfffe.\n\nWhen the OnWithTimedOff command is received by a Zigbee device, several actions are taken depending on the values of the command fields and the current state of the device. If the Accept Only When On sub-field is set to 1 and the device is already in the off state, the command will be discarded. If the Off Wait Time is greater than zero and the device is off, the Off Wait Time attribute of the device will be set to the minimum of the current Off Wait Time attribute and the value specified in the command. This ensures that subsequent On With Timed Off commands received during the off period do not turn the device back on.\n\nIn all other cases, the device will set the On Time attribute to the maximum of the current On Time attribute and the value specified in the command. It will also set the Off Wait Time attribute to the value specified in the command and set the OnOff attribute to 0x01, indicating that the device is on. If both the On Time and Off Wait Time attributes are less than 0xffff, the device will then update itself every 1/10th second until both attributes reach 0x0000.\n\nDuring the update process, if the device is on and the On Time attribute is greater than zero, the device will decrement the On Time attribute. Once the On Time attribute reaches 0x0000, the device will set the Off Wait Time and OnOff attributes to 0x0000 and 0x00, respectively, turning the device off. Similarly, if the device is off and the Off Wait Time attribute is greater than zero, the device will decrement the Off Wait Time attribute. Once the Off Wait Time attribute reaches 0x0000, the update process will be terminated.\n\nOverall, the OnWithTimedOff command provides a way to control the on/off state of a Zigbee device for a specific duration and prevent it from being turned on by subsequent commands during the off period. It allows for timed control of devices and can be useful in various applications where devices need to be turned on and off automatically."}, "8": {"0": "The \"MoveToLevel\" command is a Zigbee cluster command that is part of the Level Control cluster. This command is used to control the level or brightness of a device, such as a light, within a Zigbee network.\n\nThe command ID for the Move to Level command is 0x00. It is a mandatory command and is used to instruct a device to move to a specific level. The payload of the command consists of four fields: Level, Transition time, OptionsMask, and OptionsOverride.\n\nThe Level field specifies the desired level to which the device should move. The meaning of the level is device-dependent, for example, in the case of a light, it represents the brightness level. The device will move from its current level to the specified level. The movement is continuous and as technically practical, meaning it is not a step function. The time taken to move to the new level is determined by the Transition time field, which is specified in tenths of a second. If the Transition time field is set to 0xffff, the time taken to move to the new level is determined by the OnOffTransitionTime attribute. If the OnOffTransitionTime attribute is not present, the device will move to the new level as fast as it is able. If the device is not capable of moving at a variable rate, the Transition time field may be disregarded.\n\nThe OptionsMask and OptionsOverride fields are used to create a temporary Options bitmap. Each bit of the temporary Options bitmap is determined based on the corresponding bit in the Options attribute, unless the OptionsMask field is present and has the corresponding bit set to 1. In that case, the corresponding bit in the OptionsOverride field determines the corresponding bit in the temporary Options bitmap. The resulting temporary Options bitmap is then processed as defined in section 3.10.2.2.8.\n\nOnce the Move to Level command is successfully executed, the Zigbee device will move to the specified level. The device will adjust its level or brightness as per the command's instructions. The time taken to reach the new level will be determined by the Transition time field or the OnOffTransitionTime attribute. The device will move in a continuous manner, without sudden jumps or steps. The command allows for smooth and gradual adjustments in the level of the device.\n\nOverall, the MoveToLevel command is an essential command in the Level Control cluster of Zigbee networks. It provides a standardized way to control the level or brightness of devices within the network. By using this command, users can easily adjust the level of lights or other devices, allowing for customization and convenience. The command ensures smooth and continuous transitions between levels, providing a seamless user experience.", "1": "The Zigbee cluster command called \"Move\" is described in the Zigbee Cluster Library Specification. This command is used to instruct a Zigbee device to move from its current level to a specified level. The meaning of \"level\" may vary depending on the device, for example, in the case of a light, it may refer to the brightness level.\n\nWhen the Move command is received by a device, it will initiate a continuous movement to the specified level. The movement should be as smooth as technically possible, avoiding sudden jumps or steps. The time taken to reach the new level is determined by the Transition time field, which is specified in tenths of a second. The device should strive to complete the movement within this time, or as close to it as possible.\n\nIf the Transition time field is set to the maximum value of 0xffff, the time taken to move to the new level will instead be determined by the OnOffTransitionTime attribute. This attribute is optional and may not be present in all devices. If it is not present, the device should move to the new level as fast as it is able.\n\nIn cases where the device is not capable of moving at a variable rate, the Transition time field may be disregarded. This means that the device will move to the new level as quickly as it can, without considering the specified transition time.\n\nThe Move command payload is formatted with several fields. The Move mode field specifies whether the movement should be \"Up\" or \"Down\", indicating an increase or decrease in level, respectively. The Rate field specifies the rate of movement in units per second. If the Rate field is set to 0xFF, the value in the DefaultMoveRate attribute will be used. If the DefaultMoveRate attribute is not supported, the device should move as fast as it is able.\n\nUpon receiving the Move command, the device will create and process a temporary Options bitmap as defined in the specification. The device will then initiate the movement in the specified direction based on the Move mode field and at the rate specified in the Rate field. If the level reaches the maximum or minimum allowed for the device, the movement will stop.\n\nIn summary, the Move command in Zigbee is used to instruct a device to move to a specified level. The command allows for smooth and continuous movement, with the time taken to reach the new level determined by the Transition time field. The command also provides options for setting the movement rate and considers device capabilities for variable-rate movement. Once the command is successfully executed, the Zigbee device will move to the specified level, adjusting its brightness or other relevant parameters accordingly.", "2": "The Zigbee cluster command called \"Step\" is described in the Zigbee Cluster Library Specification. The purpose of this command is to instruct a Zigbee device to move from its current level in an up or down direction in a continuous fashion. The command provides options for controlling the rate of movement and the transition time.\n\nUpon receipt of the Step command, the device first creates and processes a temporary Options bitmap. This bitmap specifies the options for the command, such as whether to override default settings. The device then determines the Step mode, which can be either \"Up\" or \"Down\", indicating the direction of movement.\n\nThe Step command payload is formatted with several fields. The Step mode field specifies the direction of movement, either Up or Down. The Step size field indicates the change in the device's current level. The Transition time field specifies the time it should take to perform the step, in tenths of a second. The OptionsMask and OptionsOverride fields are used to configure additional options for the command.\n\nThe device performs different actions based on the Step mode and the received command. If the Step mode is Up, the device increases its level at the rate given in the Rate field. If the level reaches the maximum allowed for the device, the device stops. If the Step mode is Down, the device decreases its level at the rate given in the Rate field. If the level reaches the minimum allowed for the device, the device stops.\n\nThe Transition time field determines the time taken to perform the step. If the Transition time field is set to 0xffff, the device should move as fast as it is able. If the device is not able to move at a variable rate, the Transition time field may be disregarded.\n\nWhen the Step command is successfully executed, the device moves in the specified direction and changes its current level by the specified Step size. If the maximum or minimum level allowed for the device is reached during the process, the transition time is proportionally reduced. This ensures that the device stays within its allowed level range.\n\nThe Step command provides a way to control the movement and level changes of Zigbee devices. It allows for smooth and continuous adjustments in the device's level. The command is particularly useful in scenarios where gradual changes in lighting, temperature, or other parameters are desired.\n\nIn addition to the Step command, the specification also describes the Stop command, which is used to terminate any ongoing Move to Level, Move, or Step commands. Upon receipt of the Stop command, the device stops the current movement and sets the CurrentLevel value to its value at the time of receipt. The RemainingTime is set to zero. This command ensures that any ongoing adjustments can be stopped and the device remains in a desired state.\n\nOverall, the Step command is a key feature in Zigbee devices, allowing for precise and controlled adjustments in their levels. It provides flexibility in controlling the rate of movement and transition time, ensuring smooth and gradual changes. The Stop command complements the Step command by allowing for the termination of ongoing adjustments when needed.", "3": "The \"Stop\" command is a Zigbee cluster command that is used to control the movement of a device's current level in an up or down direction. This command is specified in the Zigbee Cluster Library Specification, which is a document developed by the Zigbee Alliance.\n\nThe purpose of the \"Stop\" command is to allow a device to stop its current movement in response to a command. When this command is received by a device, it will perform specific actions based on the received command and the device's current level.\n\nThe functionality of the \"Stop\" command is defined in Table 3-63 of the specification. If the command received is an \"Up\" command, the device will increase its current level by a specified step size. However, if the maximum level allowed for the device is reached during this process, the transition time will be proportionally reduced. On the other hand, if the command received is a \"Down\" command, the device will decrease its current level by the specified step size. If the minimum level allowed for the device is reached during this process, the transition time will also be proportionally reduced.\n\nThe command payload for the \"Stop\" command is formatted as illustrated in Figure 3-43 of the specification. It consists of two map8 fields: OptionsMask and OptionsOverride. These fields are used to specify additional options for the command.\n\nOnce the \"Stop\" command is successfully executed, it has several influences on the Zigbee device. Firstly, any ongoing Move to Level, Move, or Step commands (and their 'with On/Off' variants) that are currently in process will be terminated. This ensures that the device immediately stops its movement and responds to the \"Stop\" command.\n\nThe value of the device's CurrentLevel will be left unchanged upon receipt of the \"Stop\" command. This means that the device will maintain its current level and not continue to increase or decrease it. Additionally, the RemainingTime attribute, which represents the remaining time for the ongoing movement, will be set to zero. This indicates that there is no remaining time for the movement as it has been stopped.\n\nIt is important to note that the \"Stop\" command has two entries in Table 3-5 of the specification. One entry is for the Move to Level, Move, and Set commands, while the other entry is for their 'with On/Off' counterparts. These entries allow for easy selection of the appropriate command set based on the specific requirements of the application. The \"Stop\" commands in both sets are identical, and the dependency on the On/Off functionality is determined by the original command that is being stopped.\n\nIn conclusion, the \"Stop\" command in Zigbee is used to control the movement of a device's current level. It allows the device to stop its current movement in response to a command, terminates ongoing movements, and maintains the current level without any further changes. Once successfully executed, the \"Stop\" command has a significant influence on the Zigbee device by immediately stopping its movement and resetting the remaining time attribute.", "4": "The \"MoveToLevel(WithOn/Off)\" command is a Zigbee cluster command that is part of the Level Control cluster. This command allows devices within a Zigbee network to control the level or brightness of a light or any other device that supports level control.\n\nThe purpose of the \"MoveToLevel(WithOn/Off)\" command is to instruct a device to move to a specific level or brightness. The level can be interpreted differently depending on the device, for example, in the case of a light, it represents the brightness level. The command provides a way to smoothly transition the device to the desired level, allowing for continuous and gradual changes rather than abrupt steps.\n\nThe command consists of a payload that includes several fields. The \"Level\" field specifies the target level that the device should move to. The \"Transition time\" field determines the time taken to reach the target level, measured in tenths of a second. If the \"Transition time\" field is set to 0xffff, the time taken to move to the new level is determined by the \"OnOffTransitionTime\" attribute. If the \"OnOffTransitionTime\" attribute is not present, the device will move to the new level as fast as it is able.\n\nThe \"OptionsMask\" and \"OptionsOverride\" fields are used to create a temporary options bitmap. The options bitmap is created from the \"Options\" attribute, and each bit in the temporary options bitmap is determined based on the corresponding bit in the options attribute, unless the \"OptionsMask\" field is present and has the corresponding bit set to 1. In that case, the corresponding bit in the \"OptionsOverride\" field determines the value in the temporary options bitmap.\n\nOnce the \"MoveToLevel(WithOn/Off)\" command is successfully executed, the device will move from its current level to the specified target level. The movement should be as continuous as technically practical, ensuring a smooth transition. The time taken to reach the target level will be determined by the \"Transition time\" field or the \"OnOffTransitionTime\" attribute. If the device is not able to move at a variable rate, the \"Transition time\" field may be disregarded.\n\nThe command also includes a \"Move\" command, which is similar to the \"MoveToLevel\" command but does not specify a target level. Instead, it instructs the device to move in a specific direction, either up or down, based on the \"Move mode\" field. The \"Rate\" field determines the rate of movement in units per second, and the device should try to match this rate as closely as possible.\n\nIn summary, the \"MoveToLevel(WithOn/Off)\" command allows devices to control the level or brightness of other devices within a Zigbee network. It provides a way to smoothly transition the device to a specified level, with the time taken to reach the target level determined by the \"Transition time\" field or the \"OnOffTransitionTime\" attribute. The command ensures continuous and gradual changes, improving the user experience when adjusting the level of a device.", "5": "The Move(WithOn/Off) command is a Zigbee cluster command that allows a device to move from its current level to a specified level. The level can represent different properties depending on the device, such as brightness level for a light. The command ensures that the movement is as continuous as technically practical, rather than a step function.\n\nWhen the Move(WithOn/Off) command is received by a device, it first creates and processes a temporary Options bitmap as defined in section 3.10.2.2.854 of the Zigbee Cluster Library Specification. This bitmap determines the specific options and settings for the command.\n\nThe device then moves from its current level to the value specified in the Level field of the command. The time taken to move to the new level is determined by the Transition time field, which is specified in tenths of a second. The device should try to move as close to this time as possible. However, if the Transition time field is set to 0xffff, the time taken to move to the new level is instead determined by the OnOffTransitionTime attribute. This attribute is optional and, if not present, the device should move to the new level as fast as it is able.\n\nIf the device is not capable of moving at a variable rate, the Transition time field may be disregarded. In such cases, the device can move to the new level as fast as it is able.\n\nThe command payload is formatted with several fields. The Move mode field specifies whether the movement is up or down, with values defined in Table 3-60 of the Zigbee Cluster Library Specification. The Rate field specifies the rate of movement in units per second. If the Rate field is set to 0xFF, the value in the DefaultMoveRate attribute should be used. If the DefaultMoveRate attribute is not supported, the device should move as fast as it is able.\n\nOnce the Move(WithOn/Off) command is successfully executed, the device will perform the specified movement. If the Move mode is set to \"Up,\" the device will increase its level at the rate specified in the Rate field. If the level reaches the maximum allowed for the device, the movement will stop. On the other hand, if the Move mode is set to \"Down,\" the device will decrease its level at the specified rate. If the level reaches the minimum allowed for the device, the movement will stop.\n\nIn summary, the Move(WithOn/Off) command in Zigbee allows a device to smoothly move from its current level to a specified level. The command takes into account options and settings, such as transition time and rate of movement, to ensure a continuous and controlled movement. The command's influence on the device is that it triggers the device to perform the specified movement in an up or down direction, adjusting its level accordingly.", "6": "The Step(WithOn/Off) command is a Zigbee cluster command that allows devices to move from their current level in an up or down direction in a continuous fashion. This command is defined in the Zigbee Cluster Library Specification.\n\nWhen a device receives the Step(WithOn/Off) command, it first creates and processes a temporary Options bitmap. This bitmap contains information about the command's options and settings.\n\nThe command payload for the Step(WithOn/Off) command is formatted with several fields. The Step mode field specifies whether the device should move up or down. The Transition time field specifies the time it should take to perform the step, in tenths of a second. The Step size field specifies the amount by which the device's level should change with each step.\n\nUpon receipt of the Step(WithOn/Off) command, the device will perform different actions depending on the Step mode specified. If the Step mode is \"Up\", the device will increase its level at the rate given in the Rate field. If the level reaches the maximum allowed for the device, the device will stop. If the Step mode is \"Down\", the device will decrease its level at the rate given in the Rate field. If the level reaches the minimum allowed for the device, the device will stop.\n\nThe device will move from its current level in an up or down direction as specified in the command. If the level reaches the maximum or minimum allowed for the device during the process, the transition time will be proportionally reduced. This ensures that the device does not exceed its level limits.\n\nThe Step(WithOn/Off) command also has an influence on the Zigbee device once it is successfully executed. When the device receives the Stop command, any ongoing Move to Level, Move, or Step command (and their 'with On/Off' variants) will be terminated. The value of the device's CurrentLevel attribute will be left at its value upon receipt of the Stop command, and the RemainingTime attribute will be set to zero.\n\nThis command provides a way for devices to smoothly change their levels in a continuous fashion. It allows for gradual increases or decreases in the device's level, ensuring that it does not exceed its limits. The command also provides a way to stop ongoing level changes, providing control and flexibility to the device.\n\nOverall, the Step(WithOn/Off) command is a useful Zigbee cluster command that enables devices to perform smooth level changes. It provides control over the rate and direction of level changes and allows for easy termination of ongoing level changes.", "8": "The \"MoveToClosestFrequency\" command is a Zigbee cluster command that is used to instruct a device to change its current frequency to either the requested frequency or the closest frequency that it can generate. This command is mandatory if the device supports the \"CurrentFrequency\" attribute.\n\nThe command payload for the \"MoveToClosestFrequency\" command consists of a single field called \"Frequency\", which is a 16-bit unsigned integer. Upon receipt of this command, the device will attempt to change its frequency to the specified value.\n\nIf the device is able to approximate the requested frequency, it will change its current frequency accordingly. However, if the device is unable to approximate the requested frequency, it will return a default response with an error code of INVALID_VALUE.\n\nThe ability to approximate a requested frequency is a manufacturer-specific decision, and it may vary from device to device. Each manufacturer determines whether a requested frequency can be approximated by a supported frequency.\n\nOnce the \"MoveToClosestFrequency\" command is successfully executed, the device will change its current frequency to the requested frequency or the closest frequency that it can generate. This change in frequency can have various implications depending on the specific device and its functionality.\n\nFor example, changing the frequency may affect the device's communication range, interference with other devices operating on different frequencies, or compatibility with other Zigbee devices in the network. The device may need to re-establish connections or reconfigure its settings to adapt to the new frequency.\n\nIt is important to note that the \"MoveToClosestFrequency\" command terminates any ongoing \"Move to Level\", \"Move\", or \"Step\" commands that are currently in process. The value of the device's CurrentLevel attribute is left unchanged upon receipt of the \"Stop\" command, and the RemainingTime attribute is set to zero.\n\nThe \"MoveToClosestFrequency\" command is part of the Zigbee Cluster Library Specification and is designed to provide a standardized way for devices to change their operating frequency. By supporting this command, Zigbee devices can ensure interoperability and compatibility within a Zigbee network.\n\nIn summary, the \"MoveToClosestFrequency\" command allows a Zigbee device to change its current frequency to either the requested frequency or the closest frequency it can generate. The command payload specifies the desired frequency, and the device will attempt to approximate it. The command's successful execution can have implications on the device's communication range, interference, and compatibility. It terminates any ongoing related commands and follows the Zigbee Cluster Library Specification for interoperability."}, "9": {"0": "The Zigbee cluster command \"ResetAlarm\" is used in the Alarms cluster to reset specific alarms or all alarms in a Zigbee device. This command is necessary for alarms that do not reset automatically. When a specific alarm is reset, a new notification is generated, and if implemented, a new record is added to the alarm log.\n\nThe \"ResetAlarm\" command has a command identifier field value of 0x00 and is marked as mandatory (M) in Table 3-67. It requires a payload formatted as an enum8 clusterId field, which represents the alarm code. This payload is illustrated in Figure 3-45.\n\nIn addition to resetting a specific alarm, the Alarms cluster also provides the functionality to reset all alarms using the \"Reset All Alarms\" command. This command, with a command identifier field value of 0x01, resets all active alarms in the device. Similar to the \"ResetAlarm\" command, any alarm conditions that were still active will trigger a new notification and, if implemented, a new record will be added to the alarm log.\n\nThe Alarms cluster also includes the \"Get Alarm\" command (command identifier field value 0x02), which retrieves the alarm with the earliest generated alarm entry in the alarm table. This command enables the reading of logged alarm conditions from the alarm table. Once an alarm condition has been reported, the corresponding entry in the table is removed. The \"Get Alarm\" command does not have a payload.\n\nFurthermore, the Alarms cluster provides the \"Reset Alarm Log\" command (command identifier field value 0x03), which clears the alarm table. This command does not require a payload.\n\nOnce the \"ResetAlarm\" command or any other alarm-related command is successfully executed, it has various influences on the Zigbee device. First, it resets the alarm condition, allowing the device to return to its normal state. If the alarm condition being reset was still active, a new notification is generated, ensuring that the appropriate parties are informed. The alarm log, if implemented, is also updated with a new record to maintain a historical record of alarm events.\n\nBy resetting alarms, the Zigbee device can effectively manage and respond to alarm conditions. It ensures that alarms that do not reset automatically are properly addressed, preventing false alarms or missed notifications. The ability to reset all alarms at once provides a convenient way to clear multiple alarms simultaneously. The \"Get Alarm\" command allows for the retrieval of alarm information, facilitating troubleshooting and analysis of alarm events. Lastly, the \"Reset Alarm Log\" command allows for the maintenance of a clean alarm log, ensuring efficient management of alarm records.\n\nOverall, the \"ResetAlarm\" command and other related commands in the Alarms cluster play a crucial role in maintaining the functionality and reliability of Zigbee devices by effectively managing alarm conditions and providing necessary notifications and records.", "1": "The \"ResetAllAlarms\" command is a Zigbee cluster command that is part of the Alarms cluster. It is used to reset all alarms in a Zigbee device. The purpose of this command is to clear any active alarm conditions and generate new notifications if necessary.\n\nThe Alarms cluster in Zigbee allows devices to monitor and manage alarm conditions. Each alarm condition is identified by an alarm code, and the ResetAllAlarms command provides a way to reset all alarm conditions at once.\n\nWhen the ResetAllAlarms command is successfully executed, any alarm conditions that were still active will be cleared. This means that the device will no longer consider those conditions as active alarms. If an alarm condition was actually still active at the time of resetting, a new notification will be generated to indicate that the alarm condition has been reset. Additionally, if the device supports an alarm log, a new record will be added to the log for each alarm condition that was reset.\n\nThe command is mandatory (M) and has a command identifier field value of 0x01. This means that all Zigbee devices that implement the Alarms cluster must support this command.\n\nThe command does not have a payload, which means that it does not require any additional data to be sent along with the command. It simply instructs the device to reset all alarms.\n\nThe influence of executing the ResetAllAlarms command on a Zigbee device is that it allows the device to clear any active alarm conditions and start fresh. This can be useful in situations where the device has received multiple alarm notifications and needs to reset all of them at once. By resetting the alarms, the device can ensure that it is no longer considering any previous alarm conditions as active.\n\nOnce the command is successfully executed, the device will be in a state where all alarms have been reset. This means that it will not generate any further notifications for the previously active alarm conditions. However, if new alarm conditions arise after the reset, the device will still generate notifications for those.\n\nIn summary, the ResetAllAlarms command is used to reset all alarms in a Zigbee device. It clears any active alarm conditions, generates new notifications if necessary, and adds new records to the alarm log if supported. The command has a mandatory implementation and does not require any additional data to be sent. Executing the command influences the device by clearing all alarms and allowing it to start fresh in monitoring and managing alarm conditions.", "2": "The Zigbee cluster command called \"GetAlarm\" is a command within the Alarms cluster, which is used to manage alarm conditions in a Zigbee device. The purpose of this command is to retrieve the alarm with the earliest generated entry in the alarm table and report it in a get alarm response command.\n\nThe functionality of the GetAlarm command is to enable the reading of logged alarm conditions from the alarm table. Once an alarm condition has been reported, the corresponding entry in the table is removed. This command does not have a payload, meaning it does not require any additional data to be sent along with the command.\n\nWhen the GetAlarm command is successfully executed, it has an influence on the Zigbee device. It allows the device to retrieve and report the earliest generated alarm condition from the alarm table. This can be useful for monitoring and managing alarm conditions in the device. By retrieving the alarm with the earliest entry, the device can prioritize and take appropriate actions based on the severity or importance of the alarm.\n\nThe successful execution of the GetAlarm command also has an impact on the alarm table itself. Once an alarm condition is reported and retrieved, the corresponding entry in the table is removed. This helps in keeping the alarm table up-to-date and ensures that only active alarms are present in the table. Additionally, if any alarm conditions were still active at the time of retrieval, a new notification will be generated, and if implemented, a new record will be added to the alarm log. This ensures that any ongoing or unresolved alarm conditions are properly addressed and recorded.\n\nOverall, the GetAlarm command provides a way to retrieve and manage alarm conditions in a Zigbee device. It allows for the monitoring and prioritization of alarms based on their generation time. By removing retrieved alarms from the table and generating new notifications and log records, it ensures that alarm conditions are properly handled and documented. This command plays a crucial role in maintaining the functionality and reliability of Zigbee devices in alarm management scenarios.", "3": "The Zigbee cluster command \"ResetAlarmLog\" is a command within the Alarms cluster, which is a part of the Zigbee Cluster Library. This command is used to reset the alarm log in a Zigbee device.\n\nThe purpose of the \"ResetAlarmLog\" command is to clear the alarm table and reset any logged alarm conditions in the device. When this command is successfully executed, it removes all the entries in the alarm table, effectively clearing the alarm history.\n\nThe functionality of the \"ResetAlarmLog\" command is straightforward. It does not require any payload or additional information. Once the command is sent to the Zigbee device, it triggers the clearing of the alarm table. This means that any previously logged alarm conditions are removed, and the alarm history is reset to an empty state.\n\nThe influence of the \"ResetAlarmLog\" command on the Zigbee device is significant. By clearing the alarm table, it allows the device to start fresh in terms of monitoring and reporting alarm conditions. Any alarms that were previously active and still persisting will be reset, triggering new notifications and potentially adding new records to the alarm log.\n\nThe command ensures that alarm conditions that do not automatically reset are properly handled. For alarms that are designed to reset automatically, this command may not have a significant impact. However, for alarms that require manual intervention to reset, the \"ResetAlarmLog\" command provides a way to clear the alarm table and start monitoring for new alarm conditions.\n\nThe successful execution of the \"ResetAlarmLog\" command can have various outcomes depending on the specific implementation of the Zigbee device. In general, it will result in the alarm table being cleared and any active alarm conditions being reset. This allows the device to resume monitoring for new alarm conditions and generating notifications accordingly.\n\nIt is important to note that the \"ResetAlarmLog\" command is just one of the commands available in the Alarms cluster. Other commands like \"Reset Alarm\" and \"Reset All Alarms\" provide more granular control over individual alarms or all alarms in the device. The \"Get Alarm\" command allows for the retrieval of the earliest generated alarm entry in the alarm table.\n\nIn conclusion, the \"ResetAlarmLog\" command in the Zigbee Alarms cluster serves the purpose of clearing the alarm table and resetting any logged alarm conditions in a Zigbee device. Its successful execution influences the device by allowing it to start fresh in terms of monitoring and reporting alarm conditions."}, "11": {"0": "The SetAbsoluteLocation command is a Zigbee cluster command that is used to set a device's absolute location and the channel parameters corresponding to that location. It is part of the Zigbee Cluster Library Specification and is defined in the Zigbee Alliance Document.\n\nThe purpose of the SetAbsoluteLocation command is to provide a means for a device to set its known, not calculated, absolute location and the channel parameters associated with that location. This allows other devices in the network to have accurate information about the device's location and adjust their behavior accordingly.\n\nThe command payload is formatted as illustrated in Figure 3-49. It consists of several fields including Coordinate 1, Coordinate 2, Coordinate 3, Power, and Path Loss Exponent. The three coordinate fields contain the absolute location of the destination device. If any coordinate field is not known, the value is set to 0x8000.\n\nUpon receipt of the SetAbsoluteLocation command, the device updates the attributes corresponding to the payload fields. This means that the device's location and channel parameters are updated based on the values provided in the command payload. Other devices in the network can then access this updated information and use it for various purposes.\n\nIn addition to the SetAbsoluteLocation command, there is also a related command called SetDeviceConfiguration. This command is used to set a device's location parameters, which are used for calculating and reporting measured location. However, this command is only valid if the Absolute bit of the LocationType attribute has a value of 0. The payload format for the SetDeviceConfiguration command is illustrated in Figure 3-50 and includes fields such as Power, Path Loss Exponent, Calculation Period, Number RSSI Measurements, and Reporting Period.\n\nThe SetDeviceConfiguration command allows a device to configure its location parameters, which are used for location calculation and reporting. This command is important for devices that rely on location-based functionality, as it allows them to customize their location parameters according to their specific requirements.\n\nOverall, the SetAbsoluteLocation command and the SetDeviceConfiguration command are essential for managing a Zigbee network and ensuring accurate location information for devices. By using these commands, devices can set their absolute location, update their location parameters, and provide accurate location information to other devices in the network. This information can then be used for various purposes such as optimizing network performance, enabling location-based services, and facilitating efficient communication between devices.", "1": "The \"SetDeviceConfiguration\" command in the Zigbee cluster is used to set a device's location parameters and calculate and report measured location. This command is only valid if the \"Absolute\" bit of the \"LocationType\" attribute has a value of 0.\n\nThe payload format for the \"SetDeviceConfiguration\" command consists of several fields. The \"Power\" field represents the power level of the device, the \"Path Loss Exponent\" field represents the path loss exponent, the \"Calculation Period\" field represents the period for calculating location, the \"Number RSSI Measurements\" field represents the number of RSSI measurements to be used for location calculation, and the \"Reporting Period\" field represents the period for reporting measured location.\n\nWhen the device receives the \"SetDeviceConfiguration\" command, it updates the attributes corresponding to the payload fields. This means that the device will adjust its location parameters according to the values provided in the command. This allows the device to accurately calculate and report its measured location.\n\nThe \"GetDeviceConfiguration\" command is used to request the location parameters of a device. The payload format for this command includes the \"Target Address\" field, which contains the 64-bit IEEE address of the device for which the location parameters are being requested. The device receiving this command will generate a \"Device Configuration Response\" command in response.\n\nThe \"GetLocationData\" command is used to request a device's location information and channel parameters. This command can be sent as a unicast, multicast, or broadcast frame. When sent as a broadcast frame, it is recommended to set the broadcast radius to 1 to minimize the risk of a broadcast storm. The payload format for this command includes the necessary fields to request the location data.\n\nIn summary, the \"SetDeviceConfiguration\" command allows for the setting of a device's location parameters, which are used for calculating and reporting measured location. The command updates the device's attributes according to the provided payload fields. The \"GetDeviceConfiguration\" command is used to request the location parameters of a device, and the \"GetLocationData\" command is used to request a device's location information and channel parameters. These commands enable devices to accurately determine and share their location information within a Zigbee network.", "2": "The \"GetDeviceConfiguration\" is a Zigbee cluster command used to request the location parameters of a device. These location parameters are essential for calculating and reporting the measured location of the device. \n\nThe payload format of the command consists of a single field called \"Target Address,\" which contains the 64-bit IEEE address of the device for which the location parameters are being requested. This field can contain the address of the sending device, the address of the receiving device, or the address of a third device. The third device can act as a designated device that holds the configurations of other devices for distribution during commissioning time. It is also possible for a device to request its own configuration if it loses its configuration settings due to power loss or reset.\n\nOnce the Zigbee device receives the \"GetDeviceConfiguration\" command, it is required to update the attributes corresponding to the payload fields. The device then generates a \"Device Configuration Response\" command as a response to the received command.\n\nThe purpose of the \"GetDeviceConfiguration\" command is to retrieve the location parameters of a specific device. These parameters are crucial for accurate location calculation and reporting. By requesting the location parameters, a Zigbee device can gather the necessary information to determine its own or another device's location.\n\nThe functionality of the \"GetDeviceConfiguration\" command allows for the retrieval of location parameters using the device's IEEE address. This command can be sent as a unicast, multicast, or broadcast frame. When sent as a broadcast frame, it is recommended to set the broadcast radius to 1 to minimize the risk of a broadcast storm.\n\nThe influence on the Zigbee device once the \"GetDeviceConfiguration\" command is successfully executed is twofold. Firstly, the device updates its attributes based on the received payload fields. This ensures that the device has the most up-to-date location parameters for accurate location calculation and reporting. Secondly, the device generates a \"Device Configuration Response\" command, which provides the requested location parameters to the sender of the original command.\n\nIn summary, the \"GetDeviceConfiguration\" command in Zigbee is used to request the location parameters of a device. It allows a device to retrieve the necessary information for accurate location calculation and reporting. Once the command is successfully executed, the device updates its attributes based on the payload fields and generates a response command containing the requested location parameters. This command plays a crucial role in enabling location-based functionality within a Zigbee network.", "3": "The \"GetLocationData\" command is a Zigbee cluster command used to request the location parameters and information of a device. This command allows a device to gather location data and channel parameters for calculating and reporting measured location. The command can be sent as a unicast, multicast, or broadcast frame, with precautions to minimize the risk of a broadcast storm.\n\nThe payload format for the \"GetLocationData\" command consists of several fields. The \"Target Address\" field contains the 64-bit IEEE address of the device for which the location parameters are being requested. This field can contain the address of the sending device, receiving device, or a third device. The inclusion of the sender's own configuration is possible when there is a designated device that holds the configurations of other devices for distribution during commissioning or in case the device loses its configuration settings due to power loss or reset. The \"Absolute Only\" field specifies the type of location information being requested, whether absolute or calculated. The \"Recalculate\" field indicates whether a new location calculation should be performed. The \"Broadcast Indicator\" field determines whether the command is sent as a unicast, multicast, or broadcast frame. The \"Broadcast Response\" field indicates whether subsequent responses after the first should be unicast or broadcast. The \"Compact Response\" field determines whether subsequent responses should be sent using the Location Data Notification or the Compact Location Data Notification command. The \"Number Responses\" field specifies the number of location responses to be returned. Finally, the \"Target Address\" field contains the IEEE address of the device for which the location information and channel parameters are being requested.\n\nUpon receipt of the \"GetLocationData\" command, the device is required to update the attributes corresponding to the payload fields. The device will generate a \"Device Configuration Response\" command in response to this command. If the command is sent as a unicast, the receiving device will return the requested information for the specified device if available. If the information is not available, the status field of the \"Location Data Response\" command will be set to \"NOT_FOUND\". If the command is sent as a broadcast or multicast, receiving devices will send back their own information. If the \"Number Responses\" field is greater than one, subsequent location readings/calculations will be sent using the Location Data Notification or the Compact Location Data Notification command, depending on the value of the \"Reduced Response\" field.\n\nIn summary, the \"GetLocationData\" command in Zigbee is used to request the location parameters and information of a device. It allows devices to gather location data and channel parameters for calculating and reporting measured location. The command can be sent as a unicast, multicast, or broadcast frame, with precautions to minimize broadcast storms. Upon successful execution of the command, the device updates the corresponding attributes and generates a response command. The command's functionality depends on the payload fields, such as the type of location information requested, whether a new calculation should be performed, and the number of location responses to be returned.", "4": "The RSSIResponse command is a Zigbee cluster command used to provide a response to an RSSI Request command. It is sent by a device in response to a request for the Received Signal Strength Indication (RSSI) value of a radio link. The command provides information about the neighbor device that replied to the RSSI request, including its IEEE address, coordinates (X, Y, Z), the RSSI value registered by the replying node, and the number of packets considered to calculate the RSSI value.\n\nThe purpose of the RSSIResponse command is to provide the RSSI information requested by another device. When the command is sent as a unicast, the information for the specific device specified in the Target Address field is returned, if the receiving device has or can obtain the information for that device. If the information is not available, the Status field of the Location Data Response command is set to NOT_FOUND. On the other hand, when the command is sent as a broadcast or multicast, receiving devices send back their own information, as there is no specific target address in this case.\n\nThe command payload of the RSSIResponse command is formatted with several fields. The Replying Device field contains the IEEE address of the neighbor device that replies to the RSSI request. The X, Y, and Z fields represent the coordinates of the replying node. The RSSI field provides the RSSI value registered by the replying node, which refers to the radio link between itself and the neighbor device that initiated the RSSI request. The RSSI value is expressed in dBm. The NumberRSSIMeasurements field indicates how many packets were considered to calculate the RSSI value, with a value of 1 meaning that no mean is supported.\n\nUpon receipt of the RSSIResponse command, the server side of the location cluster will wait for a certain CalculationPeriod time and then generate a Report RSSI Measurement command. This command allows the server to report the RSSI measurements to the requesting device. The CalculationPeriod time is a configurable parameter that determines the duration for which the server waits before generating the report.\n\nIn addition to the RSSIResponse command, there is another related command called Send Pings. This command is used to alert a node to start sending multiple packets so that all its one-hop neighbors can calculate the mean RSSI value of the radio link. The Send Pings command is used to facilitate the calculation of RSSI values by gathering data from neighboring devices. The command payload contains the IEEE address of the node that needs to perform the blasting (the destination node of the command), as well as other fields that correspond to attributes with the same names.\n\nIn summary, the RSSIResponse command in Zigbee is used to provide a response to an RSSI Request command. It allows devices to retrieve the RSSI information of a radio link between two devices. The command provides details about the replying device, its coordinates, the RSSI value, and the number of packets used to calculate the RSSI value. Upon receipt of the command, the server side of the location cluster generates a Report RSSI Measurement command after a configurable CalculationPeriod time. The RSSIResponse command, along with the Send Pings command, facilitates the gathering and calculation of RSSI values for neighboring devices in a Zigbee network.", "5": "The SendPings command is a Zigbee cluster command that is used to alert a node to start sending multiple packets so that all its one-hop neighbors can calculate the mean RSSI (Received Signal Strength Indication) value of the radio link. This command is defined in the Zigbee Cluster Library Specification.\n\nThe purpose of the SendPings command is to gather information about the radio link quality between a node and its neighboring nodes. By sending multiple packets and collecting the RSSI values, the node can calculate the mean RSSI value, which provides an indication of the signal strength and quality of the radio link. This information can be used for various purposes, such as optimizing the routing of data packets or identifying potential issues with the network.\n\nThe functionality of the SendPings command depends on how it is sent. If the command is sent as a unicast, it is targeted at a specific device, and the information for that device is expected to be returned. The receiving device, if it has or can obtain the information for the specified device, will return the information. If the information is not available, the Status field of the Location Data Response command will be set to NOT_FOUND.\n\nIf the command is sent as a broadcast or multicast, it is not targeted at a specific device, and the receiving devices will send back their own information. In this case, there is no IEEE target address. The subsequent location readings/calculations will be sent using the Location Data Notification or the Compact Location Data Notification command, depending on the value of the Reduced Response field.\n\nOnce the SendPings command is successfully executed, the Zigbee device will update the attributes corresponding to the payload fields of the command. These attributes include the Target Address, NumberRSSIMeasurements, and CalculationPeriod. The Target Address field contains the IEEE address of the intended target node. The NumberRSSIMeasurements field indicates how many packets were considered to give the RSSI value. The CalculationPeriod field specifies the time period between successive transmission of pings.\n\nUpon receipt of the SendPings command, the device will generate a number of RSSI Ping commands equal to the NumberRSSIMeasurements. These RSSI Ping commands will be sent to the neighboring nodes, and the device will wait for the CalculationPeriod time between successive transmission of pings.\n\nThe influence of the SendPings command on the Zigbee device is that it allows the device to gather information about the radio link quality with its neighboring nodes. This information can be used for various purposes, such as optimizing the routing of data packets or identifying potential issues with the network. By calculating the mean RSSI value, the device can assess the signal strength and quality of the radio link, which is crucial for maintaining a reliable and efficient Zigbee network.\n\nIn summary, the SendPings command in Zigbee is used to gather information about the radio link quality between a node and its neighboring nodes. By sending multiple packets and collecting the RSSI values, the node can calculate the mean RSSI value, which provides an indication of the signal strength and quality of the radio link. This information is important for optimizing the network and ensuring reliable communication within the Zigbee network.", "6": "The AnchorNodeAnnounce command is a Zigbee cluster command used by an anchor node to announce itself to the network. This command is typically sent by an anchor node when it joins the network and already has its coordinates commissioned. The purpose of this command is to inform the central device about the exact position of the anchor node.\n\nThe AnchorNodeAnnounce command payload consists of several fields. The Anchor Node IEEE Address field contains the IEEE address of the anchor node. The X, Y, and Z fields represent the coordinates of the anchor node. If any coordinate is unknown, it is set to 0x8000. The payload format is illustrated in Figure 3-55.\n\nOnce the AnchorNodeAnnounce command is received by a device, it updates the attributes corresponding to the payload fields. The device then generates a number of RSSI Ping commands equal to the NumberRSSIMeasurements specified in the payload. These RSSI Ping commands are used to measure the Received Signal Strength Indication (RSSI) between the anchor node and other devices in the network. The device waits for the CalculationPeriod time between successive transmission of pings.\n\nThe RSSI Ping commands generated by the device are part of the RSSI Location Cluster commands. The RSSI Location Cluster includes various commands for location-based services in Zigbee networks. The RSSI Ping command (Command Identifier 0x04) is used to measure the RSSI between two devices. The RSSI Request command (Command Identifier 0x05) is used to request RSSI measurements from other devices. The Report RSSI Measurements command (Command Identifier 0x06) is used to report RSSI measurements to other devices.\n\nThe AnchorNodeAnnounce command plays a crucial role in enabling location-based services in a Zigbee network. By announcing itself and providing its coordinates, the anchor node allows the central device to accurately determine the position of the anchor node. This information can then be used for various purposes such as asset tracking, indoor navigation, and proximity-based applications.\n\nThe successful execution of the AnchorNodeAnnounce command has a significant influence on the Zigbee device. Once the command is received, the device updates its attributes with the corresponding payload fields. This allows the device to accurately represent the position of the anchor node in its internal data structures. Additionally, the device generates RSSI Ping commands to measure the RSSI between the anchor node and other devices. These RSSI measurements are crucial for determining the distance and proximity between devices in the network.\n\nOverall, the AnchorNodeAnnounce command serves as a means for an anchor node to announce itself and provide its coordinates to the network. This command enables accurate positioning and location-based services in a Zigbee network, allowing for a wide range of applications and services that rely on location information."}, "32": {"0": "The Check-in command is a Zigbee cluster command used in the Poll Control Cluster. This command is sent by the Poll Control Cluster server to the devices it is paired with, based on the server's Check-inInterval attribute. The purpose of this command is to determine if any of the Poll Control Cluster clients are interested in having the server enter fast poll mode so that it can be managed.\n\nWhen the Check-in command is received by a Poll Control Cluster client, it should respond with a Check-in Response command indicating whether the server should or should not begin fast poll mode. The Check-in Response is used by the client to indicate if it wants the server to go into fast poll mode and for how long. If the client requests fast poll mode, it is responsible for telling the server to stop fast polling when it is done sending messages.\n\nThe Check-in command does not have any payload. It is a simple command used for communication between the server and the clients. The server sends out the Check-in command based on either the Check-inInterval attribute or the next Check-in value in the Fast Poll Stop Request generated by the client.\n\nOnce the Check-in command is successfully executed, it has an influence on the behavior of the Zigbee device. If the server receives a Check-in Response indicating that the client wants it to enter fast poll mode, it will start fast polling. Fast poll mode allows the server to receive and process messages more frequently, enabling efficient management of the device. However, if the server does not receive a Check-in Response within a certain time period (up to 7.68 seconds), it is free to return to normal polling according to the LongPollInterval attribute.\n\nIt is important to note that the Poll Control Cluster is typically used on battery-powered end devices, and the Check-in command has considerations for conserving battery life. The attributes Check-inInterval, LongPollInterval, and ShortPollInterval should be set in a way that ensures battery life is not excessively drained. Battery-powered devices may define their own boundaries for these attributes to protect against improper configuration that could cause frequent check-in messages and extended fast poll mode, leading to battery drain.\n\nIn summary, the Check-in command is used by the Poll Control Cluster server to determine if any of the paired clients are interested in fast poll mode. It expects a Check-in Response from the clients indicating whether fast poll mode should be initiated. Once executed successfully, the command influences the device's behavior by enabling fast poll mode for more frequent message processing, improving device management. However, battery-powered devices should set appropriate boundaries for the check-in intervals to conserve battery life."}, "26": {"0": "The PowerProfileRequest command is a Zigbee cluster command that is used by a device supporting the client side of the Power Profile cluster to request the Power Profile of a server device. The command can be used to request all Power Profiles available on the server device or to request a specific PowerProfileID. \n\nWhen the PowerProfileRequest command is sent, the server device is expected to respond with a PowerProfileResponse. If the server device has multiple Power Profiles, it should send multiple messages, one for each Power Profile. The PowerProfileResponse will include all the energy phases of the estimated Power Profile, including the previous energy phases and the current energy phase that is running. \n\nThe PowerProfileRequest command payload includes the PowerProfileID field, which specifies the profile that is being requested. The value of 0x00 in this field indicates that details related to all available profiles should be sent. The PowerProfileID field should not exceed the TotalProfileNum, which represents the total number of profiles available on the server device.\n\nThe PowerProfileRequest command is generated by the client side of the Power Profile cluster, such as a Home gateway device, when it needs to request the power profile from a server device that supports the Power Profile cluster. For example, a Home gateway device may request the power profile from a White Good device.\n\nOnce the PowerProfileRequest command is successfully executed and the server device responds with a PowerProfileResponse, the requesting device can obtain the Power Profile information it needs. This information can be used for various purposes, such as monitoring and controlling the energy consumption of devices in a Zigbee network.\n\nThe PowerProfileRequest command has an influence on the Zigbee device once it is successfully executed. By requesting and receiving the Power Profile information, the device can gain insights into the energy usage patterns and requirements of the server device. This knowledge can be used to optimize energy management strategies, improve efficiency, and make informed decisions regarding energy consumption.\n\nAdditionally, the PowerProfileRequest command allows the device to retrieve the identifiers of current Power Profiles through the PowerProfileStateRequest command. This command does not have a payload and is generated by the device to which the Power Profile cluster server side is supported. On receipt of the PowerProfileStateRequest command, the device is expected to generate a PowerProfileStateResponse command.\n\nFurthermore, the GetPowerProfilePriceResponse command is used to communicate the cost associated with a defined Power Profile. It allows a client device to provide the price information to another device that requests it. The payload of the GetPowerProfilePriceResponse command includes the PowerProfileID, Currency, Price, and Price Trailing Digit fields. If the requested price information is not available, the response will be a ZCL default response with a \"NOT FOUND\" status.\n\nIn summary, the PowerProfileRequest command is a Zigbee cluster command used to request the Power Profile of a server device. It allows the client device to retrieve information about energy phases and other parameters of the Power Profile. The successful execution of this command enables the requesting device to gain insights into energy consumption patterns and make informed decisions regarding energy management.", "1": "The PowerProfileStateRequest command is a Zigbee cluster command that is used when a device, such as a Home gateway device, needs to request the power profile from another device that supports the Power Profile cluster server side, such as a White Good device. \n\nWhen the PowerProfileStateRequest command is received by the device, it generates a PowerProfileStateResponse command as a response. The purpose of the PowerProfileStateRequest command is to retrieve the identifiers of the current Power Profiles. It does not have any payload associated with it.\n\nThe PowerProfileStateRequest command has a few effects on the Zigbee device once it is successfully executed. Firstly, if the device supports the Power Profile Request command, it will reply with a PowerProfileResponse. This response contains the requested power profile data. However, if the device does not support the command, it will reply with a standard ZCL Default response with the status code UNSUP_COMMAND72. This indicates that the command is not supported by the device.\n\nIn addition, if the requested profile data is not available, the device will reply with a standard ZCL response with the status code NOT_FOUND. This indicates that the requested profile data could not be found. \n\nAnother related command is the GetPowerProfilePriceResponse command. This command allows a device (client) to communicate the cost associated with a defined Power Profile to another device (server) that requests it. The payload of the GetPowerProfilePriceResponse command is formatted with the Power Profile ID, Currency, Price, and Price Trailing Digit fields.\n\nIf the price information requested for the Power Profile is not available yet, the response will be a ZCL default response with the status code \"NOT FOUND\". This indicates that the price information for the requested Power Profile is not currently available.\n\nIn summary, the PowerProfileStateRequest command is used to request the power profile from a device that supports the Power Profile cluster server side. The command retrieves the identifiers of the current Power Profiles and has a few effects on the device once it is successfully executed. The device will reply with a PowerProfileResponse if supported, a standard ZCL Default response with the status code UNSUP_COMMAND72 if the command is not supported, or a standard ZCL response with the status code NOT_FOUND if the requested profile data or price information is not available.", "2": "The GetPowerProfilePriceResponse command is a Zigbee cluster command that allows a device (client) to communicate the cost associated with a defined Power Profile to another device (server) that requests it. This command is generated when the client side of the Power Profile cluster, such as a Home gateway device, needs to request the power profile from a device that supports the Power Profile cluster server side, such as a White Good.\n\nWhen the device receives the Power Profile Request command, it is required to reply with a PowerProfileResponse if it supports it. If the command is not supported, the device replies with a standard ZCL Default response with status UNSUP_COMMAND72. If the requested profile data is not available, the device replies with a standard ZCL response NOT_FOUND.\n\nThe GetPowerProfilePriceResponse command payload is formatted as illustrated in Figure 3-69. It consists of the following fields:\n\n1. PowerProfileID: This field represents the identifier of the specific profile described by the Power Profile.\n\n2. Currency: The Currency field identifies the local unit of currency used in the price field. It is useful for displaying the appropriate symbol for a currency, such as $ or \u20ac. The value of the currency field should match the values defined by ISO 4217.\n\n3. Price: The Price field contains the price of the energy of a specific Power Profile measured in the base unit of Currency per Unit of Measure. The decimal point is located as indicated by the PriceTrailingDigit field when the energy is delivered to the premise.\n\n4. Price Trailing Digit: This field determines where the decimal point is located in the price field. It indicates the number of digits to the right of the decimal point.\n\nThe GetPowerProfilePriceResponse command is generated when the Get Power Profile Price command is received. Its purpose is to notify the originator (server) of the associated cost of the requested Power Profile, calculated by the client side of the Power Profile. This command provides information about the cost of a specific Power Profile and allows devices to communicate the cost to each other.\n\nOnce the GetPowerProfilePriceResponse command is successfully executed, it influences the Zigbee device by providing the cost associated with a defined Power Profile. This information can be used by the device to make decisions regarding energy usage and scheduling. For example, an energy management system can use the overall cost provided by the Power Profile client side to assess the overall benefit provided by the scheduler. By analyzing the cost of all the scheduled power profiles, the scheduler can optimize the scheduling of devices to reduce the overall cost and energy bill for the user.\n\nIn summary, the GetPowerProfilePriceResponse command in Zigbee allows devices to communicate the cost associated with a defined Power Profile. It provides information about the cost of a specific Power Profile and influences the Zigbee device by enabling energy management systems to optimize scheduling and reduce overall costs.", "3": "The \"GetOverallSchedulePriceResponse\" command is a Zigbee cluster command that allows a client to communicate the overall cost associated with all Power Profiles scheduled to a server. It is generated in response to the \"GetOverallSchedulePriceRequest\" command.\n\nThe purpose of the \"GetOverallSchedulePriceResponse\" command is to provide information about the overall cost of the scheduled Power Profiles. This information can be helpful in assessing the overall benefit provided by the scheduler and can be used to optimize energy usage and reduce energy bills for the user.\n\nThe command payload consists of three fields: Currency, Price, and Price Trailing Digit. The Currency field identifies the local unit of currency used in the price field, and it should match the values defined by ISO 4217. The Price field contains the price of the energy of a specific Power Profile measured in the base unit of currency per unit of measure. The Price Trailing Digit field determines the location of the decimal point in the price field.\n\nWhen the \"GetOverallSchedulePriceResponse\" command is received, the originator (server) is notified of the associated cost of the requested Power Profile. This cost is calculated by the client side of the Power Profile and can be used to assess the overall benefit provided by the scheduler. The information received can be used to optimize the scheduling of specific devices and reduce the overall cost of all the scheduled power profiles, resulting in a lower energy bill for the user.\n\nThe command influences the Zigbee device once it is successfully executed by providing valuable information about the overall cost of the scheduled Power Profiles. This information can be used by the device's energy management system to make informed decisions about energy usage. By analyzing the overall cost associated with the scheduled power profiles, the device can optimize its energy consumption and schedule power profiles in a way that reduces the overall cost and benefits the user.\n\nAdditionally, the command allows the device to assess the overall benefit provided by the scheduler. By comparing the cost of the scheduled power profiles before and after making changes to the scheduling, the device can determine if the scheduler is effectively reducing the overall cost. This information can be used to fine-tune the scheduling algorithms and improve the efficiency of the device's energy management system.\n\nOverall, the \"GetOverallSchedulePriceResponse\" command provides essential information about the cost of scheduled Power Profiles and enables the device to optimize energy usage and reduce energy bills. It allows the device to assess the effectiveness of the scheduler and make informed decisions about scheduling power profiles. By leveraging this command, Zigbee devices can improve their energy efficiency and provide cost-saving benefits to users.", "4": "The EnergyPhasesScheduleNotification command is a Zigbee cluster command that is generated by a device supporting the client side of the Power Profile cluster. Its purpose is to schedule the start of a Power Profile and its energy phases on a device supporting the server side of the Power Profile cluster. This command is used for \"unsolicited\" scheduling, which means that the server side of the cluster did not solicit the schedule.\n\nWhen the EnergyPhasesScheduleNotification command is received, the originator is notified of the overall cost of the scheduled Power Profiles. This information can be used to assess the overall benefit provided by the scheduler, which may be dependent on the schedule constraints. The calculation of the overall cost is done by the Power Profile cluster client side.\n\nThe command payload of the EnergyPhasesScheduleNotification command is formatted with several fields. These fields include the Power Profile ID, the number of scheduled phases, the Energy Phase ID, and the scheduled time for each energy phase. Each EnergyPhasesScheduleNotification message includes only one Power Profile and its energy phases that need to be scheduled. The number of scheduled phases field represents the total number of energy phases that need to be scheduled by this command.\n\nIn case the MultipleScheduling attribute is set to false, indicating that the server side of the Power Profile cluster can only support the schedule of a single energy phase at once, the EnergyPhasesScheduleNotification command can also be used to set a pause between two energy phases. In this case, the Power Profile State can have any values, but the command should only be issued if the PowerProfileRemoteControl is set to true and the Energy Phase has a MaxActivationDelay different than 0x0000.\n\nThe EnergyPhasesScheduleNotification command is generated when the client side of the Power Profile cluster has calculated a specific schedule for a Power Profile and needs to send the schedule to a device supporting the Power Profile cluster server side. This command is only generated if the recipient devices support schedulable Power Profiles, which means that the Power Profile carries the first Energy Phase with a MaxActivationDelay different than 0x0000.\n\nOnce the EnergyPhasesScheduleNotification command is successfully executed, the device that receives the command will reply with a standard Default response if requested or if there is an error. If the device cannot schedule the energy phases because the activation delay of any of the carried phases is equal to zero, it will reply with a standard Default response with the error code NOT_AUTHORIZED. If the scheduling state of the recipient entity changes after receiving this command, it will issue an Energy Phases Schedule State Notification.\n\nIn summary, the EnergyPhasesScheduleNotification command in Zigbee is used to schedule the start of a Power Profile and its energy phases on a device supporting the server side of the Power Profile cluster. The command provides information about the overall cost of the scheduled Power Profiles and allows for scheduling of multiple energy phases. Once executed successfully, the command triggers a response from the recipient device and can influence the scheduling state of the recipient entity.", "5": "The EnergyPhasesScheduleResponse command is a Zigbee cluster command that is used in the Power Profile cluster. This command is generated by the client side of the Power Profile cluster as a reply to the EnergyPhasesScheduleRequest command.\n\nThe purpose of the EnergyPhasesScheduleResponse command is to send a specific schedule for a Power Profile to a device supporting the Power Profile cluster server side. This command is generated when the client side (e.g., a Home gateway device) has calculated a schedule for a Power Profile and needs to send the schedule to the server side device (e.g., White Goods).\n\nThe functionality of the EnergyPhasesScheduleResponse command is to provide the schedule for the Power Profile. The command payload carries the same fields as the EnergyPhasesScheduleNotification command, which includes the PowerProfileID, Num of Scheduled Phases, EnergyPhaseID, and Scheduled Time. The Num of Scheduled Phases field represents the total number of energy phases that need to be scheduled. The Scheduled Time field represents the relative time scheduled in respect to the end of the previous energy phase.\n\nOnce the EnergyPhasesScheduleResponse command is successfully executed, it allows the server side device to receive the schedule for the Power Profile. The recipient device can then use this schedule to perform actions based on the energy phases. If the scheduling state of the recipient entity changes after receiving this command, it will issue an Energy Phases Schedule State Notification.\n\nThe influence of the EnergyPhasesScheduleResponse command on the Zigbee device is that it enables the device to schedule and manage energy phases for a Power Profile. This command allows for the coordination and control of energy usage within a Zigbee network. By receiving the schedule for a Power Profile, the device can perform actions at specific times based on the energy phases. This can include turning on or off devices, adjusting power levels, or performing other energy-related tasks.\n\nAdditionally, the EnergyPhasesScheduleResponse command has certain conditions and requirements. It is generated only if the recipient devices support schedulable Power Profiles. The Power Profile must carry the first Energy Phase with a MaxActivationDelay different than 0x0000. If the recipient device cannot schedule the energy phases due to the activation delay of any of the carried phases being equal to zero, it will reply with a standard Default response with the error code NOT_AUTHORIZED.\n\nIn summary, the EnergyPhasesScheduleResponse command is used to send a specific schedule for a Power Profile to a device supporting the Power Profile cluster server side. It allows for the scheduling and management of energy phases within a Zigbee network. Once executed, it enables the recipient device to perform actions based on the energy phases and effectively manage energy usage.", "6": "The PowerProfileScheduleConstraintsRequest command is a Zigbee cluster command that is used to request the constraints of a Power Profile from a server in order to set the appropriate boundaries for scheduling when calculating the schedules.\n\nThe command is generated by the client side of the Power Profile cluster and is sent to the server side, which is typically a device like a White Goods device. The purpose of this command is to gather information about the constraints of a specific Power Profile. The Power Profile ID field in the payload specifies which profile the constraints are referring to, and there can be multiple profiles available.\n\nOnce the PowerProfileScheduleConstraintsRequest command is successfully executed, the server side device will respond with a PowerProfileScheduleConstraintsResponse command. The payload of the response command will carry the same fields as the PowerProfileRequest command, providing the client side with the necessary information about the constraints of the requested Power Profile.\n\nThe information obtained through this command is crucial for the client side device, such as a Home gateway, to calculate the schedules for the Power Profile. By knowing the constraints, the client side can ensure that the schedules are within the specified boundaries and meet the requirements of the Power Profile.\n\nThe successful execution of the PowerProfileScheduleConstraintsRequest command has a significant influence on the Zigbee device. It allows the client side device to accurately calculate the schedules for the Power Profile, ensuring efficient and effective energy management.\n\nWithout this command, the client side device would not have access to the necessary constraints of the Power Profile, making it difficult to calculate appropriate schedules. This could lead to inefficient energy usage and potentially impact the overall performance of the Zigbee network.\n\nIn terms of the device's behavior upon receiving the PowerProfileScheduleConstraintsResponse command, it is expected to handle it by processing the payload and utilizing the information provided to calculate the schedules. If the reception of the response command is not supported by the device, it should reply with a standard Zigbee Cluster Library (ZCL) Default response with the status code UNSUP_COMMAND73.\n\nIt is worth noting that if the scheduling state of the recipient entity changes after receiving the PowerProfileScheduleConstraintsResponse command, it will issue an EnergyPhasesScheduleStateNotification. This notification serves as a way to inform other devices or entities within the network about the change in scheduling state.\n\nIn summary, the PowerProfileScheduleConstraintsRequest command plays a crucial role in the Zigbee network by allowing the client side device to request and gather the constraints of a specific Power Profile from the server side device. This information is essential for calculating the schedules within the specified boundaries and ensuring efficient energy management. The successful execution of this command greatly influences the behavior and performance of the Zigbee device.", "7": "The EnergyPhasesScheduleStateRequest command is a Zigbee cluster command that is used in the Power Profile cluster to check the states of the scheduling of a power profile. This command is generated by a device that supports the client side of the Power Profile cluster and is used to request the scheduling constraints of a power profile from a device that supports the server side of the Power Profile cluster.\n\nThe purpose of the EnergyPhasesScheduleStateRequest command is to allow the client side of the Power Profile cluster, such as a Home gateway device, to check the schedules of the power profile in a device that supports the server side of the Power Profile cluster, such as a White Good device. This command can be used to re-align the schedules between the server and client, for example, after a client reset.\n\nThe functionality of the EnergyPhasesScheduleStateRequest command is based on its payload format, which is the same as the PowerProfile-Request command. The payload carries the same fields defined in the PowerProfileRequest command, including the Power Profile ID field that specifies which profile the constraints are referring to. By sending this command, the client device can request the scheduling constraints of a specific power profile from the server device.\n\nOnce the EnergyPhasesScheduleStateRequest command is successfully executed, the server device that receives the command is expected to reply to the client device with an EnergyPhasesScheduleStateResponse, if supported. The response will provide information about the states of the scheduling of the power profile. If the command is not supported by the server device, it will reply with a standard ZCL Default response with status UNSUP_COMMAND75.\n\nIf the requested profile data is not available, for example, due to an invalid Power Profile ID, the server device will reply with a standard ZCL response NOT_FOUND. In the case where the server device does not have any schedules set, it will reply with an EnergyPhasesScheduleStateResponse carrying NumofScheduledPhases equal to zero. This indicates that there are no scheduled phases for the power profile.\n\nThe influence of executing the EnergyPhasesScheduleStateRequest command successfully is that the client device will receive the desired information about the states of the scheduling of the power profile. This allows the client device to align its schedules with the server device, ensuring synchronization between the two devices. This command is particularly useful after a client reset, as it allows the client device to re-establish the schedules based on the information provided by the server device.\n\nOverall, the EnergyPhasesScheduleStateRequest command plays a crucial role in the Power Profile cluster by facilitating communication between the client and server devices. It enables the client device to request and receive information about the scheduling constraints of a power profile from the server device, ensuring proper synchronization and alignment of schedules.", "8": "The Zigbee cluster command \"GetPowerProfilePriceExtendedResponse\" is used in the Power Profile cluster to request the constraints of a power profile from a device that supports the Power Profile cluster server side. This command is typically generated by the client side of the Power Profile cluster, such as a Home gateway device, to retrieve information about the power profile from a device like a Whitegood.\n\nWhen the device receives the \"GetPowerProfilePriceExtendedResponse\" command, it is expected to reply with a \"Power Profile Schedule Constraints Response\" if it supports this feature. If the command is not supported by the device, it should reply with a standard Zigbee Cluster Library (ZCL) Default response with status \"UNSUP_COMMAND74\". If the requested profile data is not available, the device should reply with a standard ZCL response \"NOT_FOUND\".\n\nThe purpose of the \"GetPowerProfilePriceExtendedResponse\" command is to enable the client side of the Power Profile cluster to obtain the constraints of a power profile from a server-side device. This allows the client to understand the limitations and restrictions associated with the power profile, which can be useful for various purposes such as energy management and scheduling.\n\nThe functionality of this command is to initiate a request for power profile constraints and receive a response from the server-side device. The payload format of the command is the same as the \"PowerProfileRequest\" command, carrying the necessary fields to specify the power profile ID and other relevant information. The server-side device, upon receiving this command, should respond with the appropriate response message containing the power profile schedule constraints.\n\nOnce the \"GetPowerProfilePriceExtendedResponse\" command is successfully executed and the server-side device responds with the power profile schedule constraints, the client-side device can utilize this information for various purposes. It can use the constraints to understand the available power profile options and their associated limitations. This can help in making informed decisions regarding power consumption and scheduling.\n\nThe successful execution of this command has an influence on the Zigbee device by providing it with valuable information about the power profile. By understanding the constraints associated with a power profile, the device can optimize its energy usage and scheduling. For example, a Home gateway device can use this information to intelligently manage the power consumption of connected appliances based on their power profile constraints. This can lead to energy savings and efficient operation of devices.\n\nFurthermore, this command can also be used to re-align the schedules between the server and client devices. After a client reset, the client-side device can use the \"EnergyPhasesScheduleStateRequest\" command, which is similar to the \"GetPowerProfilePriceExtendedResponse\" command, to check the states of the scheduling of a power profile in the server-side device. This helps in ensuring that the schedules between the server and client devices are synchronized.\n\nIn summary, the \"GetPowerProfilePriceExtendedResponse\" command in the Zigbee cluster is used to request the constraints of a power profile from a server-side device. The command allows the client-side device to obtain valuable information about the power profile, which can be used for energy management and scheduling purposes. The successful execution of this command provides the client-side device with the necessary constraints to optimize its energy usage and make informed decisions. Additionally, this command can also be used to re-align schedules between the server and client devices."}, "28": {"0": "The MoveToLevel command is a Zigbee cluster command that is part of the Level Control cluster. It is used to control the level or brightness of a device, such as a light, within a Zigbee network. The purpose of this command is to allow users to adjust the level of a device, either by moving it to a specific level or by performing a continuous movement.\n\nThe MoveToLevel command has a payload format that includes several fields. The Level field specifies the desired level to which the device should be moved. The Transition time field indicates the time it should take for the device to reach the new level, in tenths of a second. The OptionsMask and OptionsOverride fields are used to create a temporary Options bitmap, which determines the behavior of the command based on the Options attribute.\n\nWhen the MoveToLevel command is received by a Zigbee device, it will move from its current level to the value specified in the Level field. The meaning of \"level\" can vary depending on the device, but for a light, it typically represents the brightness level. The movement is expected to be continuous, rather than a step function, and the time taken to reach the new level is determined by the Transition time field. If the Transition time field is set to 0xffff, the device will instead use the OnOffTransitionTime attribute to determine the time taken to move to the new level. If the OnOffTransitionTime attribute is not present, the device will move to the new level as fast as it is able.\n\nThe MoveToLevel command also includes a Move command, which provides a way to perform continuous movement without specifying a target level. The Move command has a payload format that includes the Move mode field and the Rate field. The Move mode field determines the direction of the movement, with values of 0x00 for up and 0x01 for down. The Rate field specifies the rate of movement in units per second. The actual rate of movement should be as close to this rate as the device is able. If the Rate field is set to 0xFF, the value in the DefaultMoveRate attribute will be used. If the DefaultMoveRate attribute is not supported, the device will move as fast as it is able.\n\nOnce the MoveToLevel command is successfully executed, it will have an influence on the Zigbee device. The device will adjust its level or brightness according to the specified target level or continuous movement. This allows users to control the device's behavior and customize the lighting or other features of their Zigbee network. The command provides flexibility in terms of the speed of movement and the time taken to reach the desired level, giving users the ability to fine-tune the behavior of their devices. Overall, the MoveToLevel command enhances the user experience and allows for dynamic and customizable control of Zigbee devices within a network.", "1": "The \"Move\" command is a Zigbee cluster command that is used to control the movement or adjustment of a device's level, such as the brightness level of a light. This command is defined in the Zigbee Cluster Library Specification.\n\nThe purpose of the \"Move\" command is to instruct a Zigbee device to move from its current level to a specified level. The meaning of the \"level\" is device-dependent, meaning it can vary depending on the type of device. For example, for a light, the level can represent the brightness level.\n\nWhen the \"Move\" command is received by a device, it first creates and processes a temporary Options bitmap, as defined in the specification. This bitmap contains various options and settings related to the movement operation.\n\nThe movement of the device is intended to be as continuous as technically practical, meaning it should not be a sudden or step-like function. The time taken to move to the new level is determined by the value specified in the Transition time field of the command payload, measured in tenths of a second. The device should strive to move as close to this specified time as possible.\n\nHowever, if the Transition time field is set to the value 0xffff, then the time taken to move to the new level is determined by the OnOffTransitionTime attribute. This attribute is optional and may not be present in all devices. If the OnOffTransitionTime attribute is not present, the device should move to the new level as fast as it is able.\n\nIf the device is not capable of moving at a variable rate, the Transition time field may be disregarded, and the device will move at its maximum speed.\n\nThe \"Move\" command payload is formatted with several fields. The Move mode field specifies the direction of the movement, either up or down, using the non-reserved values defined in the specification.\n\nThe Rate field indicates the rate of movement in units per second. The device should aim to move as close to this rate as it is capable of. If the Rate field is set to 0xFF, the value in the DefaultMoveRate attribute should be used. If the DefaultMoveRate attribute is not supported, the device should move as fast as it is able.\n\nThe influence on the Zigbee device once the \"Move\" command is successfully executed depends on the specific action specified in the Move mode field. If the Move mode is set to \"Up,\" the device's level will increase at the rate specified in the Rate field. If the level reaches the maximum allowed for the device, the movement will stop. Conversely, if the Move mode is set to \"Down,\" the device's level will decrease at the specified rate. If the level reaches the minimum allowed for the device, the movement will stop.\n\nIn summary, the \"Move\" command in Zigbee is used to control the movement or adjustment of a device's level, such as brightness. The command allows devices to move smoothly and continuously to a specified level, with the time taken determined by the Transition time field. The command payload includes fields for specifying the direction and rate of movement. Once successfully executed, the command influences the device by adjusting its level according to the specified parameters.", "2": "The \"Step\" command is a Zigbee cluster command that allows a device to move from its current level in an up or down direction in a continuous fashion. This command is defined in the Zigbee Cluster Library Specification and has specific requirements and effects on the device.\n\nWhen the Step command is received by a device, it first creates and processes a temporary Options bitmap. This bitmap contains information about the options that need to be considered when executing the command. The creation and processing of this bitmap are described in section 3.10.2.3.1.2 of the specification.\n\nThe Step command payload has a specific format, as illustrated in Figure 3-42. It consists of several fields, including Step mode, Step size, Transition time, OptionsMask, OptionsOverride, and Default. The Step mode field specifies whether the device should move up or down. The Step size field determines the magnitude of the step, and the Transition time field specifies the time it should take to perform the step. The OptionsMask and OptionsOverride fields are used to create the temporary Options bitmap, and the Default field is not applicable in this command.\n\nThe Step mode field can have two values: 0x00 for up and 0x01 for down. When the command is received with the Step mode set to up, the device increases its level at the rate given in the Rate field. If the level reaches the maximum allowed for the device, the device stops. Conversely, when the Step mode is set to down, the device decreases its level at the specified rate. If the level reaches the minimum allowed for the device, the device stops.\n\nThe Transition time field specifies the time it should take to perform the step, in tenths of a second. If the Transition time field is set to 0xffff, the device should move as fast as it is able. However, if the device is not able to move at a variable rate, the Transition time field may be disregarded.\n\nWhen the Step command is successfully executed, it has an influence on the Zigbee device. The device will move from its current level in the specified direction and at the specified rate. If the device reaches the maximum or minimum level allowed during the process, the transition time will be proportionally reduced. This ensures that the device stays within its level limits.\n\nAdditionally, the Step command has an effect on other related commands. Upon receipt of the Step command, any ongoing Move to Level, Move, or Step command (and their 'with On/Off' variants) will be terminated. The value of CurrentLevel, which represents the device's current level, will be left unchanged, and the RemainingTime, which represents the remaining time for the ongoing command, will be set to zero.\n\nIn summary, the Step command in Zigbee allows a device to move from its current level in an up or down direction at a specified rate. It has specific requirements and effects on the device, including the creation and processing of a temporary Options bitmap and the termination of ongoing related commands. The command ensures that the device stays within its level limits and provides control over its movement.", "3": "The \"Stop\" command is a Zigbee cluster command that is used to control the movement of a device from its current level in an up or down direction. This command is defined in the Zigbee Cluster Library Specification Foundation document.\n\nThe purpose of the \"Stop\" command is to provide a way to stop any ongoing movement or transition of a device's level. When this command is received by a device, it triggers certain actions based on the specified parameters.\n\nThe functionality of the \"Stop\" command is determined by the options specified in the command payload. The command payload is formatted using two map8 fields: OptionsMask and OptionsOverride. These fields allow for customization and control over the behavior of the \"Stop\" command.\n\nUpon receiving the \"Stop\" command, the device first creates and processes a temporary options bitmap based on the OptionsMask and OptionsOverride fields. This temporary bitmap is used to determine the specific actions to be taken by the device.\n\nOne important functionality of the \"Stop\" command is the termination of any ongoing Move to Level, Move, or Step commands that are currently in process. This means that if a device is in the middle of a transition or movement, the \"Stop\" command will halt that process and bring the device to a stop.\n\nThe value of the device's CurrentLevel attribute is left unchanged upon receipt of the \"Stop\" command. This means that the device will maintain its current level and not move further up or down. Additionally, the RemainingTime attribute is set to zero, indicating that there is no remaining time for the movement or transition.\n\nThe \"Stop\" command also has an influence on the Zigbee device's behavior and operation. By stopping any ongoing movement or transition, it ensures that the device remains at a specific level as desired. This can be useful in scenarios where precise control over the device's level is required.\n\nFurthermore, the \"Stop\" command provides symmetry in the Zigbee Cluster Library by having two entries in Table 3-5. These entries correspond to the Move to Level, Move, and Set commands, as well as their 'with On/Off' variants. This allows for easy selection of the appropriate set of commands based on the specific requirements of the application.\n\nIn summary, the \"Stop\" command in Zigbee is used to stop any ongoing movement or transition of a device's level. It terminates any ongoing Move to Level, Move, or Step commands and maintains the device's current level. The command payload allows for customization of the command's behavior, and its successful execution ensures precise control over the device's level.", "4": "The \"MoveToLevel(WithOn/Off)\" command is a Zigbee cluster command that belongs to the Level Control cluster. This command allows a Zigbee device to move to a specified level, which can represent different parameters depending on the device type, such as brightness level for a light. The command provides a smooth and continuous transition to the new level, with the duration of the transition determined by the Transition time field.\n\nThe payload format for the \"Move to Level\" command consists of four fields: Level, Transition time, OptionsMask, and OptionsOverride. The Level field specifies the desired level to which the device should move. The Transition time field indicates the duration of the transition in tenths of a second, or it can be set to 0xffff to use the OnOffTransitionTime attribute. The OptionsMask and OptionsOverride fields are used to create a temporary Options bitmap that determines the behavior of the device during the transition.\n\nUpon receiving the \"Move to Level\" command, a Zigbee device will adjust its current level to match the value specified in the Level field. The device will perform a smooth transition to the new level, taking into account the Transition time or the OnOffTransitionTime attribute. If the Transition time field is set to 0xffff and the OnOffTransitionTime attribute is present, the device will use the value of the OnOffTransitionTime attribute instead. If the OnOffTransitionTime attribute is not present, the device will move to the new level as quickly as possible.\n\nThe Move Command is another command within the Level Control cluster that allows a device to move in a specific direction, either up or down, at a specified rate. The payload format for this command includes the Move mode, Rate, OptionsMask, and OptionsOverride fields. The Move mode field determines the direction of the movement, with values of 0x00 for up and 0x01 for down. The Rate field specifies the rate of movement in units per second, and the OptionsMask and OptionsOverride fields work in the same way as described for the \"Move to Level\" command.\n\nWhen the Move Command is received, the device will start moving in the specified direction at the given rate. The actual rate of movement may vary depending on the device's capabilities. If the Rate field is set to 0xFF, the device will use the value of the DefaultMoveRate attribute. If the DefaultMoveRate attribute is not supported, the device will move as fast as it is able. The device may disregard the Rate field if it is not capable of moving at a variable rate.\n\nOverall, the \"MoveToLevel(WithOn/Off)\" command and the Move Command provide control over the level and movement of Zigbee devices within the Level Control cluster. These commands allow for smooth transitions and precise control over the behavior of the devices. The successful execution of these commands will result in the Zigbee device adjusting its level or moving in the specified direction at the desired rate, enhancing the functionality and usability of the device.", "5": "The \"Move(WithOn/Off)\" command in Zigbee is used to control the movement of a device from its current level to a specified level. The meaning of the \"level\" parameter is device-dependent, but for a light, it typically represents the brightness level. The command ensures that the movement is continuous and not abrupt, and the time taken to move to the new level is determined by the Transition time field.\n\nWhen the Move(WithOn/Off) command is received by a Zigbee device, it first creates and processes a temporary Options bitmap. This bitmap is then used to determine the device's behavior during the movement. The device will then move from its current level in an upward or downward direction based on the Move mode field. If the Move mode is set to \"Up,\" the device will increase its level at the rate specified in the Rate field. If the level reaches the maximum allowed for the device, the movement will stop. On the other hand, if the Move mode is set to \"Down,\" the device will decrease its level at the specified rate. If the level reaches the minimum allowed for the device, the movement will stop.\n\nThe Rate field in the Move(WithOn/Off) command specifies the rate of movement in units per second. The device will try to move as close to this rate as possible. If the Rate field is set to 0xFF, the device will use the value in the DefaultMoveRate attribute. If the DefaultMoveRate attribute is not supported, the device will move as fast as it can. However, if the device is not capable of moving at a variable rate, the Rate field may be disregarded.\n\nThe Transition time field in the Move(WithOn/Off) command determines the time taken to perform the movement in tenths of a second. If the Transition time field is set to 0xFFFF, the device should move as fast as it is able. If the device does not support variable rate movement, the Transition time field may be ignored.\n\nThe influence of the Move(WithOn/Off) command on a Zigbee device depends on its implementation. Once the command is successfully executed, the device will start moving from its current level to the specified level based on the Move mode and Rate fields. The movement will be continuous and as close to the specified rate as possible. If the level reaches the maximum or minimum allowed for the device, the movement will stop. The time taken to perform the movement will be determined by the Transition time field or the OnOffTransitionTime attribute if the Transition time field is set to 0xFFFF. If the device does not support variable rate movement, it will move to the new level as fast as it can.\n\nIn summary, the Move(WithOn/Off) command in Zigbee is used to control the movement of a device to a specified level. It ensures continuous and smooth movement, with the rate of movement and time taken determined by the Rate and Transition time fields. The command has a device-dependent interpretation of the \"level\" parameter and may vary for different types of devices. Once successfully executed, the command influences the device's behavior by initiating the movement and adjusting the level based on the specified parameters.", "6": "The \"Step(WithOn/Off)\" command is a Zigbee cluster command that allows a device to move from its current level in an up or down direction in a continuous fashion. This command is defined in the Zigbee Cluster Library Specification.\n\nUpon receipt of the Step command, the device first creates and processes a temporary Options bitmap. The Step command payload is formatted with several fields including Step mode, Step size, Transition time, OptionsMask, OptionsOverride, and Default.\n\nThe Step mode field specifies whether the device should move up or down. The options for this field are \"Up\" (0x00) and \"Down\" (0x01). The Transition time field indicates the time it should take to perform the step, in tenths of a second. If the Transition time field is set to 0xffff, the device should move as fast as it is able.\n\nThe Step size field represents the change in the device's current level in units. The device should increase or decrease its current level by the specified Step size until it reaches the maximum or minimum level allowed for the device, respectively. If the device reaches the maximum or minimum level during the step process, the transition time should be proportionally reduced.\n\nUpon receipt of the Step command, the device moves its current level in the specified direction according to the Step size. If the device reaches the maximum or minimum level allowed, the transition time is adjusted accordingly. This command allows for smooth and continuous level changes in a Zigbee device.\n\nIn addition to the Step command, there is also a Stop command associated with it. Upon receipt of the Stop command, any ongoing Move to Level, Move, or Step command (including their 'with On/Off' variants) is terminated. The device's CurrentLevel value is left unchanged, and the RemainingTime is set to zero.\n\nThe Stop command is used to halt any ongoing level changes initiated by the Step command. It ensures that the device stops at its current level and prevents any further movement. The Stop command is symmetrical to the Move to Level, Move, and Set commands, allowing for easy choice between the different sets of commands.\n\nOverall, the Step(WithOn/Off) command provides a means for Zigbee devices to smoothly and continuously change their current level in an up or down direction. It allows for control over the rate and direction of level changes, ensuring that the device stays within its allowed level range. The associated Stop command allows for the termination of ongoing level changes, providing control and flexibility to the device's behavior.", "8": "The \"MoveToClosestFrequency\" command is a Zigbee cluster command that is defined in the Zigbee Cluster Library Specification. This command is used to instruct a Zigbee device to change its current frequency to the requested frequency or to the closest frequency that it can generate.\n\nThe purpose of the \"MoveToClosestFrequency\" command is to allow for the adjustment of the frequency of a Zigbee device. This can be useful in scenarios where there is interference or congestion on the current frequency, and it is necessary to switch to a different frequency to ensure reliable communication.\n\nWhen the \"MoveToClosestFrequency\" command is successfully executed, the Zigbee device will change its current frequency to the requested frequency or the closest frequency that it can generate. The device will then operate on this new frequency, allowing for improved communication and reduced interference.\n\nThe command payload for the \"MoveToClosestFrequency\" command consists of a single field called \"Frequency\", which is a 16-bit unsigned integer. This field specifies the frequency to which the device should move.\n\nUpon receipt of the \"MoveToClosestFrequency\" command, the Zigbee device will determine if it can approximate the requested frequency using its supported frequencies. If the device can approximate the frequency, it will change its current frequency to the requested frequency or the closest frequency that it can generate. However, if the device cannot approximate the frequency, it will return a default response with an error code of INVALID_VALUE.\n\nIt is important to note that the ability to approximate a requested frequency is a manufacturer-specific decision. Different Zigbee devices may have different capabilities in terms of the frequencies they can generate.\n\nOnce the \"MoveToClosestFrequency\" command is successfully executed, the Zigbee device will operate on the new frequency. This can have a significant influence on the device's performance and reliability. By switching to a different frequency, the device can avoid interference and congestion on the previous frequency, leading to improved communication and reduced packet loss.\n\nIn addition, the \"MoveToClosestFrequency\" command is mandatory if the device supports the CurrentFrequency attribute. This attribute represents the current frequency of the device and is used to determine if the device can approximate a requested frequency. If the CurrentFrequency attribute is supported, the \"MoveToClosestFrequency\" command must be implemented.\n\nOverall, the \"MoveToClosestFrequency\" command is a crucial command in Zigbee networks as it allows for the adjustment of the frequency of Zigbee devices. By changing to a different frequency, devices can avoid interference and congestion, leading to improved communication and network performance."}, "2820": {"0": "The \"GetProfileInfoResponse\" is a Zigbee cluster command that is used in the electrical measurement server cluster. This command is generated in response to the \"GetProfileInfo\" command sent by the client. The purpose of the \"GetProfileInfoResponse\" command is to provide information about the profiles supported by the device and the attributes being profiled.\n\nThe command is formatted with several fields that provide specific details. The \"Profile Count\" field indicates the total number of supported profiles by the device. The \"ProfileIntervalPeriod\" field represents the time frame used to capture parameters for profiling purposes, and it can be set to values such as daily, 60 minutes, 30 minutes, and so on. The \"MaxNumberOfIntervals\" field indicates the maximum number of intervals the device is capable of returning in one \"Get Measurement Profile Response\" command. Finally, the \"ListOfAttributes\" field represents the list of attributes being profiled.\n\nOnce the \"GetProfileInfoResponse\" command is successfully executed, it provides valuable information about the device's supported profiles and the attributes being profiled. This information can be used by the client to understand the capabilities of the device and to retrieve specific measurement profiles.\n\nThe command's functionality lies in its ability to retrieve information about the device's profiles and attributes. By sending the \"GetProfileInfo\" command, the client requests this information from the device. The device then generates the \"GetProfileInfoResponse\" command, which contains the requested information. This allows the client to understand the device's capabilities and configure its behavior accordingly.\n\nThe influence of the \"GetProfileInfoResponse\" command on the Zigbee device is primarily in providing a means for the client to interact with the device's electrical measurement server cluster. By retrieving information about the supported profiles and attributes, the client can make informed decisions about how to utilize the device's measurement capabilities.\n\nFor example, the client can use the information provided by the command to determine the appropriate time frame for capturing measurements, based on the available profile intervals. The client can also understand the maximum number of intervals that can be retrieved in one command, which helps in managing the data retrieval process efficiently.\n\nFurthermore, the \"GetProfileInfoResponse\" command allows the client to understand the specific attributes being profiled by the device. This information is crucial for the client to retrieve the desired measurement profiles and analyze the collected data effectively.\n\nIn summary, the \"GetProfileInfoResponse\" command is an essential part of the Zigbee electrical measurement server cluster. It provides information about the supported profiles and attributes, allowing the client to interact with the device's measurement capabilities. By successfully executing this command, the client gains valuable insights into the device's capabilities and can configure its behavior accordingly.", "1": "The \"GetMeasurementProfileResponse\" command is a Zigbee cluster command that is used to retrieve measurement profile information from a Zigbee device. This command is generated in response to the \"GetProfileInfo\" command received from the client.\n\nThe purpose of the \"GetMeasurementProfileResponse\" command is to provide the client with information about the measurement profile intervals captured by the device. It allows the client to retrieve data collected over specific time frames and analyze the captured parameters for profiling purposes.\n\nThe command includes several fields that provide important information. The \"StartTime\" field represents the end time of the most recent interval being requested, specified in a 32-bit value in UTC. The \"Status\" field indicates the success or failure of the command, with specific values representing different scenarios such as attribute profile not supported, invalid start time, or no intervals available for the requested time.\n\nThe \"ProfileIntervalPeriod\" field represents the interval or time frame used to capture the parameters for profiling purposes. It is an enumerated field with options ranging from daily intervals to intervals as short as 2.5 minutes. The \"NumberOfIntervalsDelivered\" field indicates the number of intervals the device is returning in the response.\n\nThe \"AttributeID\" field specifies the attribute that has been profiled by the application. This allows the client to request specific types of information to be included in the response. The \"Intervals\" field contains the series of interval data captured using the specified profile interval period. The data is organized in reverse chronological order, with the oldest intervals transmitted first and the newest interval transmitted last. Invalid intervals are marked as 0xffff.\n\nOnce the \"GetMeasurementProfileResponse\" command is successfully executed, it provides the client with valuable measurement profile information. The client can use this information to analyze and interpret the captured parameters for various purposes such as energy management, environmental monitoring, and performance optimization.\n\nThe command allows the client to retrieve data over specific time frames, enabling them to track changes and trends in the measured parameters. This can help in identifying patterns, anomalies, and potential issues in the device's operation or the environment it is deployed in.\n\nThe \"GetMeasurementProfileResponse\" command also provides flexibility in terms of the profile interval period, allowing the client to choose the appropriate time frame for their analysis needs. The command's payload structure and fields provide a standardized format for exchanging measurement profile information between Zigbee devices, ensuring interoperability and ease of implementation.\n\nOverall, the \"GetMeasurementProfileResponse\" command plays a crucial role in facilitating measurement and sensing capabilities in Zigbee devices. It enables efficient retrieval of measurement profile information, empowering clients to make informed decisions based on the captured parameters. By leveraging this command, Zigbee devices can enhance their functionality, improve energy efficiency, and contribute to the overall performance and reliability of Zigbee networks."}, "768": {"0": "The \"MoveToHue\" command is a Zigbee cluster command that is used in lighting applications. It is specified in the Zigbee Cluster Library Specification.\n\nThe purpose of the \"MoveToHue\" command is to move a Zigbee device to a specific hue value. The hue value represents a specific color in the color space. The command allows for smooth and continuous movement to the desired hue over a specified transition time.\n\nThe command payload consists of several fields. The \"Hue\" field specifies the hue value to be moved to. The \"Direction\" field determines the direction of the hue change and can be set to values such as shortest distance, longest distance, up, or down. The \"Transition Time\" field specifies the time it will take for the device to move to the new hue, measured in tenths of a second. The \"OptionsMask\" and \"OptionsOverride\" fields are used to determine the behavior of the command and are processed according to the Zigbee specification.\n\nWhen the \"MoveToHue\" command is successfully executed, it has several influences on the Zigbee device. First, the device sets its \"ColorMode\" attribute to 0x00, indicating that it is operating in hue/color mode. Then, the device starts moving from its current hue to the hue value specified in the command. The movement is continuous and not a step function, meaning that the device smoothly transitions to the new hue over the specified transition time.\n\nThe direction of the hue change is determined by the \"Direction\" field. If the direction is set to the shortest distance, the device will take the path around the color circle that involves the shortest distance to the new hue. This is the expected normal usage. If the direction is set to the longest distance, the device will take the path that involves the longest distance around the color circle. This can be used for creating \"rainbow effects\" or other special lighting effects. If both distances are the same, the device will move in the \"Up\" direction.\n\nIt is important to note that the \"MoveToHue\" command operates within the limitations of the device's hardware. If the target hue specified in the command is not achievable by the hardware, the color temperature will be clipped at the physical minimum or maximum achievable. In this case, a ZCL default response command will be generated with a status code equal to SUCCESS. The behavior in cases where the current color value has no equivalent in the new color mode is manufacturer dependent, so it is recommended to avoid color mode changes of this kind during usage.\n\nIn summary, the \"MoveToHue\" command is used to smoothly move a Zigbee device to a specific hue value over a specified transition time. It allows for control over the direction of the hue change and can be used to create various lighting effects. The command influences the device by setting its color mode, initiating the hue movement, and handling hardware limitations and color mode changes.", "1": "The MoveHue command is a Zigbee cluster command used in lighting applications. It is designed to control the movement of the hue value in a Zigbee device. The command specifies the direction and speed at which the hue should be changed.\n\nThe command consists of several fields that define its behavior. The Direction field determines the direction in which the hue should be changed. It can be set to values such as shortest distance, longest distance, up, or down. The Transition Time field specifies the time it should take to move to the new hue, measured in tenths of a second. The OptionsMask and OptionsOverride fields are used for additional configuration and are processed according to the Zigbee specification.\n\nUpon receipt of the MoveHue command, the device is required to set its ColorMode attribute to 0x00, indicating that it is operating in color mode. The device then moves from its current hue to the value specified in the command. The movement is continuous, meaning it is not a step function but a smooth transition. The time taken to move to the new hue is equal to the value specified in the Transition Time field.\n\nThe new hue can be moved to in either direction, depending on the value of the Direction field. If the Direction is set to \"Shortest distance,\" the device will take the direction that involves the shortest path around the color circle. This is the expected normal usage. If the Direction is set to \"Longest distance,\" the device will take the direction that involves the longest path around the color circle. This can be used to create rainbow effects. If both distances are the same, the Up direction will be taken.\n\nThe MoveHue command payload is formatted with several fields. The Move Mode field specifies the mode of movement and can be set to values such as stop, up, or down. The Rate field determines the rate of movement in steps per second, with each step representing a change in the hue value by one unit. The OptionsMask and OptionsOverride fields are used for additional configuration and follow the Zigbee specification.\n\nThe effect of the MoveHue command on the device depends on the values of the Move Mode and Rate fields. If the Move Mode is set to stop, the command will stop any ongoing movement. If the Move Mode is set to up or down and the Rate is zero, the command will have no effect and an INVALID_FIELD status code will be sent in response. If the Move Mode is set to stop, the Rate field will be ignored.\n\nIn summary, the MoveHue command is used to control the movement of the hue value in a Zigbee device. It allows for smooth transitions between hues in a specified direction and at a specified rate. The command influences the device by changing its hue value and can be used to create various lighting effects.", "2": "The StepHue command is a Zigbee cluster command used in the Lighting Zigbee Cluster Library. Its purpose is to control the hue of a Zigbee device, specifically the rate and direction of hue movement. This command allows for smooth and continuous changes in the hue of a device, providing control over the color output.\n\nThe StepHue command has several fields that define its functionality. The Move Mode field specifies the direction of hue movement, with values of 0x01 for up and 0x03 for down. If the Move Mode field is set to 0x00 (stop), the Rate field is ignored. The Rate field determines the rate of movement in steps per second, with each step representing a change in the device's hue by one unit.\n\nWhen the StepHue command is received by a Zigbee device, it triggers specific actions based on the command's parameters. If the Move Mode is set to 0x00 (stop), the device will stop its current hue movement if it is moving. If the Move Mode is set to 0x01 (up) or 0x03 (down) and the Rate field is zero, the command has no effect, and an INVALID_FIELD status code is sent in response.\n\nUpon receipt of the StepHue command, the device will set its ColorMode attribute to 0x00, indicating that it is operating in color mode. The device will then start moving its hue in the specified direction at the rate defined by the Rate field. If the hue reaches the maximum allowed value for the device, it will wrap around to the minimum allowed value, ensuring continuous movement. Similarly, if the hue reaches the minimum allowed value, it will wrap around to the maximum allowed value.\n\nThe StepHue command payload is formatted with several fields. The Step Mode field specifies the direction of the hue change, with values of 0x01 for up and 0x03 for down. The Step Size field determines the amount by which the hue is changed, either added or subtracted from the current value. The Transition Time field defines the time taken to perform the step, measured in 1/10ths of a second. The OptionsMask and OptionsOverride fields are used for additional processing, following the specifications outlined in section 5.2.2.3.3.\n\nOverall, the StepHue command provides a way to control the hue of a Zigbee device in a smooth and continuous manner. By adjusting the Move Mode, Rate, Step Size, and Transition Time parameters, users can achieve the desired color effects and transitions. This command enables dynamic and interactive lighting control, allowing for the creation of various lighting scenes and effects.", "3": "The \"MoveToSaturation\" command is a Zigbee cluster command used in lighting applications. It is defined in the Zigbee Cluster Library Specification and is used to control the saturation of a Zigbee device.\n\nThe purpose of the \"MoveToSaturation\" command is to change the saturation of a Zigbee device in a continuous fashion. Saturation refers to the intensity or purity of a color. By adjusting the saturation, the user can control the vividness or dullness of the color emitted by the device.\n\nThe command is formatted with a payload that consists of several fields. The \"Saturation\" field specifies the target saturation value to which the device should move. The \"Transition Time\" field determines the time taken for the device to transition from its current saturation to the target saturation. The \"OptionsMask\" and \"OptionsOverride\" fields are used to specify additional options and settings for the command, following the guidelines specified in the Zigbee Cluster Library Specification.\n\nUpon receiving the \"MoveToSaturation\" command, the device sets its \"ColorMode\" attribute to the value 0x00, indicating that it is operating in a color mode. The device then starts transitioning its saturation from the current value to the target value specified in the command payload. The transition is continuous, meaning that the device smoothly changes its saturation over time rather than making sudden jumps. The duration of the transition is determined by the value in the \"Transition Time\" field, which is measured in 1/10ths of a second.\n\nThe successful execution of the \"MoveToSaturation\" command has an influence on the Zigbee device's behavior. By changing the saturation, the command allows the user to adjust the color emitted by the device to their desired level of intensity or purity. This can be useful in various lighting scenarios, such as creating different moods or ambiance in a room.\n\nAdditionally, the command also sets the \"ColorMode\" attribute of the device, indicating that it is operating in a color mode. This attribute can be used by other commands or applications to determine the current operating mode of the device and perform relevant operations accordingly.\n\nOverall, the \"MoveToSaturation\" command provides a convenient way to control the saturation of a Zigbee device in a smooth and continuous manner. By specifying the target saturation and transition time, users can easily adjust the color emitted by the device to suit their preferences and create desired lighting effects.", "4": "The MoveSaturation command is a Zigbee cluster command that is used in lighting applications. Its purpose is to control the saturation of a Zigbee device, allowing users to adjust the intensity of color in a continuous fashion.\n\nThe command is specified in the Zigbee Cluster Library Specification for Lighting and is defined in Section 5.2.2.3.7. It consists of a payload with several fields, including Saturation, Transition Time, OptionsMask, and OptionsOverride.\n\nWhen the MoveSaturation command is received by a Zigbee device, it triggers the device to set its ColorMode attribute to a specific value (0x00) and then move from its current saturation level to the value specified in the Saturation field. The movement from the current saturation to the new saturation is continuous, meaning it is not a sudden change but a gradual transition. The time taken to complete this transition is determined by the Transition Time field, which is measured in 1/10ths of a second.\n\nThe OptionsMask and OptionsOverride fields in the command payload are processed according to Section 5.2.2.3.3 of the Zigbee Cluster Library Specification. These fields allow for additional customization and control over the behavior of the command.\n\nIn addition to the MoveSaturation command, there is also a related command called Move Saturation. This command is specified in Section 5.2.2.3.8 and has a similar purpose but provides additional functionality. The Move Saturation command allows for controlling the saturation of a Zigbee device in an up or down direction, with a specified rate of movement. The command payload includes fields such as Move Mode, Rate, OptionsMask, and OptionsOverride.\n\nThe Move Mode field in the Move Saturation command specifies the direction of movement, with values such as Up, Down, and Stop. The Rate field determines the speed of movement, measured in steps per second. A step refers to a change in the device's saturation by one unit.\n\nUpon receiving the Move Saturation command, the Zigbee device sets its ColorMode attribute to a specific value (0x00) and then starts moving its saturation in the specified direction and at the specified rate. The movement is continuous until it reaches the maximum or minimum allowed saturation level for the device, at which point it stops.\n\nThe MoveSaturation and Move Saturation commands provide users with fine-grained control over the saturation levels of Zigbee devices in lighting applications. By adjusting the saturation, users can achieve the desired intensity of color in their lighting setup. The commands allow for gradual transitions and precise control over the rate of change.\n\nOnce the MoveSaturation or Move Saturation command is successfully executed, it influences the Zigbee device by changing its saturation level. This, in turn, affects the color output of the device, allowing users to create dynamic and customizable lighting scenes. The commands provide a standardized way of controlling saturation in Zigbee lighting applications, ensuring interoperability between different devices and systems.", "5": "The StepSaturation command is a Zigbee cluster command used in lighting applications. It is defined in the Zigbee Cluster Library Specification and is used to control the saturation level of a Zigbee device's color.\n\nThe purpose of the StepSaturation command is to change the saturation level of a Zigbee device in a gradual manner. It allows for increasing or decreasing the saturation level by a specified step size over a specified transition time. The command is used to achieve smooth transitions in the saturation level of a device's color.\n\nThe command payload consists of several fields. The Step Mode field specifies the direction of the saturation change, which can be either up or down. The Step Size field determines the amount by which the saturation level will be increased or decreased. The Transition Time field specifies the time taken to perform the step, and the OptionsMask and OptionsOverride fields are used for additional processing.\n\nOnce the StepSaturation command is successfully executed, the device will set its ColorMode attribute to 0x00, indicating that it is operating in color mode. The device will then start changing its saturation level according to the specified step size and direction. If the Step Mode is set to Up, the device will gradually increase its saturation level until it reaches the maximum allowed value. If the Step Mode is set to Down, the device will gradually decrease its saturation level until it reaches the minimum allowed value.\n\nThe command has a continuous effect on the device's saturation level. It allows for smooth transitions in the device's color by gradually changing the saturation level. The time taken to perform the step is determined by the Transition Time field, ensuring a controlled and gradual change in the saturation level.\n\nIf the saturation level is already at the maximum value and the Step Mode is set to Up, the command will have no effect. Similarly, if the saturation level is already at the minimum value and the Step Mode is set to Down, the command will also have no effect. In both cases, the device will remain at its current saturation level.\n\nThe StepSaturation command is a useful tool in lighting applications where smooth color transitions are desired. It allows for precise control over the saturation level of a Zigbee device's color, enabling dynamic lighting effects and customization. By gradually changing the saturation level, the command provides a seamless transition between different colors and enhances the overall user experience.\n\nIn summary, the StepSaturation command in Zigbee is used to gradually change the saturation level of a Zigbee device's color. It allows for smooth transitions in the saturation level by specifying a step size and transition time. The command has a continuous effect on the device's saturation level and is used to achieve dynamic lighting effects. Once executed, the device will change its saturation level according to the specified step size and direction, resulting in a controlled and gradual change in color.", "6": "The \"MoveToHueAndSaturation\" command is a Zigbee cluster command used in the lighting domain. It is defined in the ZigBee Cluster Library Specification and is used to control the color of a Zigbee device, such as a light bulb, by specifying the desired hue and saturation values.\n\nThe payload format of the command consists of several fields. The \"Hue\" field is a uint8 data type that represents the desired hue value, while the \"Saturation\" field is also a uint8 data type that represents the desired saturation value. The \"Transition Time\" field is a uint16 data type that specifies the time it should take for the device to transition to the new color. Additionally, there are \"OptionsMask\" and \"OptionsOverride\" fields that are processed according to a specific section in the specification.\n\nOnce the \"MoveToHueAndSaturation\" command is successfully executed, the device receiving the command is required to set its \"ColorMode\" attribute to the value 0x00. This attribute represents the color mode of the device and setting it to 0x00 indicates that the device should operate in hue and saturation mode. The device should then transition from its current hue and saturation values to the ones specified in the command. The transition should be continuous, meaning it should not be a sudden step, and the time taken to complete the transition should be equal to the value specified in the \"Transition Time\" field, measured in tenths of a second.\n\nThe specification does not specify the exact path through color space that should be taken during the transition. However, it recommends that the shortest path is taken through hue/saturation space, which means the movement should be in a straight line across the hue/saturation disk. This ensures a smooth and efficient transition between colors.\n\nThe \"MoveToHueAndSaturation\" command allows for precise control over the color of a Zigbee device. By specifying the desired hue and saturation values, users can create different lighting effects and set the mood according to their preferences. The command provides a standardized way to control the color of Zigbee devices, ensuring interoperability between different devices from various manufacturers.\n\nOnce the command is successfully executed, the device will transition to the specified hue and saturation values, resulting in a change in color. This can be particularly useful in scenarios where dynamic lighting effects are desired, such as in smart homes or commercial lighting installations. By smoothly transitioning between colors, the command allows for seamless changes in lighting ambiance.\n\nIn conclusion, the \"MoveToHueAndSaturation\" command is a Zigbee cluster command used to control the color of a Zigbee device. It allows users to specify the desired hue and saturation values, and the device will transition to the new color over a specified transition time. The command provides precise control over the color of Zigbee devices, enabling the creation of dynamic lighting effects and enhancing the overall user experience.", "7": "The MoveToColor command is a Zigbee cluster command used in lighting applications to control the color of a Zigbee device. This command allows for smooth transitions between colors and provides flexibility in choosing the desired color.\n\nThe command payload for MoveToColor consists of several fields. The Hue field represents the desired hue value, while the Saturation field represents the desired saturation value. The Transition Time field specifies the time it takes for the device to transition to the new color, measured in tenths of a second. The OptionsMask and OptionsOverride fields are used to specify additional options for the command, following the Zigbee specification.\n\nWhen a Zigbee device receives the MoveToColor command, it first sets the ColorMode attribute to 0x00, indicating that it will transition based on hue and saturation values. The device then smoothly transitions from its current color to the new color specified by the Hue and Saturation fields. The transition is continuous, meaning it is not a sudden step change but a gradual change over the specified Transition Time.\n\nThe path through color space taken during the transition is not specified in the Zigbee specification. However, it is recommended to take the shortest path in hue/saturation space, ensuring a smooth and efficient transition. This means the movement should be in a straight line across the hue/saturation disk.\n\nThe MoveToColor command allows for precise control over the color of a Zigbee device. By specifying the desired hue and saturation values, users can achieve the exact color they want. The smooth transition ensures a visually pleasing effect, as the device gradually changes from one color to another.\n\nIn addition to the MoveToColor command, there are two related commands: MoveToColor and MoveColor. The MoveToColor command is similar to MoveToColor but uses the ColorX and ColorY fields instead of Hue and Saturation. The ColorX and ColorY values represent the coordinates in the CIE xyY Color Space, allowing for more precise color control. The MoveColor command, on the other hand, specifies the rate of movement in steps per second using the RateX and RateY fields. This command allows for continuous movement between colors at a specified rate.\n\nOnce the MoveToColor command is successfully executed, the Zigbee device sets the ColorMode attribute to 0x01, indicating that it will transition based on color coordinates. The device then smoothly transitions from its current color to the new color specified by the ColorX and ColorY fields. The transition time is determined by the Transition Time field, ensuring a gradual change over the specified duration.\n\nOverall, the MoveToColor command provides a powerful tool for controlling the color of Zigbee devices in lighting applications. With precise control over hue, saturation, and transition time, users can create dynamic lighting effects and customize the ambiance to their liking. The command's smooth transition ensures a visually pleasing experience, while the flexibility in color selection allows for endless possibilities in lighting design.", "8": "The MoveColor command is a Zigbee cluster command that is used to control the color movement of a Zigbee device. When this command is received by a device, it is required to set the value of the ColorMode attribute to 0x01 and then move from its current color to the color specified in the ColorX and ColorY fields. The movement should be continuous, meaning it should not be a step function, and the time taken to move to the new color should be equal to the Transition Time field, which is measured in 1/10ths of a second.\n\nThe specific path through the color space taken during the transition is not specified in the command, but it is recommended that the shortest path is taken through the CIE xyY Color Space. This means that the movement should be in a straight line across the color space.\n\nThe payload format of the MoveColor command consists of four fields: RateX, RateY, OptionsMask, and OptionsOverride. The RateX and RateY fields specify the rate of movement in steps per second. A step is defined as a change in the device's CurrentX or CurrentY attribute by one unit. The OptionsMask and OptionsOverride fields are processed according to the Zigbee specification.\n\nUpon receiving the MoveColor command, the device is required to set the ColorMode attribute to 0x01 and then move to the specified color according to the rates specified in the RateX and RateY fields. This movement will continue until the target color for the next step cannot be implemented on the device.\n\nIf both the RateX and RateY fields contain a value of zero, no movement will be carried out, and the command execution will have no effect other than stopping the operation of any previously received command of this cluster. In other words, this command can be used to stop the operation of any other command of this cluster.\n\nIn summary, the purpose of the MoveColor command is to control the color movement of a Zigbee device. It allows the device to transition from its current color to a specified color in a continuous fashion. The command specifies the rates of movement in steps per second, and the device is required to set the ColorMode attribute and move to the specified color accordingly. The command can also be used to stop the operation of any previously received command of this cluster if the RateX and RateY fields contain zero values.", "9": "The StepColor command is a Zigbee cluster command used in lighting applications. When a Zigbee device receives this command, it is required to set the value of the ColorMode attribute to 0x01. The device then moves from its current color to the color specified in the ColorX and ColorY fields. The movement is continuous, meaning it is not a sudden step but a smooth transition. The time taken to move to the new color is determined by the Transition Time field, which is measured in 1/10ths of a second.\n\nThe specific path through color space taken during the transition is not specified in the command, but it is recommended that the shortest path is taken, which means moving in a straight line across the CIE xyY Color Space. This ensures efficient movement and avoids unnecessary deviation.\n\nThe payload format for the StepColor command includes several fields. The RateX and RateY fields specify the rate of movement in steps per second for the device's CurrentX and CurrentY attributes respectively. A step is defined as a change in the attribute's value by one unit. The OptionsMask and OptionsOverride fields are processed according to a specified section in the Zigbee Cluster Library Specification.\n\nUpon receiving the StepColor command, the device sets the ColorMode attribute to 0x01 and starts moving towards the target color at the specified rates. The movement continues until the target color for the next step cannot be implemented on the device. If both the RateX and RateY fields have a value of zero, no movement is carried out, and the command has no effect other than stopping the operation of any previously received command of this cluster.\n\nThe StepColor command allows for smooth and continuous color transitions in Zigbee lighting devices. By specifying the desired change in the device's CurrentX and CurrentY attributes, along with the transition time, users can achieve gradual color changes in their lighting setup. The command ensures that the movement is not abrupt and follows the specified rates for a smooth transition.\n\nOnce the StepColor command is successfully executed, the Zigbee device's ColorMode attribute is set to 0x01, indicating that it is in color mode. The device then starts moving towards the target color based on the specified StepX and StepY values. The time taken to reach the new color is determined by the Transition Time field. During the transition, the device follows a continuous path through color space, aiming to take the shortest route across the CIE xyY Color Space.\n\nIt is worth noting that if the required step is larger than what can be represented by signed 16-bit integers, it is recommended to issue multiple step commands to achieve the desired color change.\n\nIn summary, the StepColor command in Zigbee is used to smoothly transition a device's color from its current state to a target color. It ensures continuous movement and allows for gradual color changes in lighting applications. The command influences the device by setting the ColorMode attribute, initiating the movement towards the target color, and specifying the time taken for the transition.", "10": "The \"MoveToColorTemperature\" command is a Zigbee cluster command that is used in lighting applications. It allows a Zigbee device, such as a lamp, to smoothly transition from its current color to a specific color temperature. \n\nThe command is defined in the ZigBee Cluster Library Specification and has a specific payload format. The payload includes fields such as Color Temperature Mireds, Transition Time, OptionsMask, and OptionsOverride. \n\nWhen the command is received by a device, it has several effects. First, the device sets the value of the ColorMode attribute to 0x02, indicating that it is operating in color temperature mode. Then, it moves from its current color to the color specified by the Color Temperature Mireds field. The movement is continuous, meaning that it is not a sudden change but a gradual transition. The time taken to complete the transition is specified by the Transition Time field, which is measured in 1/10ths of a second. \n\nThe command also specifies that the path through color space taken during the transition is along the 'Black Body Line'. This means that the device follows a specific trajectory in the CIE xyY Color Space to achieve the desired color temperature. \n\nThe OptionsMask and OptionsOverride fields in the command payload are processed according to a specific section in the specification. These fields allow for additional options and configurations to be specified for the command execution. \n\nIt is worth noting that if the required color temperature change is larger than what can be represented by signed 16-bit integers, multiple step commands should be issued to achieve the desired transition. \n\nOverall, the purpose of the \"MoveToColorTemperature\" command is to provide a standardized way for Zigbee devices to smoothly transition from their current color to a specific color temperature. The command ensures that the transition is continuous and specifies the time taken to complete the transition. It also defines the path through color space to be followed during the transition. \n\nOnce the command is successfully executed, the Zigbee device will have changed its color to the specified color temperature. The device will also update its ColorMode attribute to indicate that it is operating in color temperature mode. This allows other devices or systems to interact with the device based on its current color temperature setting. \n\nIn conclusion, the \"MoveToColorTemperature\" command is an important Zigbee cluster command in lighting applications. It enables smooth transitions between colors and provides a standardized way for devices to change their color temperature. The command's execution has specific effects on the device, including updating attributes and initiating the transition process.", "64": "The Zigbee cluster command \"EnhancedMoveToHue\" is a command used in lighting applications to smoothly transition the color of a Zigbee device, such as a lamp, from its current hue to a target hue. This command is part of the Zigbee Cluster Library Specification for lighting.\n\nThe command payload for \"EnhancedMoveToHue\" is formatted with several fields. The \"Enhanced Hue\" field is a 16-bit value that specifies the target extended hue for the lamp. The \"Direction\" field is identical to the Direction field of the Move to Hue command in the Color Control cluster, and the \"Transition Time\" field is also identical to the Transition Time field of the Move to Hue command.\n\nUpon receiving the \"EnhancedMoveToHue\" command, a Zigbee device is required to set the ColorMode attribute to 0x00 and the EnhancedColorMode attribute to 0x03. The device then starts moving from its current enhanced hue to the value given in the Enhanced Hue field. The movement is continuous and not a step function, and the time taken to move to the new enhanced hue is equal to the Transition Time field.\n\nThe command allows for smooth color transitions along the \"Black Body Line\" in the color space. The OptionsMask and OptionsOverride fields are processed according to the Zigbee specification.\n\nThe \"EnhancedMoveHue\" command is another command related to color transitions in Zigbee devices. This command allows lamps to be moved in a continuous stepped transition from their current hue to a target hue. The command payload for \"EnhancedMoveHue\" includes fields such as Move Mode, Rate, OptionsMask, and OptionsOverride.\n\nUpon receiving the \"EnhancedMoveHue\" command, a Zigbee device is required to set the ColorMode attribute to 0x00 and the EnhancedColorMode attribute to 0x03. The device then moves from its current enhanced hue in an up or down direction in a continuous fashion, based on the Move Mode and Rate specified in the command. The command can stop the movement, increase the device's enhanced hue, or decrease it based on the specified rate. If the hue reaches the maximum or minimum allowed values for the device, it wraps around to the opposite end.\n\nOverall, these commands provide a way to control the color transitions of Zigbee devices in lighting applications. They allow for smooth and continuous changes in hue, providing flexibility in creating desired lighting effects. The commands also ensure that the devices follow the Zigbee specification by setting the appropriate attributes and processing the OptionsMask and OptionsOverride fields.", "65": "The EnhancedMoveHue command is a Zigbee cluster command that allows lamps to be moved in a continuous stepped transition from their current hue to a target hue. The purpose of this command is to provide a smooth and gradual change in hue for lighting devices. \n\nThe payload of the command is formatted with several fields. The Move Mode field is identical to the Move Mode field of the Move Hue command in the Color Control cluster. If the Move Mode field is set to 0x00 (Stop), the Rate field is ignored. The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of a device by one unit. If the Move Mode field is set to 0x01 (up) or 0x03 (down) and the Rate field is zero, the command has no effect and a ZCL Default Response command is sent in response with the status code set to INVALID_FIELD. If the Move Mode field is set to 0x00 (stop), the Rate field is ignored.\n\nThe OptionsMask and OptionsOverride fields are processed according to the Zigbee Cluster Library Specification. \n\nUpon receipt of the EnhancedMoveHue command, the device sets the ColorMode attribute to 0x00 and the EnhancedColorMode attribute to 0x03. The device then starts moving from its current enhanced hue in an up or down direction in a continuous fashion. The specific actions taken depend on the Move Mode field and are detailed in Table 5.23. If the Move Mode is set to Stop, the device stops if it is currently moving, otherwise, the command is accepted but has no effect. The EnhancedMoveHue command can also be used to stop an Enhanced Move to Hue command or an Enhanced Move to Hue and Saturation command. If the Move Mode is set to Up, the device increases its enhanced hue at the rate specified in the Rate field. If the enhanced hue reaches the maximum allowed value for the device, it wraps around to the minimum allowed value. If the Move Mode is set to Down, the device decreases its enhanced hue at the rate specified in the Rate field. If the enhanced hue reaches the minimum allowed value for the device, it wraps around to the maximum allowed value.\n\nIn summary, the EnhancedMoveHue command allows for a smooth and continuous transition of the hue of a lighting device from its current hue to a target hue. The command includes fields for specifying the move mode and rate of movement. Upon receipt of the command, the device sets its color mode attributes and starts moving its enhanced hue in the specified direction and rate. The command has no effect if the move mode is set to stop or if the rate is zero.", "66": "The EnhancedStepHue command is a Zigbee cluster command that allows lamps to transition smoothly from their current hue to a target hue in a stepped manner. This command is part of the Zigbee Cluster Library Specification for Lighting.\n\nThe purpose of the EnhancedStepHue command is to provide a way for lamps to change their hue in a linear transition through XY space. It allows for a gradual change in color, providing a smooth and visually pleasing effect. The command is particularly useful in lighting applications where a gradual change in color is desired, such as in decorative lighting or mood lighting scenarios.\n\nThe functionality of the EnhancedStepHue command is defined by its payload, which is formatted as illustrated in Figure 5-15. The payload consists of several fields:\n\n1. Step Mode Field: This field is identical to the Step Mode field of the Step Hue command in the Color Control cluster. It determines the mode of the step, such as incremental or decremental.\n\n2. Step Size Field: This field is 16-bits in length and specifies the change to be added or subtracted from the current value of the device's enhanced hue. It determines the magnitude of the step.\n\n3. Transition Time Field: This field is 16-bits in length and specifies the time, in units of 1/10ths of a second, that it will take to perform the step. The step corresponds to the Step Size field.\n\n4. OptionsMask and OptionsOverride fields: These fields are processed according to section 5.2.2.3.3 of the specification. They provide options for controlling the behavior of the command.\n\nOnce the EnhancedStepHue command is successfully executed, it has several influences on the Zigbee device. On receipt of the command, the device is required to set the ColorMode attribute to 0x00 and the EnhancedColorMode attribute to 0x03. This indicates that the device is operating in enhanced color mode and is ready to perform the step.\n\nThe device then moves from its current enhanced hue in an up or down direction by one step, depending on the Move Mode specified in Table 5.24. If the enhanced hue reaches the maximum allowed value, it proceeds to the minimum allowed value, and vice versa. This ensures that the hue remains within the allowable range for the device.\n\nOverall, the EnhancedStepHue command provides a way for Zigbee devices, specifically lamps, to smoothly transition their hue in a stepped manner. It allows for a gradual change in color, enhancing the visual experience in lighting applications. The command's payload and its influence on the device ensure that the transition is controlled and within the device's allowable range of hues.", "67": "The Enhanced Move to Hue and Saturation command is a Zigbee cluster command that allows lamps to smoothly transition from their current hue and saturation to a target hue and saturation. This command is defined in the ZigBee Cluster Library Specification and is used for lighting control.\n\nThe payload of the command is formatted as shown in Figure 5-16. It consists of several fields including the Enhanced Hue field, Saturation field, Transition Time field, OptionsMask field, and OptionsOverride field.\n\nThe Enhanced Hue field is a 16-bit field that specifies the target extended hue for the lamp. The Saturation field is identical to the Saturation field of the Move to Hue and Saturation command of the Color Control cluster. The Transition Time field is also identical to the Transition Time field of the Move to Hue command of the Color Control cluster.\n\nUpon receiving the Enhanced Move to Hue and Saturation command, the device sets the ColorMode attribute to 0x00 and the EnhancedColorMode attribute to 0x03. It then smoothly transitions from its current enhanced hue and saturation to the values specified in the enhanced hue and saturation fields. The transition is continuous and the time taken to move to the new color is equal to the Transition Time field, measured in 1/10ths of a second.\n\nThe specific path through color space taken during the transition is not specified in the command, but it is recommended to take the shortest path in XY space, moving in a straight line across the hue/saturation disk.\n\nIn addition to the Enhanced Move to Hue and Saturation command, the description also mentions the Color Loop Set command. This command allows a color loop to be activated, causing the color lamp to cycle through its range of hues. The payload of this command is formatted differently than the Enhanced Move to Hue and Saturation command.\n\nOnce the Enhanced Move to Hue and Saturation command is successfully executed, it has several influences on the Zigbee device. First, the ColorMode attribute is set to 0x00, indicating that the device is in color mode. The EnhancedColorMode attribute is set to 0x03, indicating that the device is in enhanced color mode.\n\nThe device then smoothly transitions from its current enhanced hue and saturation to the target hue and saturation specified in the command. This transition is continuous and takes the specified Transition Time to complete. The device moves in a straight line across the hue/saturation disk, taking the shortest path in XY space.\n\nOverall, the Enhanced Move to Hue and Saturation command provides a way to control the color of Zigbee lamps, allowing for smooth transitions between hues and saturations. It enhances the lighting control capabilities of Zigbee devices and provides flexibility in creating dynamic lighting effects.", "68": "", "71": "The StopMoveStep command is a Zigbee cluster command that is used to stop the execution of Move to and Step commands in a Zigbee device. This command provides symmetry to the Level Control cluster and has no effect on an active color loop.\n\nThe purpose of the StopMoveStep command is to allow the user to stop any ongoing Move to, Move, or Step commands. These commands are typically used to control the movement or adjustment of certain attributes in a Zigbee device, such as the color or level of a lamp. By sending the StopMoveStep command, the user can terminate these commands and stop any ongoing changes to the device's attributes.\n\nThe functionality of the StopMoveStep command is defined by its payload, which is formatted as illustrated in Figure 5-19. The payload consists of two fields: OptionsMask and OptionsOverride. These fields are processed according to section 5.2.2.3.3 of the Zigbee Cluster Library Specification.\n\nUpon successful execution of the StopMoveStep command, any ongoing Move to, Move, or Step commands in the device will be terminated. The values of the CurrentHue, EnhancedCurrentHue, and CurrentSaturation attributes will be left at their present values, and the RemainingTime attribute will be set to zero.\n\nThe influence of the StopMoveStep command on the Zigbee device is that it allows the user to regain control over the device's attributes. By stopping ongoing commands, the user can prevent any further changes to the device's attributes and restore them to their current values. This can be useful in situations where the device is not responding as expected or when the user wants to manually control the device's attributes.\n\nIn addition, the StopMoveStep command provides symmetry to the Level Control cluster. This means that it aligns with the functionality of the Level Control cluster, which is responsible for controlling the level or intensity of a device. By providing a command to stop ongoing commands, the StopMoveStep command ensures that the device's attributes can be controlled effectively and efficiently.\n\nOverall, the StopMoveStep command is a crucial command in the Zigbee protocol as it allows the user to regain control over the device's attributes by stopping ongoing Move to, Move, or Step commands. Its successful execution terminates these commands and restores the device's attributes to their current values. This command provides symmetry to the Level Control cluster and has no effect on an active color loop.", "75": "The \"MoveColorTemperature\" command is a Zigbee cluster command that allows the color temperature of a lamp to be moved at a specified rate. The command is defined in the ZigBee Cluster Library Specification for Lighting.\n\nThe purpose of the \"MoveColorTemperature\" command is to provide a means for controlling the color temperature of a lamp in a Zigbee network. Color temperature refers to the perceived warmth or coolness of light emitted by a lamp, and it is typically measured in kelvins. This command allows the color temperature to be adjusted in a smooth and continuous manner.\n\nThe functionality of the \"MoveColorTemperature\" command is determined by its payload, which is formatted as illustrated in Figure 5-20. The payload consists of several fields:\n\n1. Move Mode: This field determines the direction of the color temperature adjustment. A value of 0x00 indicates a stop command, 0x01 indicates an upward adjustment, and 0x03 indicates a downward adjustment.\n\n2. Rate: This field specifies the rate of movement in steps per second. Each step represents a change in the color temperature by one unit. If the Move Mode is set to stop, the Rate field is ignored.\n\n3. Color Temperature Minimum Mireds: This field sets a lower bound on the color temperature for the move operation. If the move operation takes the color temperature towards this value, it will be clipped to ensure that the lower bound is not exceeded.\n\n4. Color Temperature Maximum Mireds: This field sets an upper bound on the color temperature for the move operation. If the move operation takes the color temperature towards this value, it will be clipped to ensure that the upper bound is not exceeded.\n\n5. OptionsMask and OptionsOverride: These fields are processed according to section 5.2.2.3.3 of the specification. Their purpose is to provide additional options or overrides for the command.\n\nOnce the \"MoveColorTemperature\" command is successfully executed, it has several influences on the Zigbee device:\n\n1. The ColorMode and EnhancedColorMode attributes of the device are set to 0x02. These attributes indicate that the device is operating in color temperature mode.\n\n2. The device will start moving from its current color temperature in the specified direction (up or down) at the rate specified in the command. If the color temperature reaches the maximum or minimum allowed values (specified by the Color Temperature Maximum Mireds and Color Temperature Minimum Mireds fields), the move operation will be stopped.\n\n3. The values of the CurrentHue, EnhancedCurrentHue, and CurrentSaturation attributes are not affected by the \"MoveColorTemperature\" command. These attributes are left at their present values upon receipt of the command.\n\n4. The RemainingTime attribute is set to zero upon receipt of the command. This attribute represents the remaining time for the move operation, and setting it to zero indicates that the move operation has been terminated.\n\nIn summary, the \"MoveColorTemperature\" command allows for the smooth and continuous adjustment of the color temperature of a lamp in a Zigbee network. It provides control over the direction and rate of adjustment, as well as upper and lower bounds for the color temperature. Once executed, the command sets the device to color temperature mode and initiates the move operation, which will continue until the specified bounds are reached or the operation is stopped.", "76": "The StepColorTemperature command is a Zigbee cluster command used in lighting applications to control the color temperature of a lamp. This command allows the color temperature to be adjusted in a stepwise manner with a specified step size.\n\nWhen the StepColorTemperature command is received by a device, it has several effects on the device's attributes and behavior. First, the device sets both the ColorMode and EnhancedColorMode attributes to 0x02, indicating that it supports color temperature control. Then, the device adjusts its current color temperature in an up or down direction based on the received command.\n\nThe command payload consists of several fields that define the behavior of the step operation. These fields include:\n\n1. Step Mode: This field determines the behavior of the step operation and is identical to the Step Mode field of the Step Hue command in the Color Control cluster.\n\n2. Step Size: This field specifies the change to be added or subtracted from the current value of the device's color temperature. The step size is a 16-bit value.\n\n3. Transition Time: This field specifies the time taken to perform the step in units of 1/10ths of a second. The step is a change to the device's color temperature corresponding to the step size.\n\n4. Color Temperature Minimum Mireds: This field sets a lower bound on the ColorTemperatureMireds attribute, which represents the color temperature in kelvins. If the step operation takes the attribute towards this minimum value, it will be clipped to ensure the lower bound is satisfied.\n\n5. Color Temperature Maximum Mireds: This field sets an upper bound on the ColorTemperatureMireds attribute. If the step operation takes the attribute towards this maximum value, it will be clipped to ensure the upper bound is satisfied.\n\nThe StepColorTemperature command also includes OptionsMask and OptionsOverride fields, which are processed according to the Zigbee specification.\n\nOnce the StepColorTemperature command is successfully executed, the device adjusts its color temperature by one step in the specified direction. If the step operation reaches the maximum or minimum allowed values for the device, as defined by the Color Temperature Maximum Mireds or Color Temperature Minimum Mireds fields, respectively, the step operation will be stopped.\n\nIn summary, the StepColorTemperature command allows for precise control of the color temperature of a lamp in a stepwise manner. The command specifies the step size, transition time, and bounds for the color temperature adjustment. Upon receiving the command, the device adjusts its color temperature by one step in the specified direction, ensuring that the maximum and minimum limits are not exceeded. This command is useful for applications where fine-grained control over the color temperature of lighting devices is required."}, "513": {"0": "The Setpoint Raise/Lower command is a Zigbee cluster command that is part of the Thermostat Cluster in the Zigbee Cluster Library. This command is used for adjusting the setpoints of a thermostat, specifically for heating and cooling purposes. \n\nThe purpose of the Setpoint Raise/Lower command is to allow the user to raise or lower the setpoints of a thermostat by a specified amount. The command is sent from a Zigbee device, such as a remote control or a central controller, to the thermostat device. The command payload includes two fields: the Mode field and the Amount field.\n\nThe Mode field specifies which setpoint is to be adjusted. It can have three possible values: Heat, Cool, or Both. If the Mode field is set to Heat, only the heating setpoint will be adjusted. If it is set to Cool, only the cooling setpoint will be adjusted. And if it is set to Both, both the heating and cooling setpoints will be adjusted simultaneously.\n\nThe Amount field is a signed 8-bit integer that specifies the amount by which the setpoints are to be increased or decreased. The amount is given in steps of 0.1\u00b0C. A positive value will increase the setpoints, while a negative value will decrease them.\n\nOnce the Setpoint Raise/Lower command is successfully executed, the attributes for the indicated setpoints will be increased or decreased by the amount specified in the Amount field. This means that the actual temperature thresholds for activating the heating or cooling systems will be adjusted accordingly. For example, if the Mode field is set to Heat and the Amount field is set to 2, the heating setpoint will be increased by 0.2\u00b0C. This will result in the heating system being activated at a higher temperature.\n\nThe Setpoint Raise/Lower command provides a convenient way for users to adjust the temperature thresholds of a thermostat without manually changing them on the device itself. It allows for easy customization of the heating and cooling setpoints based on individual preferences or changing environmental conditions.\n\nIn addition, the Setpoint Raise/Lower command can be used in conjunction with other commands in the Thermostat Cluster, such as the Set Weekly Schedule command. By combining these commands, users can create schedules for automatic temperature adjustments throughout the day, week, or month. This enables energy savings and increased comfort by ensuring that the heating and cooling systems are only active when needed.\n\nOverall, the Setpoint Raise/Lower command is a crucial command in the Zigbee Thermostat Cluster as it allows for dynamic adjustment of temperature thresholds. It provides flexibility and convenience for users and enables efficient energy management in HVAC systems.", "1": "", "2": "The \"GetWeeklySchedule\" command is a Zigbee cluster command that is part of the HVAC Zigbee Cluster Library Specification. This command is used to retrieve the weekly schedule of set point values for a thermostat.\n\nThe purpose of the \"GetWeeklySchedule\" command is to allow the client to request the set point values for a specified number of days and modes. The client can specify any combination of single days or the entire week for the \"Days To Return\" field, and any combination of heat only, cool only, or heat&cool for the \"Mode To Return\" field.\n\nWhen the \"GetWeeklySchedule\" command is received by the thermostat, it should respond with the \"Get Weekly Schedule Response\" command. The response will contain the requested set point values for the specified days and modes.\n\nThe \"Days To Return\" field and the \"Mode To Return\" field are defined as bitmasks, allowing for flexibility in supporting multiple days and modes within one command. However, if the thermostat cannot handle incoming commands with multiple days and/or modes, it should send a default response of INVALID_FIELD (0x85) in return.\n\nOnce the \"GetWeeklySchedule\" command is successfully executed, it has the following influence on the Zigbee device:\n\n1. Retrieval of Weekly Schedule: The command allows the client to retrieve the weekly schedule of set point values stored in the thermostat. This information is crucial for controlling the temperature settings in the HVAC system according to the desired schedule.\n\n2. Flexibility in Requesting Set Point Values: The command provides flexibility to the client in specifying the number of days and modes for which they want to retrieve set point values. This allows for customization and adaptability to different scheduling requirements.\n\n3. Default Response Handling: The command defines default responses for various scenarios. If the total number of transitions sent in the command exceeds what the thermostat supports, a default response of INSUFFICIENT_SPACE (0x89) is sent. If any set point values are out of range, a default response of INVALID_VALUE (0x87) is sent, and the entire sequence of set points should not be used. If there is an overlap in transitions, a default response of FAILURE (0x01) is sent. These default responses ensure proper error handling and communication between the client and the thermostat.\n\n4. Clearing Weekly Schedule: The command also includes the option to clear the weekly schedule using the \"Clear Weekly Schedule\" command. This allows for resetting the set point values and starting fresh if needed.\n\nOverall, the \"GetWeeklySchedule\" command plays a crucial role in retrieving the weekly schedule of set point values for a thermostat. It provides flexibility in specifying the desired days and modes for retrieving set point values and ensures proper error handling through default responses. This command enables effective temperature control and scheduling in a Zigbee-based HVAC system.", "4": "The \"GetRelayStatusLog\" command is a Zigbee cluster command used to query the internal relay status log of a thermostat. When this command is received, all transitions currently stored in the log are cleared, and a default response of SUCCESS is sent in response. There are no error responses to this command.\n\nThe purpose of the \"GetRelayStatusLog\" command is to retrieve information about the relay status log of a thermostat. The log is stored in a First in First Out (FIFO) order, meaning that the oldest record is the first to be replaced when there is a new record and no more space in the log. The newest record will overwrite the oldest one if there is no space left. \n\nThe functionality of the \"GetRelayStatusLog\" command is to retrieve the relay status log from the queue. Once the \"Get Relay Status Log Response\" frame is sent by the server, the \"Unread Entries\" attribute should be decremented to indicate the number of unread records remaining in the queue. If the \"Unread Entries\" attribute reaches zero and the client sends a new \"Get Relay Status Log Request\", the server may either resend the last \"Get Relay Status Log Response\" or generate a new log record at the time of the request and send the response with the new data. In both cases, the \"Unread Entries\" attribute will remain zero.\n\nThe influence of executing the \"GetRelayStatusLog\" command successfully is that the Zigbee device will respond with the relay status log command if the relay status log feature is supported on the device. This means that the device will provide the requested log information to the client.\n\nIn summary, the \"GetRelayStatusLog\" command in Zigbee is used to query the internal relay status log of a thermostat. It clears all transitions currently stored in the log and sends a default response of SUCCESS. The command retrieves the relay status log from the queue in a FIFO order, and the newest record overwrites the oldest one if there is no space left. The \"Unread Entries\" attribute is decremented to indicate the number of unread records remaining in the queue. If the attribute reaches zero, the server may resend the last response or generate a new log record and send the response with the new data. The successful execution of this command influences the Zigbee device to respond with the relay status log if the feature is supported."}, "257": {"0": "The \"LockDoor\" command is a Zigbee cluster command that is used to lock the door of a lock device. This command is defined in the Zigbee Cluster Library Specification for Closures. The purpose of this command is to provide a standardized way to control and manage the locking of doors in a Zigbee network.\n\nThe LockDoor command is identified by the command ID 0x15. It is an output command, meaning that it is sent from a Zigbee coordinator or a Zigbee end device to a lock device. The command includes an optional code, known as a PIN or RFID code, which can be used to authenticate the command and provide an extra layer of security.\n\nWhen the LockDoor command is successfully executed, the lock device will lock the door. The exact mechanism used to lock the door may vary depending on the specific lock device. However, it is important to note that the door lock may require a PIN depending on the value of the \"Require PIN for RF Operation\" attribute.\n\nIn addition to the LockDoor command, there are several other related commands defined in the Zigbee Cluster Library Specification for Closures. These commands include Set User Status, Get User Status, Set Weekday Schedule, Get Weekday Schedule, Set Year Day Schedule, Get Year Day Schedule, Set Holiday Schedule, Get Holiday Schedule, Set User Type, Set RFID Code, Get RFID Code, Clear RFID Code, Clear All RFID Codes, and Unlock Door.\n\nThe Unlock Door command is used to unlock the door of a lock device. It is similar to the LockDoor command, but with the opposite effect. Like the LockDoor command, the Unlock Door command includes an optional code for the lock, which can be used to authenticate the command.\n\nThe Toggle command is used to request the status of the lock. It is used to check whether the door is currently locked or unlocked. Like the LockDoor and Unlock Door commands, the Toggle command includes an optional code for authentication.\n\nFinally, the Unlock with Timeout command is used to unlock the door with a specified timeout parameter. After the specified time has elapsed, the lock device will automatically relock itself. This command is optional and may not be supported by all lock devices.\n\nOverall, the LockDoor command and its related commands provide a standardized way to control and manage the locking and unlocking of doors in a Zigbee network. By using these commands, users can easily control the access to their premises and ensure the security of their property. The optional code parameter adds an extra layer of security by requiring authentication for the commands.", "1": "The \"UnlockDoor\" command is a Zigbee cluster command that is used to unlock a door through a lock device. This command is defined in the ZigBee Cluster Library Specification and is part of the Closures cluster.\n\nThe purpose of the \"UnlockDoor\" command is to instruct the lock device to unlock the door. When this command is successfully executed, the lock device will unlock the door, allowing access to the secured area. This command is typically used in home automation systems or security systems where remote control of door locks is required.\n\nThe \"UnlockDoor\" command includes an optional code for the lock, which may be required depending on the value of the \"Require PIN for RF Operation\" attribute. This means that the door lock may have a PIN or RFID code that needs to be provided along with the command for the unlock operation to be successful. The specific format of the command includes an octet string field for the PIN/RFID code.\n\nIt is worth noting that if the lock device supports the \"AutoRelockTime\" attribute, the lock will automatically close and relock itself once the auto relock time has expired. This means that if the door is left unlocked for a certain period of time, it will automatically relock itself to ensure security.\n\nThe \"UnlockDoor\" command has a direct influence on the Zigbee device once it is successfully executed. Upon receiving this command, the lock device will unlock the door, allowing access to the secured area. This can be beneficial in various scenarios, such as allowing authorized individuals to enter a home or building remotely.\n\nAdditionally, the \"UnlockDoor\" command can be used in conjunction with other commands to provide more advanced functionality. For example, the \"Toggle\" command can be used to request the status of the lock, including whether the door is currently locked or unlocked. This can be useful for monitoring the state of the lock and ensuring that it is functioning properly.\n\nFurthermore, the \"Unlock with Timeout\" command allows the door to be unlocked for a specified period of time. After the specified timeout period, the lock device will automatically relock itself. This can be useful in situations where temporary access is required, such as allowing a delivery person to drop off a package and then automatically relocking the door once the delivery is complete.\n\nIn summary, the \"UnlockDoor\" command in Zigbee is used to unlock a door through a lock device. It allows for remote control of door locks and can be used in home automation or security systems. The command includes an optional code for the lock and has the ability to override the default relock time. Once successfully executed, the command influences the Zigbee device by unlocking the door and potentially allowing temporary or permanent access to the secured area.", "2": "The Toggle command is a Zigbee cluster command that is used to control the power state of a Zigbee device. It allows the device to switch between its \"On\" and \"Off\" states. The purpose of this command is to provide a standardized way to control the power state of Zigbee devices, such as turning them on or off.\n\nWhen the Toggle command is received by a device, its effect depends on the current state of the device. If the device is in its \"Off\" state, it will enter its \"On\" state upon receiving the command. Conversely, if the device is in its \"On\" state, it will enter its \"Off\" state upon receiving the command. This allows for easy control of the power state of the device without needing to know its current state beforehand.\n\nIn addition to switching the power state of the device, the Toggle command also has some additional functionality. When the command is received, if the value of the OnOff attribute is equal to 0x00 (indicating that the device is currently off) and the value of the OnTime attribute is equal to 0x0000, the device will set the OffWaitTime attribute to 0x0000. This attribute represents the time that the device will wait before turning off completely. By setting it to 0x0000, the device will turn off immediately upon receiving the Toggle command.\n\nSimilarly, if the value of the OnOff attribute is equal to 0x01 (indicating that the device is currently on), the OnTime attribute will be set to 0x0000. This attribute represents the time that the device will remain on before automatically turning off. By setting it to 0x0000, the device will stay on indefinitely until it receives another command to turn off.\n\nOverall, the Toggle command provides a simple and standardized way to control the power state of Zigbee devices. It allows for easy switching between the \"On\" and \"Off\" states of the device, without needing to know the current state beforehand. Additionally, it provides functionality to immediately turn off the device or keep it on indefinitely, depending on the current state and attribute values. This command is useful for controlling various devices, such as lights, appliances, and other Zigbee-enabled devices that require power control.", "3": "The \"UnlockWithTimeout\" command is a Zigbee cluster command that is used to unlock a door lock device with an optional timeout parameter. This command is defined in the ZigBee Cluster Library Specification for Closures.\n\nThe purpose of the \"UnlockWithTimeout\" command is to enable the unlocking of a door lock device through a Zigbee network. It allows users to remotely unlock a door by sending this command to the lock device.\n\nThe functionality of the command is as follows: when the \"UnlockWithTimeout\" command is successfully executed, the lock device will unlock the door. The command includes a timeout parameter, which specifies the duration in seconds for which the door will remain unlocked. After the specified timeout period, the lock device will automatically relock the door.\n\nThe command also supports an optional PIN/RFID code field. Depending on the value of the \"Require PIN for RF Operation\" attribute, the door lock may require a code for unlocking. This provides an additional layer of security to prevent unauthorized access.\n\nThe \"UnlockWithTimeout\" command overrides the default relock time specified in the \"Auto Relock Time\" attribute. This means that the timeout specified in the command is temporary and only applicable for that specific message transition. If the door lock device does not support or want to support temporary relock timeouts, it should not support this optional command.\n\nOnce the \"UnlockWithTimeout\" command is successfully executed, it has a significant influence on the Zigbee device. Firstly, it allows remote unlocking of the door, providing convenience and flexibility for users. This is particularly useful in scenarios where users may not be physically present at the location but still need to grant access to others.\n\nSecondly, the command enhances the security of the door lock device. By supporting an optional PIN/RFID code, it ensures that only authorized individuals can unlock the door. This helps prevent unauthorized access and enhances overall security.\n\nThirdly, the command provides the ability to set a temporary relock timeout. This can be useful in situations where users want to keep the door unlocked for a specific duration, such as during a gathering or event. After the specified timeout period, the door will automatically relock, ensuring that the door remains secure even if the user forgets to manually lock it.\n\nIn conclusion, the \"UnlockWithTimeout\" command in Zigbee allows for remote unlocking of a door lock device with an optional timeout parameter. It enhances convenience, security, and flexibility for users by providing remote access control and temporary unlocking capabilities.", "4": "The \"GetLogRecord\" command is a Zigbee cluster command that is used to request a log record from a Zigbee device. This command is part of the Zigbee Cluster Library Specification and is specifically designed for closures in the Zigbee network.\n\nThe purpose of the \"GetLogRecord\" command is to retrieve a log record from a Zigbee device. The log record represents a specific event or activity that has occurred within the device. The command allows the user to request a log record based on its index number, which ranges from 1 to the maximum number of log records supported by the device. If the index number provided is 0, it indicates that the user wants to retrieve the most recent log entry.\n\nThe functionality of the \"GetLogRecord\" command is defined by its format and the data it requires. The command consists of a two-octet field called \"Log Index\" which specifies the index number of the log record to be retrieved. The log record format is defined in the description of the \"Get Log Record Response\" command.\n\nOnce the \"GetLogRecord\" command is successfully executed, it retrieves the requested log record from the Zigbee device. The log record contains information about a specific event or activity that has occurred within the device. This information can be used for various purposes such as monitoring device performance, troubleshooting issues, or analyzing patterns of usage.\n\nThe influence of the \"GetLogRecord\" command on the Zigbee device is significant. By retrieving log records, users can gain insights into the operation and behavior of the device. This can help in identifying any issues or anomalies that may have occurred. For example, if a Zigbee device is experiencing frequent failures or malfunctions, analyzing the log records can provide valuable information about the root cause of the problem. Similarly, if a user wants to track the usage patterns of a device, the log records can provide a detailed history of activities.\n\nFurthermore, the \"GetLogRecord\" command allows users to access specific log records based on their index numbers. This flexibility enables users to retrieve the most recent log entry or navigate through the log history to find a particular event of interest. This can be particularly useful in scenarios where a large number of log records are supported by the device.\n\nIn conclusion, the \"GetLogRecord\" command in Zigbee serves the purpose of retrieving log records from a Zigbee device. It allows users to request specific log records based on their index numbers and provides valuable information about device events and activities. The successful execution of this command influences the Zigbee device by enabling users to monitor performance, troubleshoot issues, and analyze usage patterns.", "5": "The \"SetPINCode\" command is a Zigbee cluster command that allows users to set a Personal Identification Number (PIN) into a door lock. This command is part of the ZigBee Cluster Library Specification and is specifically designed for closures, such as door locks.\n\nThe purpose of the \"SetPINCode\" command is to enable users to set a PIN for accessing a door lock. It provides a way to securely manage access to a door by assigning different user types and schedules. The command allows for the creation of different user profiles with varying levels of access and time restrictions.\n\nThe functionality of the \"SetPINCode\" command is based on a set of parameters that need to be provided in order to set a PIN. These parameters include the User ID, User Status, User Type, and the actual PIN code. The User ID parameter is used to identify the specific user for whom the PIN is being set. The User Status parameter indicates whether the user is occupied/enabled or occupied/disabled. The User Type parameter defines the type of user, such as unrestricted, year day schedule user, week day schedule user, master user, or non-access user. Finally, the PIN parameter contains the actual PIN code that will be set for the user.\n\nOnce the \"SetPINCode\" command is successfully executed, it has several influences on the Zigbee device and the door lock. Firstly, it allows for the creation and management of multiple user profiles with different access levels and time restrictions. This enables the door lock to be used by various individuals with varying levels of authorization. For example, an owner may have unrestricted access, while a guest may only have access within a specific time period.\n\nSecondly, the \"SetPINCode\" command enables the door lock to generate event notifications to any bound devices when a non-access user attempts to open the lock. This provides an additional layer of security by alerting the user or a monitoring system when unauthorized access is attempted.\n\nFurthermore, the \"SetPINCode\" command allows for the disabling of the user interface, such as the keypad or RF capabilities, by the master user. This feature provides an additional level of control and security, as only the master user has the ability to disable these functionalities.\n\nOverall, the \"SetPINCode\" command provides a secure and flexible way to manage access to a door lock in a Zigbee network. By allowing the creation of different user profiles with varying access levels and time restrictions, it enables the door lock to be tailored to the specific needs of different users. Additionally, the command enhances security by generating event notifications for unauthorized access attempts and allowing the master user to disable the user interface.", "6": "The \"GetPINCode\" command is a Zigbee cluster command that is used to retrieve a PIN code from a Zigbee lock device. This command is part of the Zigbee Cluster Library Specification for Closures.\n\nThe purpose of the \"GetPINCode\" command is to allow a Zigbee coordinator or other authorized device to request the PIN code associated with a specific user ID from a Zigbee lock. The user ID is a unique identifier assigned to each user of the lock. By sending this command, the requesting device can obtain the PIN code for a particular user.\n\nThe functionality of the \"GetPINCode\" command is straightforward. It requires the sender to specify the user ID for which they want to retrieve the PIN code. The user ID must be within the range of supported PIN users. Once the command is successfully executed, the Zigbee lock device will respond with the PIN code associated with the specified user ID.\n\nThe influence on the Zigbee device after the successful execution of the \"GetPINCode\" command is that the requesting device will receive the PIN code for the specified user ID. This information can then be used by the requesting device for various purposes, such as displaying the PIN code on a user interface or storing it for future reference.\n\nIt is important to note that the \"GetPINCode\" command does not modify any settings or configurations of the Zigbee lock device. It is purely a retrieval command that allows authorized devices to obtain the PIN code associated with a specific user ID.\n\nOverall, the \"GetPINCode\" command provides a convenient way for authorized devices to retrieve the PIN code for a particular user from a Zigbee lock device. This command enhances the functionality of Zigbee lock devices by enabling secure access control through the use of PIN codes.", "7": "The \"ClearPINCode\" command in the Zigbee cluster is designed to delete a Personal Identification Number (PIN) associated with a user on a Zigbee device, such as a lock. This command is part of the Zigbee Cluster Library Specification for Closures.\n\nThe command consists of a single field called \"User ID,\" which is a 16-bit unsigned integer. The User ID represents the specific user whose PIN needs to be cleared. The valid range for the User ID is between 0 and the number of PIN users supported by the device, as specified by the \"Number of PIN Users Supported\" attribute.\n\nWhen the ClearPINCode command is successfully executed, the associated PIN for the specified User ID is deleted. If the user does not have an RFID Code (an alternate form of authentication), their user status is set to \"0 Available.\" Additionally, the user type and all associated schedules are set to their default values.\n\nIt is important to note that there is another command called \"Clear All PIN Codes\" which clears out all the PINs on the lock. The Clear All PIN Codes command is intended to have the same effect as the ClearPINCode command but applied to all users. This command is useful in scenarios where a complete reset of the PINs is required.\n\nIn conjunction with the ClearPINCode command, there is a \"Set User Status\" command that allows the status of a user ID to be set. The User Status field in the Set User Status command is an 8-bit unsigned integer. The value 0x00 is not allowed for User Status. To clear a user ID, the ClearPINCode command should be used.\n\nThe purpose of the ClearPINCode command is to provide a means to delete a specific user's PIN from a Zigbee device. This functionality is crucial for managing access control and ensuring the security of the device. By removing a user's PIN, their access to the device is revoked, and they would need to re-authenticate using another method, such as an RFID Code.\n\nOnce the ClearPINCode command is successfully executed, the influence on the Zigbee device is as follows:\n\n1. Deletion of PIN: The specified user's PIN is removed from the device's memory, effectively revoking their access rights associated with that PIN.\n\n2. User Status: If the user does not have an RFID Code, their user status is set to \"0 Available.\" This change in user status indicates that the user's PIN has been cleared and they need to use an alternative method for authentication.\n\n3. User Type and Schedules: The user type and any associated schedules are set to their default values. This ensures that any customized settings or access restrictions for the user are reset.\n\nOverall, the ClearPINCode command provides a mechanism to manage and control user access on Zigbee devices. By allowing the deletion of specific PINs, it enhances security and flexibility in access control scenarios.", "8": "The \"ClearAllPINCodes\" command is a Zigbee cluster command that is used to clear out all PIN codes on a Zigbee lock device. This command is part of the Zigbee Cluster Library Specification for Closures.\n\nThe purpose of the \"ClearAllPINCodes\" command is to provide a way to remove all PIN codes that have been set on the lock device. This can be useful in situations where there is a need to reset the lock or remove all access permissions for users.\n\nThe functionality of the \"ClearAllPINCodes\" command is straightforward. When this command is successfully executed, it will clear out all PIN codes on the lock device. This means that all access permissions associated with the PIN codes will be removed. Additionally, any user status, user type, and schedules that were set for the PIN codes will be reset to their default values.\n\nThe influence of the \"ClearAllPINCodes\" command on the Zigbee device is significant. Once this command is successfully executed, all PIN codes on the lock device will be cleared, effectively removing all access permissions for users. This means that users will no longer be able to unlock the device using their previously set PIN codes.\n\nFurthermore, the user status, user type, and schedules associated with the PIN codes will also be reset to their default values. This ensures that any custom settings or configurations that were made for individual users will be cleared and set back to their default state.\n\nIt is important to note that the \"ClearAllPINCodes\" command should have the same effect as the \"ClearPINCode\" command for each individual user. This means that the user status, user type, and schedules should be reset to their default values for each user when the \"ClearAllPINCodes\" command is executed.\n\nIn conclusion, the \"ClearAllPINCodes\" command is a Zigbee cluster command used to clear out all PIN codes on a Zigbee lock device. Its purpose is to remove all access permissions associated with the PIN codes and reset any user settings or configurations to their default values. Once successfully executed, this command effectively removes all access permissions for users and resets the device to its default state.", "9": "The \"SetUserStatus\" command is a Zigbee cluster command that allows for the setting of the status of a user ID in a Zigbee device. This command is part of the ZigBee Cluster Library Specification for Closures.\n\nThe purpose of the \"SetUserStatus\" command is to provide a way to manage user access and permissions in a Zigbee device, such as a lock. It allows for the control and customization of user privileges and settings.\n\nThe functionality of the \"SetUserStatus\" command is based on the format specified in Figure 7-11 of the ZigBee Cluster Library Specification. It requires two fields: \"User ID\" and \"User Status\". The \"User ID\" field is a 16-bit unsigned integer that represents the ID of the user whose status is being set. The \"User Status\" field is an 8-bit unsigned integer that defines the desired status for the user.\n\nThe \"User Status\" value of 0x00 is not allowed, indicating that a user cannot have a status of zero. To clear a user ID, the \"Clear ID Command\" should be used instead.\n\nOnce the \"SetUserStatus\" command is successfully executed, it has an influence on the Zigbee device. The command allows for the customization and control of user access and permissions. By setting the status of a user ID, the device can determine the level of access and permissions granted to that user.\n\nThe influence of the command extends to various aspects of the device. If a user ID is cleared using the \"Clear ID Command\", the user status is set to \"0 Available\". Additionally, the user type and all schedules associated with the user are set to default values. This indicates that the user no longer has any access or permissions and their settings are reset.\n\nIt is important to note that the \"SetUserStatus\" command is part of a broader set of commands related to user management in Zigbee devices. For example, the \"Clear PIN Code Command\" allows for the deletion of a PIN code, and the \"Clear All PIN Codes Command\" clears out all PINs on the lock. These commands have similar effects on user status, user type, and schedules.\n\nIn summary, the \"SetUserStatus\" command in Zigbee devices serves the purpose of managing user access and permissions. By setting the status of a user ID, the command allows for the customization and control of user privileges. Once executed successfully, the command influences the device by determining the level of access and permissions granted to a user, as well as resetting user settings if necessary.", "10": "The Zigbee cluster command called \"GetUserStatus\" is used to retrieve the status of a user in a Zigbee device. This command is part of the Zigbee Cluster Library Specification for Closures.\n\nThe purpose of the \"GetUserStatus\" command is to provide information about the status of a specific user in the Zigbee device. It allows users or applications to query the device for the status of a particular user, such as whether the user is available or not.\n\nThe functionality of the \"GetUserStatus\" command is straightforward. It takes a User ID as input and retrieves the status of that user from the device. The User ID is a 16-bit field that identifies the user for whom the status is being requested.\n\nOnce the \"GetUserStatus\" command is successfully executed, the Zigbee device will provide the status of the requested user. The user status value indicates the current state of the user. It can be used to determine if the user is available or not, and to perform further actions based on the user's status.\n\nThe user status value of 0x00 is not allowed, which means that a user cannot have a status of \"0 Available\". If a user needs to be cleared, the \"Clear ID Command\" should be used instead of setting the status to 0x00.\n\nIn addition to retrieving the user status, the Zigbee device also supports other related commands that can be used to modify the user status and perform actions based on the status. For example, the \"Clear PIN Code Command\" can be used to delete a PIN for a user. When a PIN is deleted and the user doesn't have an RFID code, the user status is set to \"0 Available\" and all schedules are set to default values.\n\nThe \"Set User Status Command\" can be used to set the status of a user ID. The user status value can be changed to reflect the current state of the user. This command allows for the management and control of user access to the Zigbee device.\n\nThe \"Set Week Day Schedule Command\" is used to set a weekly repeating schedule for a specified user. This command allows users or applications to define a schedule for when the user is allowed access to the device. The schedule includes the days of the week, start and end times, and other parameters.\n\nOverall, the \"GetUserStatus\" command provides a way to retrieve the status of a user in a Zigbee device. It allows for the management and control of user access to the device by providing information about the user's availability. The command can be used in conjunction with other related commands to modify the user status and perform actions based on the status.", "11": "The \"SetWeekdaySchedule\" command is a Zigbee cluster command that allows for the setting of a weekly repeating schedule for a specified user. This command is defined in the ZigBee Cluster Library Specification and is used in the Closures cluster.\n\nThe command consists of several fields that need to be provided in order to set the schedule. These fields include the Schedule ID, User ID, Days Mask, Start Hour, Start Minute, End Hour, and End Minute. The Schedule ID is a number between 0 and the number of Week Day Schedules Per User attribute, while the User ID is a number between 0 and the number of Total Users Supported attribute. The Days Mask is a bitmask that represents the effective days for the schedule, with each bit corresponding to a day of the week (XSFTWTMS order). The Start Hour, Start Minute, End Hour, and End Minute fields represent the time range for the schedule, with the hours and minutes represented in decimal format.\n\nWhen the SetWeekdaySchedule command is successfully executed, it sets the specified weekly repeating schedule for the specified user. The schedule is stored in the Zigbee device and can be retrieved using the Get Week Day Schedule Command. The schedule can be used for various purposes, such as controlling access to a door lock or activating certain functions at specific times.\n\nThe command provides flexibility by allowing the same schedule to be set across multiple days using the Days Mask field. However, if the door lock does not support setting a schedule across multiple days within one command, it should respond with a ZCL INVALID_FIELD status when the command is received with multiple days selected in the days bitmask field.\n\nUpon receiving the SetWeekdaySchedule command, the Server Device has the option to change the user type to the specific schedule user type. This allows for different user types to have different access rights or privileges based on their assigned schedule.\n\nOverall, the SetWeekdaySchedule command is a useful feature in Zigbee devices that allows for the setting of weekly repeating schedules for specific users. It provides flexibility in setting the schedule across multiple days and can be used for various purposes, such as controlling access or activating functions at specific times. Once the command is successfully executed, the schedule is stored in the device and can be retrieved using the Get Week Day Schedule Command.", "14": "The Set Year Day Schedule command is a Zigbee cluster command that is used to set a time-specific schedule for a specified user in a Zigbee device. This command allows users to create and manage schedules for various tasks or events within their Zigbee network.\n\nThe command consists of several fields, including the Schedule ID, User ID, Local Start Time, and Local End Time. The Schedule ID is a unique identifier for the schedule, while the User ID represents the specific user for whom the schedule is being set. The Local Start Time and Local End Time fields specify the start and end times of the schedule, respectively. Both start and end times are given in LocalTime format.\n\nWhen the Set Year Day Schedule command is successfully executed, it allows users to define a time-specific schedule for a particular user. This schedule can be used to automate certain tasks or events within the Zigbee network. For example, users can set schedules for turning on or off lights, adjusting thermostat settings, or activating security systems at specific times of the day.\n\nThe command's functionality is based on the Zigbee Cluster Library Specification for Closures. It is designed to work with Zigbee devices that support the closures cluster, which includes devices such as door locks, window shades, and other home automation devices. The command follows a specific format, as defined in the Zigbee Cluster Library Specification.\n\nOnce the Set Year Day Schedule command is successfully executed, it has a significant influence on the Zigbee device and its operations. The command allows users to create and manage schedules, providing them with greater control and automation capabilities within their Zigbee network.\n\nBy setting time-specific schedules, users can streamline their daily routines and automate tasks based on their preferences. For example, users can set a schedule to turn on the lights in their home every evening at a specific time, ensuring that their home is well-lit when they arrive. Similarly, users can schedule their thermostat to adjust the temperature before they wake up or return home, providing a comfortable environment.\n\nThe successful execution of the Set Year Day Schedule command also allows the Server Device to change the user type to the specific schedule user type. This means that the device can adapt its behavior and settings based on the schedule, ensuring that the appropriate actions are taken at the specified times.\n\nOverall, the Set Year Day Schedule command is a powerful tool for users to create and manage time-specific schedules within their Zigbee network. It enhances automation capabilities and provides users with greater control over their devices. By setting schedules, users can optimize energy usage, improve security, and create a more convenient and comfortable living environment.", "15": "The \"GetYearDaySchedule\" command is a Zigbee cluster command that is used to retrieve a specific year day schedule for a specific user in a Zigbee network. This command allows the user to access and retrieve the schedule that has been set for a particular day of the year.\n\nThe format of the command consists of two fields: Schedule ID and User ID. The Schedule ID field is an 8-bit unsigned integer that represents the ID of the specific year day schedule that the user wants to retrieve. The User ID field is a 16-bit unsigned integer that represents the ID of the specific user for whom the schedule is being retrieved.\n\nOnce the command is successfully executed, the Zigbee device will retrieve the specified year day schedule for the specified user. This schedule will contain the time-specific events or tasks that have been set for that particular day of the year. The schedule may include information such as the start time and end time of each event, as well as any other relevant details.\n\nThe purpose of the \"GetYearDaySchedule\" command is to provide a convenient way for users to access and retrieve specific year day schedules in a Zigbee network. This command is particularly useful in scenarios where users need to view or modify their schedules for specific days of the year.\n\nThe functionality of the command is straightforward. By specifying the Schedule ID and User ID, the user can request the Zigbee device to retrieve the corresponding year day schedule. The device will then respond with the requested schedule, which can be used by the user or other devices in the network.\n\nThe influence of the \"GetYearDaySchedule\" command on the Zigbee device is that it allows for efficient scheduling and management of tasks or events for specific days of the year. Once the command is successfully executed, the device can provide the requested schedule to the user or other devices, enabling them to plan and execute tasks or events accordingly.\n\nAdditionally, the successful execution of the command may also trigger other actions or processes within the Zigbee device. For example, the device may change the user type to the specific schedule user type, as specified in the command description. This can enable the device to apply specific settings or configurations based on the retrieved schedule.\n\nIn summary, the \"GetYearDaySchedule\" command in Zigbee is used to retrieve a specific year day schedule for a specific user. It allows users to access and retrieve their schedules for specific days of the year, enabling efficient scheduling and management of tasks or events. The successful execution of the command influences the Zigbee device by providing the requested schedule and potentially triggering other actions or processes based on the retrieved schedule.", "16": "The \"ClearYearDaySchedule\" command is a Zigbee cluster command that is used to clear a specific year day schedule for a specific user. This command is defined in the ZigBee Cluster Library Specification in Chapter 7.\n\nThe format of the \"ClearYearDaySchedule\" command consists of three fields: Schedule ID, User ID, and the command itself. The Schedule ID field is a uint8 data type, which represents the ID of the schedule to be cleared. The User ID field is a uint16 data type, which represents the ID of the user for whom the schedule is being cleared.\n\nThe purpose of the \"ClearYearDaySchedule\" command is to allow users to clear a specific year day schedule for a specific user. This can be useful in scenarios where a user no longer needs a particular schedule and wants to remove it from their device.\n\nOnce the \"ClearYearDaySchedule\" command is successfully executed, the specified year day schedule for the specified user will be cleared. This means that the schedule will no longer be active and will not be triggered at the specified times. The exact impact on the Zigbee device will depend on the implementation of the device and the specific use case. However, in general, clearing a year day schedule will disable any actions or events associated with that schedule.\n\nIt is important to note that the \"ClearYearDaySchedule\" command is part of the Zigbee Cluster Library Specification, which provides a standardized set of commands and attributes for Zigbee devices. This allows different devices from different manufacturers to communicate and interoperate effectively. The use of standardized commands like \"ClearYearDaySchedule\" ensures that devices can understand and respond to each other's commands correctly.\n\nIn conclusion, the \"ClearYearDaySchedule\" command is a Zigbee cluster command used to clear a specific year day schedule for a specific user. Its purpose is to allow users to remove unnecessary schedules from their Zigbee devices. Once executed successfully, the command clears the specified schedule, disabling any associated actions or events.", "17": "The \"SetHolidaySchedule\" command is a Zigbee cluster command that allows users to set a holiday schedule for their Zigbee devices. This command is part of the Zigbee Cluster Library Specification and is defined in Chapter 7 of the specification document.\n\nThe purpose of the \"SetHolidaySchedule\" command is to enable users to define a holiday schedule for their Zigbee devices. This schedule specifies the local start time and local end time for the holiday period, as well as the operating mode during the holiday. By setting a holiday schedule, users can customize the behavior of their Zigbee devices during specific holidays or vacation periods.\n\nThe functionality of the \"SetHolidaySchedule\" command is based on the format defined in the Zigbee Cluster Library Specification. The command consists of several fields, including the Holiday Schedule ID, Local Start Time, Local End Time, and Operating Mode During Holiday. The Holiday Schedule ID is a number between 0 and the maximum number of supported holiday schedules. The Local Start Time and Local End Time are specified using the LocalTime format. The Local End Time must be greater than the Local Start Time. The Operating Mode During Holiday field is an enumeration value that determines the behavior of the Zigbee device during the holiday period.\n\nOnce the \"SetHolidaySchedule\" command is successfully executed, it has a significant influence on the behavior of the Zigbee device. The device will follow the specified holiday schedule, which means it will operate according to the defined operating mode during the holiday period. This allows users to customize the behavior of their Zigbee devices to suit their needs during holidays or vacation periods.\n\nThe holiday schedule set by the \"SetHolidaySchedule\" command can have various effects on the Zigbee device. For example, during a holiday period, the device may enter a low-power mode to conserve energy. It could also adjust its lighting or temperature settings to create a more comfortable environment during the holiday. The specific behavior of the device during the holiday period depends on the operating mode selected by the user.\n\nBy providing the ability to set a holiday schedule, the \"SetHolidaySchedule\" command enhances the flexibility and customization options of Zigbee devices. Users can tailor the behavior of their devices to align with their holiday plans and preferences. This can lead to improved energy efficiency, comfort, and convenience.\n\nIn conclusion, the \"SetHolidaySchedule\" command in Zigbee allows users to define a holiday schedule for their devices. By specifying the local start time, local end time, and operating mode during the holiday, users can customize the behavior of their Zigbee devices during specific holiday periods. Once the command is successfully executed, the device will follow the specified holiday schedule, influencing its behavior and allowing for greater flexibility and customization options.", "18": "The \"GetHolidaySchedule\" command is a Zigbee cluster command that allows users to retrieve the holiday schedule for a specific holiday ID. This command is part of the Zigbee Cluster Library Specification for Closures. \n\nThe command is used to retrieve the holiday schedule information for a particular holiday ID. The holiday schedule includes the local start time, local end time, and the operating mode during the holiday. The holiday ID is a number between 0 and the maximum number of holiday schedules supported by the device.\n\nTo execute the command, the user needs to specify the holiday ID for which they want to retrieve the schedule. The command consists of a single octet (8-bit) field named \"Holiday Schedule ID\" that holds the holiday ID value.\n\nOnce the command is successfully executed, the Zigbee device will return the holiday schedule information for the specified holiday ID. The device will provide the local start time and local end time for the holiday, as well as the operating mode that should be set during the holiday period.\n\nThe purpose of the \"GetHolidaySchedule\" command is to allow users to retrieve the holiday schedule information stored in the Zigbee device. This can be useful for users who want to know the schedule for a specific holiday, such as a public holiday or a special event. By retrieving the holiday schedule, users can ensure that the device is properly configured to operate according to the specified schedule during the holiday period.\n\nThe functionality of the command is straightforward. By providing the holiday ID, users can request the device to return the holiday schedule information. The device will then retrieve the corresponding schedule from its memory and send it back to the user.\n\nThe influence on the Zigbee device once the command is successfully executed is that the device will provide the requested holiday schedule information to the user. This information can be used by the user to configure the device's operating mode during the specified holiday period. For example, if the holiday schedule indicates that the device should be in a \"vacation\" mode during a specific holiday, the user can ensure that the device operates accordingly by setting the appropriate mode.\n\nOverall, the \"GetHolidaySchedule\" command is a useful feature in Zigbee devices that allows users to retrieve the holiday schedule information. By providing the holiday ID, users can retrieve the local start time, local end time, and operating mode for a specific holiday. This command helps users ensure that the device operates according to the specified schedule during holidays, providing convenience and automation in managing the device's behavior.", "19": "The ClearHolidaySchedule command is a Zigbee cluster command that allows the clearing of a holiday schedule by specifying the holiday ID. This command is defined in the ZigBee Cluster Library Specification for Closures.\n\nThe purpose of the ClearHolidaySchedule command is to remove a specific holiday schedule from a Zigbee device. A holiday schedule is a predefined set of rules that determine the behavior of the device during holidays or special events. By clearing the holiday schedule, the device will no longer follow the rules associated with that particular holiday.\n\nThe ClearHolidaySchedule command is formatted as a uint8 field named \"Holiday Schedule ID\". This field specifies the ID of the holiday schedule that needs to be cleared. The ID is a unique identifier assigned to each holiday schedule in the device.\n\nTo execute the ClearHolidaySchedule command, the Zigbee device needs to receive the command with the appropriate holiday schedule ID. Once the command is successfully executed, the device will remove the specified holiday schedule from its memory.\n\nThe successful execution of the ClearHolidaySchedule command has a significant influence on the Zigbee device. By clearing a holiday schedule, the device will no longer perform the actions or behaviors associated with that holiday. This can include actions such as adjusting lighting levels, changing temperature settings, or activating/deactivating specific functionalities.\n\nFor example, if a holiday schedule is set to dim the lights during a specific holiday, executing the ClearHolidaySchedule command for that holiday schedule will result in the lights no longer being dimmed during that holiday. This allows the user to customize the behavior of the device and override any predefined rules.\n\nThe ClearHolidaySchedule command provides flexibility and control to the user of the Zigbee device. It allows them to modify the behavior of the device during holidays or special events according to their preferences. By clearing a holiday schedule, the user can ensure that the device operates in a way that aligns with their specific needs and requirements.\n\nIn summary, the ClearHolidaySchedule command in Zigbee is used to clear a specific holiday schedule from a Zigbee device. It allows the user to remove predefined rules and behaviors associated with holidays or special events. The successful execution of this command influences the device by modifying its behavior and allowing the user to customize its actions.", "20": "The \"Set User Type\" command is a Zigbee cluster command that allows the user to set the type byte for a specified user in a Zigbee device. This command is defined in the Zigbee Cluster Library Specification and is part of the Closures Zigbee Document.\n\nThe purpose of the \"Set User Type\" command is to assign a specific user type to a user in a Zigbee device. The user type value to be assigned can be referred to from the User Type Value list. By setting the user type, the Zigbee device can differentiate between different users and apply specific rules or permissions based on their user type.\n\nThe \"Set User Type\" command follows a specific format, as described in Figure 7-23 of the Zigbee Cluster Library Specification. It consists of two octets: the User ID and the User Type. The User ID is a uint16 data type, which represents the identifier of the user for whom the user type is being set. The User Type is an enum8 data type, which represents the type value to be assigned to the user.\n\nOnce the \"Set User Type\" command is successfully executed, it has a significant influence on the Zigbee device. The device can now recognize and differentiate between users based on their assigned user types. This allows the device to implement specific functionalities or restrictions for different users.\n\nFor example, a Zigbee device may have different user types such as \"Administrator,\" \"Guest,\" and \"Standard User.\" By setting the user type for each user, the device can enforce different access controls or permissions. The Administrator user may have full control and access to all features and functionalities of the device, while the Guest user may have limited access. The Standard User may have access to specific features but not administrative privileges.\n\nThe \"Set User Type\" command enables the Zigbee device to tailor its behavior based on the user type. It can be used to restrict access to certain areas or functionalities, track user activity, or customize the user experience. For example, a smart lock using Zigbee technology can use the \"Set User Type\" command to assign user types to different individuals. This allows the lock to grant or deny access based on the assigned user type. An administrator can assign different user types to family members, guests, or service providers, ensuring that each user has the appropriate level of access.\n\nIn conclusion, the \"Set User Type\" command in Zigbee allows for the assignment of user types to specific users in a Zigbee device. This command plays a crucial role in defining the behavior and access control of the device based on the assigned user types. By successfully executing this command, the Zigbee device can differentiate between users and implement specific functionalities or restrictions accordingly.", "21": "The Zigbee cluster command \"GetUserType\" is a command that allows the user to retrieve the type byte for a specific user. This command is part of the Zigbee Cluster Library Specification and is included in the Closures Zigbee Document.\n\nThe purpose of the \"GetUserType\" command is to provide a way to retrieve the type byte associated with a particular user in a Zigbee device. The type byte represents the user type, which can be used to determine the privileges and access rights of that user within the Zigbee network.\n\nThe functionality of the \"GetUserType\" command is straightforward. It takes a single parameter, the User ID, which is a 16-bit value that identifies the specific user for which the type byte is being retrieved. Once the command is executed successfully, the Zigbee device will return the type byte associated with the specified user.\n\nThe influence of the \"GetUserType\" command on the Zigbee device is significant. By retrieving the type byte, the device can determine the privileges and access rights of a particular user. This information can then be used to control various aspects of the device's operation, such as granting or denying access to certain features or resources.\n\nFor example, in a Zigbee-based smart lock system, the \"GetUserType\" command can be used to retrieve the type byte for a user trying to unlock the door. Based on the user's type, the lock can determine whether to grant access or deny it. Different user types may have different levels of access, such as administrators having full control over the lock's settings, while regular users may only have access to unlock the door.\n\nThe successful execution of the \"GetUserType\" command enables the Zigbee device to provide personalized and secure access control. By retrieving the type byte associated with a specific user, the device can make informed decisions about granting or denying access based on the user's privileges. This enhances the overall security and functionality of the Zigbee device, ensuring that only authorized users can access certain features or resources.\n\nIn conclusion, the \"GetUserType\" command in Zigbee allows for the retrieval of the type byte associated with a specific user. This command plays a crucial role in providing personalized and secure access control within a Zigbee device. By successfully executing the command, the device can determine the privileges and access rights of a user, influencing its behavior accordingly.", "22": "The \"SetRFIDCode\" command is a Zigbee cluster command that is used to set an ID for RFID access into a lock. This command is part of the Zigbee Cluster Library Specification for Closures. \n\nThe command is defined in Figure 7-25 of the specification document and has the following format:\n\n- User ID: This field specifies the ID of the user for whom the RFID code is being set. The valid range for the User ID is between 0 and the number of RFID users supported by the device.\n- User Status: This field indicates the status of the user ID. Only two values are allowed for User Status: 1 (Occupied/Enabled) and 3 (Occupied/Disabled). This status is used to indicate whether access is granted or denied for the user.\n- User Type: This field specifies the type of user. The values for User Type are the same as those used for the \"Set PIN Code\" command.\n- RFID Code: This field contains the actual RFID code that is being set for the user.\n\nOnce the \"SetRFIDCode\" command is successfully executed, it has several influences on the Zigbee device:\n\n1. Access Control: The command allows for the setting of an RFID code for a specific user. This means that the user can now gain access to the lock using their RFID credentials. The access control mechanism of the device will now recognize and authenticate the user based on the RFID code.\n\n2. User Management: The command enables the device to manage users and their access privileges. By setting the User ID, User Status, User Type, and RFID Code, the device can keep track of different users and their access rights. This allows for granular control over who can access the lock.\n\n3. Integration with Other Commands: The \"SetRFIDCode\" command can be used in conjunction with other commands, such as the \"Clear RFID Code\" command and the \"Get RFID Code\" command. These commands provide additional functionality for managing and retrieving RFID codes for users.\n\n4. Default Values: If a user's RFID code is deleted using the \"Clear RFID Code\" command, the device must reset the user's status, type, and schedules to default values. This ensures that the user no longer has access to the lock and any associated settings are properly reset.\n\nOverall, the \"SetRFIDCode\" command plays a crucial role in enabling RFID access control for Zigbee devices. It allows for the configuration of user-specific RFID codes, granting or denying access based on the user's status and type. By successfully executing this command, the device can effectively manage access control and provide secure entry to authorized users.", "23": "The \"GetRFIDCode\" command is a Zigbee cluster command that is used to retrieve the RFID code associated with a specific user ID. This command is part of the ZigBee Cluster Library Specification and is defined in Chapter 7 of the specification document.\n\nThe command consists of two fields: User ID and Data Type. The User ID field is a 16-bit unsigned integer that specifies the ID of the user for which the RFID code is being retrieved. The Data Type field is not explicitly defined in the description but is likely used to specify the format or type of data being returned.\n\nThe purpose of the \"GetRFIDCode\" command is to provide a means for retrieving the RFID code associated with a specific user ID. This command is typically used in scenarios where a Zigbee device, such as a door lock or access control system, needs to verify the identity of a user based on their RFID code.\n\nOnce the command is successfully executed, the Zigbee device will retrieve the RFID code associated with the specified user ID. This RFID code can then be used for authentication purposes, such as granting access to a secure area or unlocking a door.\n\nThe successful execution of the \"GetRFIDCode\" command has several implications for the Zigbee device. Firstly, it allows the device to retrieve the RFID code, which is essential for verifying the identity of the user. Without the RFID code, the device would not be able to authenticate the user and provide the necessary access or functionality.\n\nSecondly, the command relies on the User ID field, which is a unique identifier for each user. This means that the Zigbee device must have a mechanism in place to associate user IDs with corresponding RFID codes. This could be achieved through a user database or a mapping table within the device's firmware.\n\nFurthermore, the successful execution of the command may trigger additional actions or events within the Zigbee device. For example, the device may log the access attempt or update its internal state based on the user's status. The description also mentions that the User Status field is used to indicate the status of a specific user ID, and the values for this field are defined in the \"Set PIN\" command. Therefore, the successful execution of the \"GetRFIDCode\" command may also involve checking and updating the user's status based on the retrieved RFID code.\n\nIn summary, the \"GetRFIDCode\" command in Zigbee is used to retrieve the RFID code associated with a specific user ID. This command allows Zigbee devices to authenticate users based on their RFID codes and grant access or provide specific functionality. The successful execution of the command has implications for the device's ability to verify user identities, update user statuses, and trigger additional actions or events.", "24": "The \"ClearRFIDCode\" command in Zigbee is used to delete a specific RFID code from a Zigbee device. This command is part of the Zigbee Cluster Library Specification for Closures and is designed to be used in scenarios where RFID access control is implemented.\n\nThe command consists of a single field called \"User ID\", which specifies the ID of the user whose RFID code needs to be cleared. The valid range for the User ID is between 0 and the maximum number of RFID users supported by the device.\n\nWhen the \"ClearRFIDCode\" command is successfully executed, it deletes the specified RFID code from the device. If the user associated with the RFID code did not have a PIN code, the user status is set to \"0 Available\" and the user type is set to the default value. Additionally, any schedules that are supported by the device are set to their default values.\n\nThe purpose of the \"ClearRFIDCode\" command is to provide a means for administrators or authorized users to remove specific RFID codes from the device's access control system. This can be useful in situations where a user's access privileges need to be revoked or if a lost or stolen RFID card needs to be invalidated.\n\nFunctionally, the command allows the device to update its internal database of authorized RFID codes by removing the specified code. This ensures that the device will no longer grant access to users who possess the deleted RFID code.\n\nThe successful execution of the \"ClearRFIDCode\" command has a significant influence on the Zigbee device. Once the command is executed, the device's access control system is updated to reflect the removal of the specified RFID code. This means that any user who possessed the deleted code will no longer be able to gain access to the device or any controlled areas.\n\nFurthermore, if the user associated with the deleted RFID code did not have a PIN code, their user status is set to \"0 Available\" and their user type is set to the default value. This ensures that the device's access control system is properly maintained and that any default settings or restrictions are applied to the user.\n\nIn addition, if the device supports schedules for access control, the \"ClearRFIDCode\" command sets these schedules to their default values. This ensures that any access restrictions or permissions defined by the schedules are reset for the user whose RFID code was cleared.\n\nOverall, the \"ClearRFIDCode\" command provides a necessary functionality for managing and maintaining the access control system of a Zigbee device. By allowing the deletion of specific RFID codes, the command ensures that only authorized users can gain access to the device or controlled areas.", "25": "The \"ClearAllRFIDCodes\" command is a Zigbee cluster command that is used in the context of a lock system. It is designed to clear out all RFID codes stored in the lock, effectively removing all access privileges associated with those codes.\n\nThe purpose of this command is to provide a convenient way for the user to reset the lock system by removing all RFID codes. By executing this command, the user can ensure that no unauthorized individuals have access to the lock.\n\nThe functionality of the command is straightforward. When the command is successfully executed, all RFID codes stored in the lock are deleted. Additionally, if the user associated with these codes did not have a PIN code, their user status is set to \"0 Available\" and their user type is set to the default value. Furthermore, any schedules that were set up for this user are reset to their default values.\n\nThe influence on the Zigbee device once the command is successfully executed is significant. By clearing all RFID codes, the lock system effectively removes all access privileges associated with those codes. This means that any RFID cards or devices that were previously authorized to access the lock will no longer be able to do so. This ensures that only authorized individuals can gain entry to the protected area.\n\nIn addition to removing access privileges, the command also resets the user status and user type for the associated user. If the user did not have a PIN code, their user status is set to \"0 Available,\" indicating that they are no longer authorized to use the lock. The user type is also set to the default value, ensuring that the user is treated as a regular user with no special privileges.\n\nFurthermore, any schedules that were set up for this user are cleared and set to their default values. This ensures that any time-based access restrictions that were previously in place are removed, allowing for unrestricted access to the lock.\n\nOverall, the \"ClearAllRFIDCodes\" command provides a convenient and effective way to reset the lock system by removing all RFID codes. By executing this command, the user can ensure that only authorized individuals have access to the lock and that any previous access privileges are revoked. This command is an essential feature in maintaining the security and integrity of the lock system in a Zigbee network."}, "258": {"0": "The \"Up/Open\" command is a Zigbee cluster command that is used in the context of window coverings for lift and tilt functionality. It is part of the Zigbee Cluster Library Specification for Closures and is defined in Chapter 7 of the specification document.\n\nThe purpose of the \"Up/Open\" command is to instruct the window covering to adjust its position so that the physical lift is at the InstalledOpenLimit - Lift and the tilt is at the InstalledOpenLimit - Tilt. The command is triggered by sending a command ID of 0x00 to the Window Covering Server Cluster.\n\nThe functionality of the \"Up/Open\" command is straightforward. It does not require any payload and is executed as soon as it is received by the Window Covering. The command is designed to adjust the window covering as fast as possible to the specified position settings.\n\nThe influence on the Zigbee device once the \"Up/Open\" command is successfully executed is that the window covering will move to the desired position. The physical lift of the window covering will be adjusted to the InstalledOpenLimit - Lift, and the tilt will be adjusted to the InstalledOpenLimit - Tilt. This means that the window covering will be fully open and tilted according to the specified position settings.\n\nIt is important to note that the specific position settings for the Intermediate Setpoints for lift and tilt are identified by a comma-delimited ASCII character string. The example given in the specification document is \"2,0x0013, 0x0030\", which indicates that there are two Intermediate Setpoints supported and their position settings are 0x0013 and 0x0030.\n\nThe \"Up/Open\" command is one of several commands that can be received by the Window Covering Server Cluster. Other commands include \"Down/Close\", \"Stop\", \"Go To Lift Value\", \"Go To Lift Percentage\", \"Go To Tilt Value\", and \"Go To Tilt Percentage\". Each command has a specific purpose and functionality related to controlling the position and movement of the window covering.\n\nIn summary, the \"Up/Open\" command is used to instruct a Zigbee-enabled window covering to adjust its position to fully open the window and tilt it according to the specified position settings. The command does not require any payload and is executed as soon as it is received. Once successfully executed, the window covering will be positioned according to the specified settings, allowing for efficient control and management of the window covering's lift and tilt functionality.", "1": "The \"Down/Close\" command is a Zigbee cluster command used in the Window Covering Server Cluster. It is one of the commands received by the Window Covering Server Cluster and is identified by the command ID 0x01.\n\nThe purpose of the \"Down/Close\" command is to instruct the Window Covering device to adjust the window so that the physical lift is at the InstalledClosedLimit \u2013 Lift and the tilt is at the InstalledClosedLimit \u2013 Tilt. This command is used to close or lower the window covering.\n\nThe \"Down/Close\" command does not have any payload, meaning it does not require any additional data to be sent along with the command.\n\nOnce the Window Covering device receives the \"Down/Close\" command, it will initiate the adjustment process to close or lower the window covering as fast as possible. The device will move the physical lift to the InstalledClosedLimit \u2013 Lift position and the tilt to the InstalledClosedLimit \u2013 Tilt position.\n\nThe effect of executing the \"Down/Close\" command is that the Window Covering device will stop any ongoing adjustment to the physical tilt and lift. It will then start adjusting the window to the closed position by moving the physical lift to the InstalledClosedLimit \u2013 Lift position and the tilt to the InstalledClosedLimit \u2013 Tilt position.\n\nThe adjustment process will be carried out as quickly as possible by the Window Covering device. The exact speed of adjustment may vary depending on the device's capabilities and the specific implementation.\n\nIt is important to note that the \"Down/Close\" command does not have any payload, so it does not provide any specific position settings or intermediate setpoints for the tilt or lift. The adjustment is based on the pre-defined InstalledClosedLimit \u2013 Lift and InstalledClosedLimit \u2013 Tilt values.\n\nIf the Window Covering device supports closed loop control, it may also have intermediate setpoints for the tilt and lift. These intermediate setpoints can be used to specify specific position settings for the tilt and lift. However, the \"Down/Close\" command itself does not provide these settings.\n\nIn summary, the \"Down/Close\" command in the Zigbee Window Covering Server Cluster is used to instruct the Window Covering device to adjust the window to the closed position. Upon receiving this command, the device will move the physical lift and tilt to the pre-defined InstalledClosedLimit \u2013 Lift and InstalledClosedLimit \u2013 Tilt positions, respectively. The command does not have any payload and does not provide specific position settings or intermediate setpoints. The adjustment process will be carried out as quickly as possible by the device.", "2": "The \"Stop\" command is a Zigbee cluster command that is used to control the movement of a device's current level in an up or down direction. The command is specified in the Zigbee Cluster Library Specification, which is a document developed by the Zigbee Alliance.\n\nWhen the \"Stop\" command is received by a device, it is required to move from its current level in either an up or down direction, as specified in Table 3-63 of the specification. The exact action to be taken depends on whether the device is moving up or down.\n\nIf the device is moving up, the command instructs the device to increase its CurrentLevel by a certain number of units, known as the \"Step size\". The device will continue to increase its CurrentLevel until it reaches the maximum level allowed for the device. If the maximum level is reached during the process, the transition time will be proportionally reduced.\n\nOn the other hand, if the device is moving down, the command instructs the device to decrease its CurrentLevel by the \"Step size\" units. The device will continue to decrease its CurrentLevel until it reaches the minimum level allowed for the device. If the minimum level is reached during the process, the transition time will be proportionally reduced.\n\nThe payload format of the \"Stop\" command is illustrated in Figure 3-43 of the specification. It consists of two map8 fields: OptionsMask and OptionsOverride. These fields are used to format the command payload.\n\nUpon receiving the \"Stop\" command, the device is required to create and process a temporary Options bitmap. This bitmap is used to determine the effect of the command. Any ongoing Move to Level, Move, or Step command (and their 'with On/Off' variants) currently in process will be terminated. The value of CurrentLevel will be left unchanged, and the RemainingTime will be set to zero.\n\nThe \"Stop\" command has two entries in Table 3-5 of the specification. One entry is for the Move to Level, Move, and Set commands, and the other entry is for their 'with On/Off' counterparts. The purpose of having two entries is to allow easy choice between the two sets of commands. The Stop commands are identical, and the dependency on On/Off is determined by the original command that is being stopped.\n\nIf the CurrentFrequency attribute is supported by the device, the \"Stop\" command mandates the inclusion of the Move to Closest Frequency command. This command is used to move the device to the closest frequency.\n\nIn summary, the \"Stop\" command in Zigbee is used to control the movement of a device's current level in an up or down direction. It allows the device to increase or decrease its CurrentLevel by a specified step size until it reaches the maximum or minimum level allowed for the device. The command terminates any ongoing Move to Level, Move, or Step command and sets the RemainingTime to zero. Additionally, if the CurrentFrequency attribute is supported, the command includes the Move to Closest Frequency command.", "4": "The \"GoToLiftValue\" command is a Zigbee cluster command that is used in the context of window coverings. It is part of the ZigBee Cluster Library Specification and is specifically designed for controlling the physical lift of a window covering device.\n\nThe purpose of the \"GoToLiftValue\" command is to instruct the window covering device to adjust its physical lift to a specified value. The command allows the user to set the desired lift value within certain limits, ensuring that the window covering is positioned at the desired height.\n\nThe functionality of the \"GoToLiftValue\" command is defined by its payload format. The payload consists of a single field called \"Lift Value,\" which is a 16-bit unsigned integer. This field represents the desired lift value that the window covering should adjust to.\n\nUpon receipt of the \"GoToLiftValue\" command, the window covering device will adjust its physical lift to match the lift value specified in the command's payload. However, there are certain conditions that need to be met for the command to be executed successfully.\n\nFirstly, the lift value specified in the command must be within the bounds defined by the window covering device's InstalledOpenLimit and InstalledClosedLimit. If the lift value is larger than the InstalledOpenLimit minus the current lift or smaller than the InstalledClosedLimit minus the current lift, the command will be considered out of bounds. In such cases, a default response containing the status of INVALID_VALUE will be returned.\n\nThe successful execution of the \"GoToLiftValue\" command has a direct influence on the window covering device. Once the command is received and processed, the window covering will adjust its physical lift to the specified lift value. This means that the window covering will move to the desired height as indicated by the lift value.\n\nHowever, it is important to note that the command's influence is limited to the physical lift aspect of the window covering device. It does not affect other functionalities, such as tilt control. If the device is only a tilt control device and does not support lift control, the \"GoToLiftValue\" command will be ignored, and a UNSUPPORTED_COMMAND status will be returned.\n\nAdditionally, if the device only supports open loop lift action, a zero percentage in the command payload should be treated as a down/close command, while a non-zero percentage should be treated as an up/open command. This allows for compatibility with devices that may have different control mechanisms.\n\nIn summary, the \"GoToLiftValue\" command is used to control the physical lift of a window covering device. It allows the user to specify a desired lift value within certain limits, and upon successful execution, the window covering will adjust its position to match the specified lift value. However, the command's functionality may vary depending on the device's capabilities, and it is important to consider the device's supported commands and limitations.", "5": "The Zigbee cluster command \"GotoLiftPercentage\" is part of the Zigbee Cluster Library Specification for Closures. This command is used to control window coverings in a Zigbee network. \n\nThe \"GotoLiftPercentage\" command allows the user to specify a lift percentage for the window covering. The payload of this command is formatted as a single octet uint8 field named \"Percentage Lift Value\". Upon receipt of this command, the window covering will adjust its physical lift position to match the specified lift percentage. The percentage value is mapped to an 8-bit unsigned integer value between the InstalledOpenLimit and InstalledClosedLimit.\n\nIf the specified lift percentage is larger than 100, indicating an invalid value, the window covering will not take any physical action, and a default response with the status of INVALID_VALUE will be returned. This ensures that the window covering does not attempt to move beyond its physical limits. \n\nIf the device only supports open loop lift action, a zero percentage is treated as a down/close command, and a non-zero percentage is treated as an up/open command. This allows the user to control the direction of the window covering's movement based on the specified lift percentage.\n\nHowever, if the device is only a tilt control device and does not support lift control, the \"GotoLiftPercentage\" command is ignored, and a UNSUPPORTED_COMMAND status is returned. This means that the command is not applicable to the device and cannot be executed.\n\nIt is important to note that the window covering must support either the \"GotoLiftPercentage\" or the \"GotoTiltPercentage\" command. This ensures that the device can be controlled either by adjusting the lift or tilt position.\n\nThe command has no payload, which means it does not require any additional data to be sent along with the command. When the \"Stop\" command is received, the window covering will immediately stop any adjusting to the physical tilt and lift that is currently occurring. This allows the user to halt any ongoing movement of the window covering.\n\nIn summary, the \"GotoLiftPercentage\" command in Zigbee is used to control the lift position of a window covering. It allows the user to specify a lift percentage, which is then mapped to an 8-bit unsigned integer value between the installed open and closed limits. The command ensures that the window covering does not exceed its physical limits and provides flexibility for open loop lift action. However, if the device is only a tilt control device, the command is ignored, and a UNSUPPORTED_COMMAND status is returned.", "7": "The \"GotoTiltValue\" command is a Zigbee cluster command that is used in the Window Covering cluster. Its purpose is to adjust the window covering's physical tilt to a specified tilt value or percentage.\n\nThe payload format for the \"GotoTiltValue\" command consists of a uint16 field called \"Tilt Value\". This field represents the desired tilt value for the window covering. The command is formatted as illustrated in Figure 7-57 of the ZigBee Cluster Library Specification.\n\nWhen the \"GotoTiltValue\" command is received by the Window Covering device, it will adjust the window so that the physical tilt matches the specified tilt value. However, there are certain conditions that need to be met for the adjustment to take place. The tilt value specified in the payload should not be larger than the difference between the InstalledOpenLimit and Tilt, and it should not be smaller than the difference between the InstalledClosedLimit and Tilt. If the tilt value is out of bounds, a default response with the status of INVALID_VALUE will be returned.\n\nIn addition to the \"GotoTiltValue\" command, there is also a related command called \"GotoTiltPercentage\". This command is used to adjust the window covering's physical tilt based on a specified tilt percentage. The payload format for this command consists of a uint8 field called \"Percentage Tilt Value\". The percentage value is mapped to an 8-bit unsigned integer value between the difference of InstalledOpenLimit-Tilt and InstalledClosedLimit-Tilt. If the percentage tilt value is larger than 100, no physical action will be taken, and a default response with the status of INVALID_VALUE will be returned.\n\nThe behavior of the Window Covering device when receiving the \"GotoTiltPercentage\" command depends on the capabilities of the device. If the device only supports open loop tilt action, a zero percentage is treated as a down/close command, while a non-zero percentage is treated as an up/open command. If the device is only a lift control device, the command is ignored, and a UNSUPPORTED_COMMAND status is returned. It is important to note that the device must support either the \"GotoTiltPercentage\" or the \"GotoTiltValue\" command.\n\nOnce the \"GotoTiltValue\" or \"GotoTiltPercentage\" command is successfully executed, the Window Covering device will adjust the window's physical tilt according to the specified tilt value or percentage. This allows users to control the position of the window covering and customize the amount of light or privacy they desire. The command provides a convenient way to remotely adjust the tilt of the window covering without the need for manual intervention.\n\nIn summary, the \"GotoTiltValue\" command in the Zigbee Window Covering cluster is used to adjust the physical tilt of a window covering to a specified tilt value. The related \"GotoTiltPercentage\" command allows for adjustment based on a tilt percentage. These commands provide flexibility and convenience in controlling the position of the window covering and enhancing the user experience.", "8": "The \"GotoTiltPercentage\" command is a Zigbee cluster command used in the Window Covering Cluster of the Zigbee Cluster Library Specification. This command allows for the adjustment of the physical tilt of a window covering device based on a specified tilt percentage.\n\nThe purpose of the \"GotoTiltPercentage\" command is to provide a means for controlling the tilt of a window covering device. By specifying a tilt percentage, the command enables users to adjust the tilt position of the window covering to their desired level.\n\nThe functionality of the \"GotoTiltPercentage\" command is defined by its payload format and the effect it has on the window covering device upon receipt. The payload format consists of a single uint8 field named \"Percentage Tilt Value\", which represents the desired tilt percentage.\n\nUpon receiving the \"GotoTiltPercentage\" command, the window covering device will adjust its physical tilt to match the specified tilt percentage. The percentage value is mapped to an 8-bit unsigned integer value between the installed open limit and installed closed limit for the tilt. If the specified percentage tilt value is greater than 100, the device will not take any physical action, and a default response with the status of INVALID_VALUE will be returned.\n\nThe behavior of the window covering device may vary depending on its capabilities. If the device only supports open loop tilt action, a zero percentage tilt value is treated as a down/close command, while a non-zero percentage tilt value is treated as an up/open command. On the other hand, if the device is only a lift control device and does not support tilt functionality, the \"GotoTiltPercentage\" command will be ignored, and a UNSUPPORTED_COMMAND status will be returned.\n\nIt is important to note that the tilt value specified in the command payload must be within the valid range of the installed open limit minus the tilt and the installed closed limit minus the tilt. If the tilt value is outside of this range, a default response with the status of INVALID_VALUE will be returned.\n\nOnce the \"GotoTiltPercentage\" command is successfully executed, the window covering device will adjust its physical tilt to match the specified tilt percentage. This allows users to control the amount of light and privacy in a room by adjusting the tilt position of the window covering.\n\nIn summary, the \"GotoTiltPercentage\" command in the Zigbee Cluster Library Specification's Window Covering Cluster is used to control the tilt of a window covering device. By specifying a tilt percentage, users can adjust the tilt position of the window covering to their desired level. The command's functionality includes mapping the percentage value to an 8-bit unsigned integer within the valid range and considering the device's capabilities for open loop tilt or lift control. The successful execution of the command results in the adjustment of the window covering's physical tilt to match the specified tilt percentage, allowing users to control light and privacy in a room."}, "259": {"0": "The \"GoToPercent\" command is a Zigbee cluster command used in the Closures cluster. This command is part of the Zigbee Cluster Library Specification and is described in Chapter 7 of the Zigbee document.\n\nThe purpose of the \"GoToPercent\" command is to control the movement of a barrier, such as a door or window, to a desired position specified as a percentage open value. The command allows the application to request the barrier to move to a specific position, and the barrier is expected to reach that position within a certain time period.\n\nThe command payload for the \"GoToPercent\" command consists of a single octet field called \"Percent Open\" which represents the desired position of the barrier as a percentage value ranging from 0 to 100. If the PartialBarrier capability is false, only the values 0 and 100 are valid. If the value provided is out of bounds, an invalid value status will be returned.\n\nOnce the \"GoToPercent\" command is successfully executed, the barrier will start moving towards the requested position. The time it takes for the barrier to move from a fully opened to a fully closed position is indicated by the ClosePeriod attribute. If the barrier fails to reach the desired position within this time period, the application should take safety steps, which may include remote lockout by setting the SafetyStatus attribute.\n\nThe BarrierPosition attribute indicates the current position of the barrier as a percentage open value. A value of 0xFF is returned if the position is unknown. A value of 0 indicates that the barrier is fully closed, while a value of 100 (0x64) indicates that the barrier is fully open. If the barrier is in motion and the PartialBarrier capability is true, the BarrierPosition attribute will return the current position of the barrier. Otherwise, it will return 0xFF.\n\nThe \"Stop\" command is another command in the Closures cluster that can be used to halt the current movement of the barrier. It does not have any payload and has no effect if the barrier is already stopped.\n\nIn terms of influence on the Zigbee device, once the \"GoToPercent\" command is successfully executed, the barrier will start moving towards the requested position. This command allows for precise control of the barrier's position, providing flexibility and convenience to the user. The ClosePeriod attribute ensures that the barrier reaches the desired position within a specified time frame, and if not, appropriate safety measures can be taken. The BarrierPosition attribute allows the application to monitor the current position of the barrier, providing feedback to the user. The \"Stop\" command allows for immediate halting of the barrier's movement, ensuring safety and control.\n\nOverall, the \"GoToPercent\" command is a crucial command in the Closures cluster that enables precise control of barrier movement in Zigbee devices. It provides flexibility, convenience, and safety measures to ensure the desired position of the barrier is reached within a specified time period.", "1": "The \"Stop\" command is a Zigbee cluster command that is used to stop any ongoing movement or transition of a device in terms of its level or state. This command is defined in the Zigbee Cluster Library Specification and is aimed at providing a standardized way of halting any ongoing actions or transitions within a Zigbee device.\n\nThe purpose of the \"Stop\" command is to bring an immediate halt to any movement or transition that is currently in progress within a Zigbee device. This can include actions such as moving to a specific level, fading in or out, or stepping up or down in levels. By sending the \"Stop\" command, the device is instructed to stop any ongoing actions and maintain its current level or state.\n\nThe functionality of the \"Stop\" command is based on the specific actions that are being performed by the device at the time of receiving the command. The command payload includes options and overrides that allow for customization of the behavior of the \"Stop\" command. Upon receiving the command, the device creates and processes a temporary options bitmap, which determines the specific actions to be terminated.\n\nOnce the \"Stop\" command is successfully executed, it has several influences on the Zigbee device. Firstly, any ongoing actions such as Move to Level, Move, or Step commands are terminated immediately. This ensures that the device stops any movement or transition and maintains its current level or state. The value of the CurrentLevel attribute, which represents the current level of the device, remains unchanged upon receipt of the \"Stop\" command.\n\nAdditionally, the RemainingTime attribute, which represents the remaining time for the ongoing action, is set to zero. This signifies that the action has been stopped and no further transition will occur. The \"Stop\" command also has entries in Table 3-5 of the Zigbee Cluster Library Specification, which allows for easy selection of the appropriate set of commands to be stopped.\n\nFurthermore, the \"Stop\" command has an influence on the transition time of the device. If the device reaches the maximum or minimum level allowed during the process of stopping, the transition time is proportionally reduced. This ensures that the device can quickly reach the maximum or minimum level if necessary.\n\nIn conclusion, the \"Stop\" command in Zigbee is a crucial command that allows for the immediate termination of any ongoing movement or transition within a Zigbee device. It ensures that the device maintains its current level or state and stops any further actions. The command's functionality is based on the specific actions being performed, and its successful execution influences the device's CurrentLevel, RemainingTime, and transition time."}, "1280": {"0": "The ZoneEnrollResponse command is a Zigbee cluster command that is used in the Zigbee Cluster Library (ZCL) for security and safety purposes. This command is specified in Chapter 8 of the Zigbee Cluster Library Specification.\n\nThe purpose of the ZoneEnrollResponse command is to provide a response to a ZoneEnrollRequest command, which is used to enroll a device as an active alarm device in the IAS Zone server. The ZoneEnrollResponse command is sent by the IAS Zone server to the device embodying the Zone server to notify it that it has been successfully enrolled or to provide an error code indicating the reason for enrollment failure.\n\nThe payload format of the ZoneEnrollResponse command consists of two fields: Enroll response code and Zone ID. The Enroll response code field is an enum8 data type that indicates the result of the enrollment process. The permitted values of the Enroll response code are defined in Table 8-10 of the specification. These values include Success, Not supported, No enroll permit, and Too many zones. The Zone ID field is a uint8 data type that represents the index into the zone table of the IAS Zone server. This field is only relevant if the response code is Success.\n\nUpon successful execution of the ZoneEnrollResponse command, the device embodying the Zone server is notified that it has been enrolled as an active alarm device. This means that the device can now function as an alarm device within the Zigbee network.\n\nIt is important to note that the device embodying the Zone server must authenticate received messages by checking the address of their sender against IAS_CIE_Address. This is done to ensure that only messages from the correct Centralized IAS Equipment (CIE) are accepted. This authentication process helps to maintain the security and integrity of the Zigbee network.\n\nIn addition to the ZoneEnrollResponse command, there is also another command called Initiate Normal Operation Mode. This command is used to instruct the IAS Zone server to commence normal operation mode. The Initiate Normal Operation Mode command does not have a payload and is used to transition the IAS Zone server from an enrollment mode to a normal operational mode. Once the IAS Zone server receives this command, it will commence normal operational mode and any configurations and changes made to the IAS Zone server will be retained.\n\nIn summary, the ZoneEnrollResponse command in Zigbee is used to provide a response to a ZoneEnrollRequest command and notify the device embodying the Zone server about its enrollment status as an active alarm device. The command's payload includes an enrollment response code and a zone ID. The successful execution of this command allows the device to function as an alarm device within the Zigbee network. Additionally, the command ensures message authentication to maintain network security. The Initiate Normal Operation Mode command is used to transition the IAS Zone server to normal operational mode, retaining any configurations and changes made to the server.", "1": "The \"InitiateNormalOperationMode\" is a Zigbee cluster command that is used to instruct an IAS Zone server to commence normal operation mode. This command is defined in the ZigBee Cluster Library Specification and is part of the Security and Safety section.\n\nThe purpose of the \"InitiateNormalOperationMode\" command is to transition the IAS Zone server from a different mode (such as test mode) to normal operation mode. It is used to indicate that the IAS Zone server should start functioning normally and retain any configurations and changes that have been made to it.\n\nThe command does not have any payload, meaning it does not require any additional data to be sent along with the command. Once the IAS Zone server receives the \"InitiateNormalOperationMode\" command, it will commence normal operational mode. This means that it will start performing its intended functions as an active alarm device.\n\nUpon transitioning to normal operation mode, the IAS Zone server is required to send a Zone Status Change Notification command to update the ZoneStatus attribute. The ZoneStatus attribute includes a Test bit, which is set to zero when the IAS Zone server is in normal operation mode. This notification informs other devices in the Zigbee network that the IAS Zone server is now operating normally.\n\nThe successful execution of the \"InitiateNormalOperationMode\" command has a significant influence on the Zigbee device. Once the command is received and processed by the IAS Zone server, it will start operating in its intended mode and perform its alarm functions. Any configurations and changes made to the IAS Zone server will be retained, ensuring that it operates according to the desired settings.\n\nAdditionally, the IAS Zone server will update its ZoneStatus attribute by setting the Test bit to zero. This informs other devices in the network that the IAS Zone server is no longer in test mode but is operating normally. This information is important for the overall functioning and coordination of the Zigbee network.\n\nIt is important to note that the behavior of the IAS Zone server while in test mode is manufacturer-specific. Different types of IAS Zone servers, such as motion sensors, fire sensors, and carbon monoxide sensors, may have specific behaviors and features while in test mode. These behaviors may include suspending battery-saving features, reducing blackout periods, and generating zone status change notifications upon detecting test alarms.\n\nIn conclusion, the \"InitiateNormalOperationMode\" command is used to transition an IAS Zone server from a different mode to normal operation mode. It allows the server to start functioning normally, retain configurations and changes, and update its ZoneStatus attribute. The successful execution of this command ensures that the IAS Zone server operates as intended and communicates its status to other devices in the Zigbee network.", "2": "The InitiateTestMode command is a Zigbee cluster command that is used by IAS (Intruder Alarm System) Zone servers to remotely place themselves into a test mode. This command allows users or installers to configure various operational parameters of the IAS Zone server, such as field of view, sensitivity, and other settings. It also enables them to verify the proper placement and operation of the IAS Zone server, especially in difficult-to-reach locations where triggering a physical input on the device is impractical.\n\nOne of the main use cases for this command is in large deployments of IAS systems, particularly in commercial and industrial settings. In such scenarios, placing the entire IAS system into test mode may not be feasible due to the vulnerabilities that might arise. Instead, this command allows for only a single IAS Zone server to be placed into test mode, ensuring that the rest of the system remains operational.\n\nHowever, it is important to note that the effectiveness of this command is limited by the fact that most IAS Zone servers are battery-powered sleepy nodes, which means they may not reliably receive commands. To overcome this limitation, implementers may choose to program an IAS Zone server by factory default to maintain a limited duration of normal polling upon initialization or joining a new network. Additionally, some IAS Zone servers may have AC mains power and are capable of receiving commands more reliably.\n\nThe InitiateTestMode command is formatted with two fields: Test Mode Duration and Current Zone Sensitivity Level. The Test Mode Duration field specifies the duration, in seconds, for which the IAS Zone server will operate in test mode. During this time, the server will update its CurrentZoneSensitivityLevel attribute to match the value specified in the command. The Current Zone Sensitivity Level field determines the sensitivity level that the IAS Zone server will use during the test mode.\n\nOnce the InitiateTestMode command is successfully received by the IAS Zone server, it will enter the test mode for the specified duration. The server will update its CurrentZoneSensitivityLevel attribute accordingly and send a Zone Status Change Notification command to indicate that it is in test mode. While in test mode, the IAS Zone server will continue to send Zone Status Change Notification commands with the appropriate payload to signal the successful detection of test events.\n\nOverall, the purpose of the InitiateTestMode command is to allow remote configuration and testing of IAS Zone servers. It provides a way to adjust operational parameters and verify the proper functioning of the server, especially in challenging deployment scenarios. By entering test mode, the server can simulate events and ensure that it is detecting them accurately. This command plays a crucial role in maintaining the reliability and effectiveness of IAS systems in various settings."}, "1281": {"0": "The \"Arm\" command is a Zigbee cluster command that is used for arming and disarming a security system. It is a part of the Zigbee Cluster Library Specification and is designed for security and safety purposes.\n\nThe purpose of the \"Arm\" command is to control the arm mode of a security system. The arm mode determines how the system will respond to events such as zone breaches or alarms. The command allows the user to specify the arm mode, enter an arm/disarm code, and select a specific zone to arm or disarm.\n\nThe command payload is formatted as illustrated in Figure 8-6 of the specification. It consists of four fields: Arm Mode, Arm/Disarm Code, Zone ID, and Effect on Receipt. The Arm Mode field specifies the desired arm mode, which can be one of the values defined in Table 8-14. These values include disarm, arm day/home zones only, arm night/sleep zones only, and arm all zones.\n\nThe Arm/Disarm Code field is used for authentication purposes. It is a code entered by the user into the ACE client or system keypad to verify their authorization to arm or disarm the system. The server may validate this code before arming or disarming the system. If the client does not have the capability to input a code, a string with a length of zero is transmitted.\n\nThe Zone ID field specifies the index of the zone in the CIE's zone table. This allows the user to select a specific zone to arm or disarm. If no zone is programmed, the default value is indicated in this field.\n\nOnce the \"Arm\" command is successfully executed, the receiving device sets its arm mode according to the value of the Arm Mode field. The command may be rejected based on the current state of the IAS CIE (Centralized Interface Equipment) and its related devices. In response to the command, the device generates an \"Arm Response\" command to indicate the resulting armed state.\n\nThe \"Arm\" command provides a way to control the arm mode of a security system in a Zigbee network. By specifying the desired arm mode, entering an arm/disarm code, and selecting a specific zone, the user can arm or disarm the system according to their requirements. This command enhances the security and safety features of Zigbee devices by allowing users to control the behavior of their security systems.\n\nIn summary, the \"Arm\" command in Zigbee is used to control the arm mode of a security system. It allows users to specify the arm mode, enter an arm/disarm code, and select a specific zone. Once executed, the command sets the arm mode of the receiving device and generates an \"Arm Response\" command to indicate the resulting armed state. This command enhances the security and safety features of Zigbee devices by providing control over the behavior of security systems.", "2": "The Zigbee cluster command \"Emergency\" serves as a crucial feature in Zigbee devices, providing a standardized way to handle emergency situations. This command is designed to enable the transmission of emergency alerts or notifications within a Zigbee network. It plays a vital role in ensuring the safety and security of users, as well as facilitating timely responses to critical events.\n\nThe purpose of the \"Emergency\" cluster command is to allow a Zigbee device to initiate an emergency alert or notify other devices in the network about an emergency situation. This command can be triggered manually by a user or automatically by the device itself, based on predefined conditions. By using the \"Emergency\" command, devices can quickly communicate urgent information to other devices within the network, enabling timely actions to be taken.\n\nFunctionally, the \"Emergency\" cluster command involves the transmission of an emergency message, which contains relevant information about the emergency event. This message may include details such as the type of emergency, location, severity level, and any additional information deemed necessary. The command also supports the inclusion of optional data, allowing devices to provide more context or specific instructions related to the emergency.\n\nOnce the \"Emergency\" command is successfully executed, it has a significant influence on the Zigbee device and the overall network. Firstly, the command triggers an immediate response from the device, ensuring that the emergency notification is promptly communicated to other devices. This quick dissemination of information allows for rapid decision-making and appropriate actions to be taken in response to the emergency.\n\nFurthermore, the successful execution of the \"Emergency\" command may activate predefined emergency protocols or procedures within the device or network. These protocols can include actions such as activating alarms, notifying emergency services, initiating evacuation procedures, or adjusting device settings to enhance safety measures. The command's influence extends beyond the device itself, as it can trigger a cascade of reactions throughout the Zigbee network, ensuring that all relevant devices are aware of the emergency situation.\n\nIn terms of device behavior, successful execution of the \"Emergency\" command may result in the device entering an emergency mode or state. In this mode, the device may prioritize emergency-related tasks and suspend or modify its regular operation to focus on addressing the emergency situation. For example, a Zigbee lighting device may switch to emergency lighting mode, providing brighter illumination to aid evacuation efforts.\n\nThe \"Emergency\" command also has implications for device interoperability and integration within the Zigbee network. As a standardized cluster command, it ensures that all Zigbee devices can understand and respond to emergency alerts in a consistent manner. This interoperability enables devices from different manufacturers to seamlessly communicate during emergencies, enhancing the overall effectiveness of the Zigbee network in emergency situations.\n\nIn conclusion, the Zigbee cluster command \"Emergency\" serves a critical purpose in providing a standardized means of transmitting emergency alerts within a Zigbee network. Its functionality allows for the rapid dissemination of crucial information, triggering timely responses to emergency events. The successful execution of the command influences the behavior of the device, activating emergency protocols and potentially entering an emergency mode. Overall, the \"Emergency\" command enhances device interoperability, ensuring that all devices within the Zigbee network can effectively respond to emergencies and contribute to the safety and security of users.", "3": "The Zigbee cluster command called \"Fire\" is designed to provide a standardized way for Zigbee devices to control and manage fire-related functionality. This command is primarily used in home automation systems, building management systems, and other applications where fire safety and detection are crucial.\n\nThe purpose of the \"Fire\" command is to enable Zigbee devices to communicate and coordinate their actions in response to a fire event. It allows devices such as smoke detectors, fire alarms, sprinkler systems, and emergency lights to work together seamlessly and efficiently during a fire emergency. By implementing this command, Zigbee devices can effectively detect, notify, and respond to fire incidents in a coordinated manner.\n\nThe functionality of the \"Fire\" command revolves around the exchange of information and instructions between Zigbee devices involved in fire safety. When a device detects a fire or receives a fire-related signal, it can issue the \"Fire\" command to notify other devices in the network. This command carries essential information such as the type and severity of the fire, location details, and any additional instructions or actions to be taken.\n\nUpon successfully executing the \"Fire\" command, the influence on Zigbee devices is significant. Firstly, devices that receive the command can initiate appropriate actions based on the information provided. For example, a smoke detector may trigger an alarm or send a notification to a centralized monitoring system. Similarly, a sprinkler system may activate to suppress the fire, and emergency lights may be turned on to guide occupants to safety.\n\nFurthermore, the \"Fire\" command allows devices to communicate their status and capabilities to ensure a coordinated response. For instance, a fire alarm may use this command to inform other devices that it has detected a fire and is currently sounding an alarm. This information can be crucial for other devices to determine the appropriate actions to take, such as activating ventilation systems or unlocking emergency exits.\n\nThe successful execution of the \"Fire\" command also enables devices to provide feedback and updates regarding the fire situation. For instance, a device may send periodic status updates to inform others about the progress of fire suppression efforts or any changes in the fire's severity. This real-time information exchange helps in making informed decisions and optimizing the overall fire safety response.\n\nIt is important to note that the \"Fire\" command operates within the Zigbee cluster framework, which provides a standardized structure for communication between devices. This standardization ensures interoperability between different manufacturers' devices, allowing them to seamlessly work together in a Zigbee network.\n\nIn conclusion, the Zigbee cluster command \"Fire\" plays a crucial role in facilitating effective fire safety and response in Zigbee-enabled systems. Its purpose is to enable devices to communicate and coordinate their actions during a fire emergency. By successfully executing this command, Zigbee devices can exchange information, initiate appropriate actions, and provide updates regarding the fire situation. The \"Fire\" command greatly enhances the overall fire safety capabilities of Zigbee devices and allows for a more efficient and coordinated response to fire incidents.", "4": "The Zigbee cluster command called \"Panic\" serves as a crucial feature in Zigbee devices, providing a means to trigger emergency actions and ensure the safety and security of users. This command is designed to be executed in response to critical situations where immediate attention or intervention is required.\n\nThe primary purpose of the Panic command is to notify and alert other devices within the Zigbee network about an emergency situation. When this command is successfully executed, it broadcasts a panic message to all devices within the network, indicating the occurrence of a critical event. This message is typically sent using the Zigbee broadcast address, ensuring that all devices within range receive the notification.\n\nThe Panic command is highly versatile and can be customized to cater to different emergency scenarios. It allows the inclusion of additional information or data related to the emergency event, providing context to the receiving devices. This information can include details such as the type of emergency, location, severity level, or any other relevant data that aids in understanding the situation.\n\nOnce the Panic command is successfully executed, it triggers various actions and responses from the Zigbee devices within the network. The specific functionality and influence of the Panic command vary depending on the implementation and configuration of the devices involved. However, there are some common behaviors and consequences associated with this command.\n\nFirstly, upon receiving a Panic message, devices may initiate predefined emergency protocols. These protocols can include actions such as activating alarms, notifying authorities or designated contacts, initiating evacuation procedures, or triggering specific device behaviors to ensure user safety. For example, a Panic command in a home security system can activate sirens, send alerts to homeowners' smartphones, and even contact emergency services.\n\nAdditionally, the Panic command can prompt devices to modify their behavior or prioritize certain actions over others. For instance, in a Zigbee lighting system, receiving a Panic command may cause all lights to switch to full brightness or flash rapidly, serving as a visual indicator of an emergency situation.\n\nFurthermore, the Panic command can influence the overall network behavior by altering the routing and communication patterns. When a device receives a Panic message, it may prioritize relaying the message to neighboring devices, ensuring that the emergency notification reaches as many devices as possible. This behavior helps in creating a robust and efficient emergency response network within the Zigbee ecosystem.\n\nIt is important to note that the Panic command's execution and subsequent actions heavily depend on the device's capabilities, configuration, and the application layer implemented. The command must be supported by both the sender and the receiver devices, and their respective firmware or software must be programmed to interpret and respond to the Panic message appropriately.\n\nIn summary, the Zigbee cluster command \"Panic\" plays a vital role in ensuring the safety and security of Zigbee device users. Its purpose is to trigger emergency actions by broadcasting a panic message to all devices within the network. The command's successful execution leads to various actions, such as activating alarms, notifying authorities, modifying device behavior, and altering network routing patterns. The Panic command enhances the overall emergency response capabilities of Zigbee devices, providing a reliable and efficient means of communication during critical situations.", "5": "The \"GetZoneIDMap\" command is a Zigbee cluster command that is used to retrieve information about the zone IDs within a Zigbee device. This command is specified in the Zigbee Cluster Library Specification, which is a standard document that defines the behavior and functionality of Zigbee devices.\n\nThe purpose of the \"GetZoneIDMap\" command is to allow a Zigbee device to obtain a map of the zone IDs within its network. This map provides information about the zones that are present in the network, such as their IDs and other relevant details. By retrieving this information, the device can gain a better understanding of the zones within its network and their associated attributes.\n\nThe functionality of the \"GetZoneIDMap\" command is straightforward. When a Zigbee device receives this command, it generates a \"Get Zone ID Map Response\" command in response. This response command contains the map of zone IDs, which can be used by the requesting device to update its internal records and perform any necessary operations based on the retrieved information.\n\nOnce the \"GetZoneIDMap\" command is successfully executed, it has an influence on the receiving Zigbee device. The device can use the information obtained from the command to update its internal records and perform various functions related to the retrieved zone IDs. For example, the device can use the zone IDs to identify specific zones within its network and perform actions based on their status.\n\nAdditionally, the \"GetZoneIDMap\" command can be used in conjunction with other Zigbee cluster commands to enhance the functionality of a Zigbee device. For example, the retrieved zone IDs can be used with the \"Bypass Command\" to request zone bypasses from an IAS ACE server. By bypassing certain zones, the device can allow specific areas to be left open without triggering the security system.\n\nIn summary, the \"GetZoneIDMap\" command in Zigbee allows a device to retrieve a map of the zone IDs within its network. This command enables the device to obtain information about the zones present in the network and their associated attributes. Once executed successfully, the command influences the device by providing it with the necessary information to update its internal records and perform various functions related to the retrieved zone IDs.", "6": "The \"GetZoneInformation\" command is a Zigbee cluster command that is used to retrieve information about the zones in a Zigbee network. When a device receives this command, it is required to generate a \"Get Zone ID Map Response\" command. The purpose of this command is to provide information about the zone IDs present in the network.\n\nThe payload format for the \"Get Zone Information\" command is defined in Figure 8-8 of the Zigbee Cluster Library Specification. It consists of a single field called \"Zone ID\" which is of type uint8. This field represents the zone ID for which the information is being requested.\n\nWhen a device receives the \"Get Zone Information\" command, it is required to generate a \"Get Zone Information Response\" command. This response command provides the requested information about the zone, such as its status, attributes, and other relevant details.\n\nAnother related command is the \"Get Panel Status\" command, which is used by ACE (Alarm Control Equipment) clients to request an update on the status of the ACE server, also known as the IAS CIE (IAS Control and Indicating Equipment). This command is particularly useful for battery-powered ACE clients with longer polling rates. The \"Get Panel Status\" command does not have any payload, and upon receipt, the ACE server responds with the status of the security system by generating a \"Get Panel Status Response\" command.\n\nThe \"Get Bypassed Zone List\" command allows IAS ACE clients to retrieve the list of zones that have been bypassed. This command enables ACE clients to provide additional local functionality to users, allowing them to modify the Bypassed Zone List and reduce the need for communication with the IAS ACE server when arming the CIE security system. This command does not have any payload, and upon receipt, the IAS ACE server sends a \"Set Bypassed Zone List\" command.\n\nLastly, the \"Get Zone Status\" command is used by ACE clients to request an update on the status of IAS Zone devices managed by the ACE server (IAS CIE). This command is particularly useful for battery-powered ACE clients with longer polling rates. Similar to the \"Get Attributes Supported\" command, the \"Get Zone Status\" command specifies a starting Zone ID and the number of Zone IDs for which information is requested.\n\nIn summary, the \"GetZoneInformation\" command in Zigbee is used to retrieve information about the zones in a Zigbee network. It allows devices to request information about specific zones and receive a response with relevant details. Additionally, there are other related commands such as \"Get Panel Status\", \"Get Bypassed Zone List\", and \"Get Zone Status\" that provide updates on the status and functionality of the ACE server and IAS Zone devices. These commands contribute to the overall management and control of the Zigbee network and its security system.", "7": "The \"GetPanelStatus\" command is a Zigbee cluster command that is used by ACE clients to request an update on the status of the ACE server, specifically the IAS CIE (Control and Indicating Equipment) which is responsible for managing the security system. This command is particularly useful for battery-powered ACE clients with longer polling rates, as it allows them to request status updates from the server without having to constantly check in.\n\nThe payload format for the \"GetPanelStatus\" command does not include any additional data. It is simply a command that is sent to the ACE server to request the current status of the security system. Upon receiving this command, the ACE server will respond with the status of the security system by generating a \"Get Panel Status Response\" command.\n\nThe purpose of the \"GetPanelStatus\" command is to provide ACE clients with an efficient way to request updates on the status of the security system. By periodically sending this command, battery-powered devices can conserve energy by avoiding frequent check-ins and only requesting updates when necessary. This is particularly useful for devices with longer polling rates, as they can still receive timely updates without draining their battery quickly.\n\nThe functionality of the \"GetPanelStatus\" command is straightforward. Once the command is successfully executed, the ACE server will respond with the current status of the security system. This status may include information such as the arm state of the system, indicating whether it is armed or disarmed. The specific details of the response will depend on the implementation of the ACE server and the security system it is managing.\n\nThe influence of the \"GetPanelStatus\" command on the Zigbee device is significant. By providing ACE clients with the ability to request updates on the security system status, it enables them to provide greater local functionality to users. For example, an ACE client can use the information received from the server to modify the Bypassed Zone List, which allows users to bypass certain zones when arming the security system. This reduces the need for frequent communication with the ACE server, resulting in improved efficiency and reduced power consumption.\n\nIn conclusion, the \"GetPanelStatus\" command in Zigbee is a cluster command used by ACE clients to request updates on the status of the ACE server, specifically the IAS CIE managing the security system. It allows battery-powered devices with longer polling rates to efficiently request status updates without draining their battery quickly. The command has no payload and upon successful execution, the ACE server responds with the current status of the security system. This command significantly influences the Zigbee device by enabling greater local functionality and reducing the need for frequent communication with the ACE server.", "8": "The \"GetBypassedZoneList\" is a Zigbee cluster command that allows IAS ACE clients to retrieve the list of zones that have been bypassed in the security system. This command provides the clients with the ability to modify the bypassed zone list locally, reducing the need for frequent communication with the IAS ACE server.\n\nThe purpose of the \"GetBypassedZoneList\" command is to provide IAS ACE clients with greater local functionality in managing the security system. By retrieving the list of bypassed zones, the clients can make changes to the list without relying on constant communication with the server. This is particularly useful for battery-powered ACE clients with longer polling rates, as it reduces the need for frequent check-ins and conserves battery life.\n\nThe functionality of the \"GetBypassedZoneList\" command is straightforward. It does not have any payload, meaning there is no additional data or information required when sending the command. Upon receipt of this command, the IAS ACE server will respond by sending a \"Set Bypassed Zone List\" command. This allows the server to update the bypassed zone list based on the modifications made by the client.\n\nOnce the \"GetBypassedZoneList\" command is successfully executed, it has a significant influence on the Zigbee device. By retrieving the list of bypassed zones, the IAS ACE clients gain control over which zones are bypassed in the security system. This allows users to customize the security settings according to their preferences or specific requirements.\n\nThe influence of this command is particularly important in scenarios where users want to arm the security system but only bypass certain zones. By having access to the bypassed zone list, the IAS ACE clients can modify the list locally and reduce the need for frequent communication with the server. This not only enhances the user experience by providing greater local functionality but also reduces the overall communication load on the Zigbee network.\n\nOverall, the \"GetBypassedZoneList\" command in Zigbee provides IAS ACE clients with the ability to retrieve and modify the list of bypassed zones in the security system. This command enhances the local functionality of the clients, reduces the need for frequent communication with the server, and allows users to customize the security settings according to their preferences. By successfully executing this command, the Zigbee device experiences an influence that improves user control and reduces network communication.", "9": "The \"GetZoneStatus\" command is a Zigbee cluster command that is used by ACE (Alarm Control Panel) clients to request an update of the status of the IAS (Intruder Alarm System) Zone devices managed by the ACE server (IAS CIE). This command is especially useful for battery-powered ACE clients with longer polling rates.\n\nThe purpose of the \"GetZoneStatus\" command is to obtain updated information about the status of the IAS Zone devices. It allows the ACE clients to request information about specific Zone IDs and their corresponding Zone Statuses. The command specifies a starting Zone ID and a maximum number of Zone IDs for which information is requested.\n\nThe functionality of the \"GetZoneStatus\" command is defined by its payload format. The payload includes the Starting Zone ID, Max Number of Zone IDs Requested, Zone Status Mask Flag, and Zone Status Mask fields. The Starting Zone ID field specifies the starting Zone ID from which the client wants to obtain zone status information. The Max Number of Zone IDs Requested field specifies the maximum number of Zone IDs and their corresponding Zone Statuses that the ACE server should return in the response.\n\nThe Zone Status Mask Flag and Zone Status Mask fields work together to enable the client to get information about specific Zone IDs based on their Zone Status attributes. If the Zone Status Mask Flag is set to zero, the ACE server includes all Zone IDs and their status in the response, regardless of their Zone Status. If the flag is set to one, the server includes only those Zone IDs whose Zone Status attribute matches one or more of the Zone Statuses requested in the Zone Status Mask field.\n\nOnce the \"GetZoneStatus\" command is successfully executed, the ACE server responds with the status of the zones that meet the requested criteria. The server generates a \"Get Zone Status Response\" command, which includes the requested Zone IDs and their corresponding Zone Statuses. The response allows the ACE client to obtain updated information for the subset of Zone IDs they are interested in, reducing the need for frequent communication between the client and server.\n\nIt is important to note that depending on the number of IAS Zone devices managed by the ACE server, the Zone Status of all zones may not fit into a single response command. In such cases, the ACE client may need to send multiple \"GetZoneStatus\" commands to retrieve the desired information.\n\nIn summary, the \"GetZoneStatus\" command in Zigbee is used by ACE clients to request an update of the status of IAS Zone devices. It allows clients to specify the starting Zone ID and retrieve the status of a specific number of Zone IDs. The command provides flexibility by allowing clients to request information based on Zone Status attributes. Once executed, the command triggers a response from the ACE server, which includes the requested Zone IDs and their corresponding Zone Statuses. This command is particularly useful for battery-powered ACE clients with longer polling rates and reduces the need for frequent communication between the client and server."}, "1282": {"0": "The StartWarning command is a Zigbee cluster command that is used within the IAS WD (Intruder Alarm System, Warning Device) cluster. This command is classified as a primary transaction and is of type 1, which means it is a client-to-server command. The cluster identifier for the IAS WD cluster is 0x0502.\n\nThe StartWarning command is used to initiate the operation of the warning device. When this command is executed, the warning device alerts the surrounding area by emitting audible (siren) and visual (strobe) signals. The command payload for StartWarning is formatted as shown in Figure 8-21.\n\nThe payload includes several fields that define the behavior of the warning device. The Warning Mode field is a 4-bit enumeration that specifies the type of warning to be activated. The possible warning modes include Burglar, Fire, Emergency, Police panic, Fire panic, Emergency Panic, and Stop (no warning).\n\nThe Strobe field is a 2-bit enumeration that determines whether the visual indication (strobe) is required in addition to the audible siren. If the Strobe field is set to 1 and the Warning Mode is set to 0 (Stop), only the strobe is activated.\n\nThe Siren Level field is a 2-bit enumeration that indicates the intensity of the audible squawk sound. The available levels include Low, Medium, High, and Very high.\n\nThe Warning Duration field specifies the requested duration of the warning in seconds. This field is ignored if both the Strobe and Warning Mode are set to 0 (Stop).\n\nThe Strobe Duty Cycle field indicates the length of the flash cycle for the strobe. It allows for varying the flash duration for different alarm types such as fire, police, or burglar. The valid range for this field is 0-100 in increments of 10. The default value is 0x00.\n\nThe Strobe Level field indicates the intensity of the strobe. It is used to vary the output of the strobe (brightness) and not its frequency. At least one level of strobe intensity must be supported.\n\nOnce the StartWarning command is successfully executed, the warning device will activate the specified warning mode, emitting the configured audible and visual signals. The command will terminate the effect of any previous IAS WD cluster command that is still active.\n\nIn summary, the StartWarning command is used to initiate the operation of a warning device within the IAS WD cluster. It allows for the activation of audible and visual signals to alert the surrounding area. The command payload includes fields to specify the warning mode, strobe and siren levels, warning duration, strobe duty cycle, and strobe level. Once executed, the command activates the specified warning mode and terminates any previous active warning commands.", "1": "The \"Squawk\" command is a Zigbee cluster command that is used to emit a quick audible/visible pulse called a \"squawk\" using the WD (Warning Device) capabilities. The command is defined in the ZigBee Cluster Library Specification for Security and Safety.\n\nThe purpose of the Squawk command is to provide a notification sound or visual indication for certain events or states of the Zigbee device. It is typically used to indicate the arming or disarming of a system, but the exact operation of each mode is implementation-specific.\n\nThe Squawk command payload is formatted with several fields. The Squawk Mode field is a 4-bit enumeration that determines the specific operation of the squawk. It can have values such as \"Notification sound for System is armed\" or \"Notification sound for System is disarmed\". The exact behavior of each mode is left to the implementation.\n\nThe Strobe field is a Boolean that determines whether a visual indication in addition to the audible squawk is required. If the Strobe field is set to \"No strobe\", only the audible squawk will be emitted. If it is set to \"Use strobe blink in parallel to squawk\", both the audible and visual indications will be activated.\n\nThe Squawk Level field is a 2-bit enumeration that determines the intensity of the audible squawk sound. It can have values such as \"Low level sound\", \"Medium level sound\", \"High level sound\", or \"Very High level sound\". At least one level of sound must be supported.\n\nIn addition to the Squawk command, there are other fields related to the duration and duty cycle of the warning. The Warning Duration field specifies the requested duration of the warning in seconds. The Strobe Duty Cycle field indicates the length of the flash cycle for the visual indication. It is specified as a percentage from 0 to 100 in increments of 10. The Strobe Level field determines the intensity of the visual strobe, with values such as \"Low level strobe\", \"Medium level strobe\", \"High level strobe\", or \"Very high level strobe\". At least one level of strobe must be supported.\n\nOnce the Squawk command is successfully executed, it will emit the specified audible/visible pulse according to the defined parameters. The exact behavior and implementation of the squawk will depend on the specific device and its capabilities. The command allows for customizable and flexible notification options, providing users with different levels of sound and visual indications based on their preferences or specific events.\n\nOverall, the Squawk command enhances the functionality and usability of Zigbee devices by providing a standardized way to generate audible and visual notifications. It adds an extra layer of safety and security, allowing users to be alerted to important system events or states."}}