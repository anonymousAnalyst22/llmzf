###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               26/Sep/2023  15:48:37
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\fuzzing-coordinator\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW240D.tmp
#        (D:\fuzzing-coordinator\Components\stack\zcl\zcl.c -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_POLL_CONTROL -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D HAL_LCD=FALSE
#        -D ZCL_ON_OFF -D INT_HEAP_LEN=3000 -D HAL_UART_DMA_RX_MAX=128 -D
#        HAL_UART_DMA_TX_MAX=128 -lC
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl.lst
#    Object file        =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl.r51
#
###############################################################################

D:\fuzzing-coordinator\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #include "hal_uart.h"
     50          
     51          #if defined ( INTER_PAN )
     52            #include "stub_aps.h"
     53          #endif
     54             
     55          #ifdef BDB_REPORTING
     56            #include "bdb_Reporting.h"
     57          #endif
     58          #include "bdb_interface.h"
     59          
     60          #include "zcl_green_power.h"
     61          
     62             
     63          /*********************************************************************
     64           * MACROS
     65           */
     66          /*** Frame Control ***/
     67          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     68          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     69          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     70          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     71          
     72          /*** Attribute Access Control ***/
     73          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     74          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     75          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     76          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     77          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     78          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     79          
     80          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     81          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     82          
     83          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     84                                                  (zclHdr).fc.manuSpecific == 0          && \
     85                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     86          
     87          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     88          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     89                                                  (cmd) == ZCL_CMD_WRITE                  || \
     90                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     91                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     92                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     93                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     95                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     96                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     97                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     98                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     99          #define  ZCL_VALID_MIN_HEADER_LEN  3
    100          
    101          /*********************************************************************
    102           * CONSTANTS
    103           */
    104          
    105          /*********************************************************************
    106           * TYPEDEFS
    107           */
    108          typedef struct zclLibPlugin
    109          {
    110            struct zclLibPlugin *next;
    111            uint16              startClusterID;    // starting cluster ID
    112            uint16              endClusterID;      // ending cluster ID
    113            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    114          } zclLibPlugin_t;
    115          
    116          // Command record list
    117          typedef struct zclCmdRecsList
    118          {
    119            struct zclCmdRecsList *pNext;
    120            uint8                 endpoint;
    121            uint8                 numCommands;
    122            CONST zclCommandRec_t *pCmdRecs;
    123          } zclCmdRecsList_t;
    124          
    125          
    126          // Cluster option list item
    127          typedef struct zclClusterOptionList
    128          {
    129            struct zclClusterOptionList *next;
    130            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    131            uint8                       numOptions; // Number of the following records
    132            zclOptionRec_t              *options;   // option records
    133          } zclClusterOptionList;
    134          
    135          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    136          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    137          
    138          typedef struct
    139          {
    140            zclParseInProfileCmd_t   pfnParseInProfile;
    141            zclProcessInProfileCmd_t pfnProcessInProfile;
    142          } zclCmdItems_t;
    143          
    144          
    145          // List record for external handler for unhandled ZCL Foundation commands/rsps
    146          typedef struct zclExternalFoundationHandlerList
    147          {
    148              struct zclExternalFoundationHandlerList *next;
    149              uint8 zcl_ExternalTaskID;
    150              uint8 zcl_ExternalEndPoint;
    151          } zclExternalFoundationHandlerList;
    152          
    153          
    154          /*********************************************************************
    155           * GLOBAL VARIABLES
    156           */
    157          
    158          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    160          #endif
    161          
    162          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          // ZCL Sequence number
    166          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    172          
    173          /*********************************************************************
    174           * EXTERNAL VARIABLES
    175           */
    176          
    177          /*********************************************************************
    178           * EXTERNAL FUNCTIONS
    179           */
    180          
    181          /*********************************************************************
    182           * LOCAL VARIABLES
    183           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    185          
    186          #if defined ( ZCL_DISCOVER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
   \                     gpCmdList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    194          
    195          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    197          #endif
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    203          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    204          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    205          
    206          #if !defined ( ZCL_STANDALONE )
    207          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    208          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    209          #endif // !defined ( ZCL_STANDALONE )
    210          
    211          #if defined ( ZCL_DISCOVER )
    212            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    213          #endif
    214          
    215          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    216          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    217          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    218          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    219          
    220          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    221          
    222          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    223          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    224          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    225          #endif // ZCL_READ || ZCL_WRITE
    226          
    227          #ifdef ZCL_READ
    228          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    229          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    230          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    231                                                   uint8 *pAttrData, uint16 *pDataLen );
    232          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    233          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    234          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    235          #endif // ZCL_READ
    236          
    237          #ifdef ZCL_WRITE
    238          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    239                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    240          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    241                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    242          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    243          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    244          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    245          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    246          #endif // ZCL_WRITE
    247          
    248          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    249          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    250          #endif
    251          
    252          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    253          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    254          
    255          #ifdef ZCL_DISCOVER
    256          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    257          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    258          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    259          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    260          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    261          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    262          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    263          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    264          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    265          #endif // ZCL_DISCOVER
    266          
    267          /*********************************************************************
    268           * Parse Profile Command Function Table
    269           */
    270          

   \                                 In  segment CODE_C, align 1
    271          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   ....         DW `??zclParseInConfigReportRspCmd::?relay`
   \   00001E   ....         DW `??zcl_HandleExternal::?relay`
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   0000         DW 0H
   \   00002A   0000         DW 0H
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000032   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000034   ....         DW `??zclParseInDiscAttrsRspCmd::?relay`
   \   000036   ....         DW `??zcl_HandleExternal::?relay`
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   000046   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000048   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   00004A   ....         DW `??zcl_HandleExternal::?relay`
   \   00004C   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   00004E   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000050   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   000052   ....         DW `??zcl_HandleExternal::?relay`
   \   000054   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000056   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000058   ....         DW `??zclParseInDiscAttrsExtRspCmd::?relay`
   \   00005A   ....         DW `??zcl_HandleExternal::?relay`
    272          {
    273          #ifdef ZCL_READ
    274            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    275            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    276          #else
    277            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    278            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    279          #endif // ZCL_READ
    280          
    281          #ifdef ZCL_WRITE
    282            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    283            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    284            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    285            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    286          #else
    287            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    289            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    290            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    291          #endif // ZCL_WRITE
    292          
    293          #ifdef ZCL_REPORTING_DEVICE
    294              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    295          #else
    296              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    297          #endif
    298          
    299              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    300          
    301          #ifdef ZCL_REPORTING_DEVICE
    302              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    303          #else
    304              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    305          #endif
    306          
    307          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    308              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    309          #else
    310              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    311          #endif
    312          
    313          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    314              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    315          #else
    316              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    317          #endif
    318          
    319            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    320          
    321          #ifdef ZCL_DISCOVER
    322            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    323            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    324            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    325            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    326            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    327            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    328            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    329            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    330            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    331            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    332            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    333          #else
    334            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    335            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    336            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    337            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    338            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345          #endif // ZCL_DISCOVER
    346          };
    347          
    348          /*********************************************************************
    349           * PUBLIC FUNCTIONS
    350           *********************************************************************/
    351          
    352          #if !defined ( ZCL_STANDALONE )
    353          /*********************************************************************
    354           * @fn          zcl_Init
    355           *
    356           * @brief       Initialization function for the zcl layer.
    357           *
    358           * @param       task_id - ZCL task id
    359           *
    360           * @return      none
    361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    362          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    363          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    364            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    365          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    366          #endif
    367          
    368          #if !defined ( ZCL_STANDALONE )
    369          /*********************************************************************
    370           * @fn          zcl_event_loop
    371           *
    372           * @brief       Event Loop Processor for zcl.
    373           *
    374           * @param       task_id - task id
    375           * @param       events - event bitmap
    376           *
    377           * @return      unprocessed events
    378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    381            uint8 *msgPtr;
    382          
    383            (void)task_id;  // Intentionally unreferenced parameter
    384          
    385            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6049         JZ        ??zcl_event_loop_0
    386            {
    387              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   800A         SJMP      ??zcl_event_loop_1
    388              while ( msgPtr != NULL )
    389              {
    390                uint8 dealloc = TRUE;
    391          
    392                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    393                {
    394                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000014                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    395                }
    396                else
    397                {
    398                  uint8 taskID;
    399                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    400          
    401                  if ( taskID != TASK_NO_TASK )
    402                  {
    403                    // send it to another task to process.
    404                    osal_msg_send( taskID, msgPtr );
    405                    dealloc = FALSE;
    406                  }
    407                }
    408          
    409                // Release the memory
    410                if ( dealloc )
    411                {
    412                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   AA..         MOV       R2,?V0
   \   000019   AB..         MOV       R3,?V1
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    413                }
    414          
    415                // Next
    416                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   E5..         MOV       A,?V0
   \   00002C   45..         ORL       A,?V1
   \   00002E   6022         JZ        ??zcl_event_loop_4
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   E0           MOVX      A,@DPTR
   \   000037   641A         XRL       A,#0x1a
   \   000039   AA..         MOV       R2,?V0
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   60D5         JZ        ??zcl_event_loop_2
   \   00003F                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   00003F   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000042   E9           MOV       A,R1
   \   000043   F9           MOV       R1,A
   \   000044   74FF         MOV       A,#-0x1
   \   000046   69           XRL       A,R1
   \   000047   60CE         JZ        ??zcl_event_loop_3
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   AA..         MOV       R2,?V0
   \   00004B   AB..         MOV       R3,?V1
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   80CC         SJMP      ??zcl_event_loop_1
    417              }
    418          
    419              // return unprocessed events
    420              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   6480         XRL       A,#0x80
   \   000057   FB           MOV       R3,A
   \   000058   02....       LJMP      ??zcl_event_loop_5 & 0xFFFF
    421            }
    422          
    423          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    424            if ( events & ZCL_DATABUF_SEND )
   \                     ??zcl_event_loop_0:
   \   00005B   EE           MOV       A,R6
   \   00005C   5420         ANL       A,#0x20
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    425            {
    426              gpNotificationMsg_t *gpNotification = NULL;
    427              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    428              uint8 appId;
    429              uint8 nwkSeqNum;
    430              uint16 nwkAddr;
    431              
    432              gpNotification = gp_GetHeadNotificationMsg( );
   \   000063                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000063   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000066   8A..         MOV       ?V6,R2
   \   000068   8B..         MOV       ?V7,R3
    433              
    434              if ( gpNotification == NULL )
   \   00006A   EA           MOV       A,R2
   \   00006B   45..         ORL       A,?V7
   \   00006D   7003         JNZ       $+5
   \   00006F   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    435              {
    436                return 0;
    437              }
    438              
    439              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
   \   000072   EA           MOV       A,R2
   \   000073   240D         ADD       A,#0xd
   \   000075   F582         MOV       DPL,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V7
   \   00007A   F583         MOV       DPH,A
   \   00007C   12....       LCALL     ??Subroutine216_0 & 0xFFFF
    440              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
   \                     ??CrossCallReturnLabel_440:
   \   00007F   EE           MOV       A,R6
   \   000080   2402         ADD       A,#0x2
   \   000082   F5..         MOV       ?V4,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   F5..         MOV       ?V5,A
   \   000088   85..82       MOV       DPL,?V4
   \   00008B   F583         MOV       DPH,A
   \   00008D   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000090   5407         ANL       A,#0x7
   \   000092   F8           MOV       R0,A
    441              
    442              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    443              // for the GP notification
    444              nwkSeqNum = _NIB.SequenceNum;
   \   000093   90....       MOV       DPTR,#_NIB
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F5..         MOV       ?V3,A
    445              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
   \   000099   8E82         MOV       DPL,R6
   \   00009B   8F83         MOV       DPH,R7
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   90....       MOV       DPTR,#_NIB
   \   0000A1   F0           MOVX      @DPTR,A
    446              
    447              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    448              nwkAddr = _NIB.nwkDevAddress;
   \   0000A2   90....       MOV       DPTR,#_NIB + 20
   \   0000A5   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   0000A8   12....       LCALL     ?Subroutine35 & 0xFFFF
    449              
    450              if( appId == GP_OPT_APP_ID_GPD )
   \                     ??CrossCallReturnLabel_463:
   \   0000AB   E8           MOV       A,R0
   \   0000AC   701C         JNZ       ??zcl_event_loop_7
    451              {
    452                osal_memcpy( &_NIB.nwkDevAddress,( pCmdPayloadMsgCurr->pMsg + sizeof( uint16 ) ), sizeof(uint16) );
   \   0000AE                ; Setup parameters for call to function osal_memcpy
   \   0000AE   85..82       MOV       DPL,?V4
   \   0000B1   85..83       MOV       DPH,?V5
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   2402         ADD       A,#0x2
   \   0000B7   12....       LCALL     ?Subroutine108 & 0xFFFF
    453              }
   \                     ??CrossCallReturnLabel_199:
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BD   7C02         MOV       R4,#0x2
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000C3   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000C5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C8   801F         SJMP      ??zcl_event_loop_8
    454              else if( appId == GP_OPT_APP_ID_IEEE )
   \                     ??zcl_event_loop_7:
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   68           XRL       A,R0
   \   0000CD   701F         JNZ       ??zcl_event_loop_9
    455              {
    456                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
   \   0000CF                ; Setup parameters for call to function osal_revmemcpy
   \   0000CF   85..82       MOV       DPL,?V4
   \   0000D2   85..83       MOV       DPH,?V5
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   2408         ADD       A,#0x8
   \   0000D8   12....       LCALL     ?Subroutine108 & 0xFFFF
    457              }
   \                     ??CrossCallReturnLabel_200:
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DE   7C02         MOV       R4,#0x2
   \   0000E0   7D00         MOV       R5,#0x0
   \   0000E2   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000E4   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000E6   12....       LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
   \                     ??zcl_event_loop_8:
   \   0000E9   7403         MOV       A,#0x3
   \   0000EB   12....       LCALL     ?DEALLOC_XSTACK8
    458              
    459              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    460                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    461                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
   \                     ??zcl_event_loop_9:
   \   0000EE                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0000EE   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0000F1   E9           MOV       A,R1
   \   0000F2   F9           MOV       R1,A
   \   0000F3                ; Setup parameters for call to function zcl_SendCommand
   \   0000F3   85..82       MOV       DPL,?V4
   \   0000F6   85..83       MOV       DPH,?V5
   \   0000F9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   F5..         MOV       ?V0,A
   \   000104   75..00       MOV       ?V1,#0x0
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010C   E9           MOV       A,R1
   \   00010D   F5..         MOV       ?V0,A
   \   00010F   78..         MOV       R0,#?V0
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000114   E4           CLR       A
   \   000115   F5..         MOV       ?V0,A
   \   000117   78..         MOV       R0,#?V0
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011C   75..01       MOV       ?V0,#0x1
   \   00011F   78..         MOV       R0,#?V0
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000124   75..00       MOV       ?V0,#0x0
   \   000127   78..         MOV       R0,#?V0
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012C   75..01       MOV       ?V0,#0x1
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000134   75..00       MOV       ?V0,#0x0
   \   000137   78..         MOV       R0,#?V0
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013C   7C21         MOV       R4,#0x21
   \   00013E   7D00         MOV       R5,#0x0
   \   000140   AA..         MOV       R2,?V6
   \   000142   AB..         MOV       R3,?V7
   \   000144   79F2         MOV       R1,#-0xe
   \   000146   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000149   740B         MOV       A,#0xb
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
    462              
    463              // Restore the NIB nwk sequence number
    464              _NIB.SequenceNum = nwkSeqNum;
   \   00014E   E5..         MOV       A,?V3
   \   000150   90....       MOV       DPTR,#_NIB
   \   000153   12....       LCALL     ??Subroutine230_0 & 0xFFFF
    465              
    466              // Restore the NIB nwk address
    467              _NIB.nwkDevAddress = nwkAddr;
   \                     ??CrossCallReturnLabel_545:
   \   000156   F9           MOV       R1,A
   \   000157   90....       MOV       DPTR,#_NIB + 20
   \   00015A   12....       LCALL     ??Subroutine220_0 & 0xFFFF
    468              
    469              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
   \                     ??CrossCallReturnLabel_472:
   \   00015D                ; Setup parameters for call to function gp_GetPHeadNotification
   \   00015D   12....       LCALL     `??gp_GetPHeadNotification::?relay`; Banked call to: gp_GetPHeadNotification
   \   000160                ; Setup parameters for call to function gp_NotificationMsgClean
   \   000160   12....       LCALL     `??gp_NotificationMsgClean::?relay`; Banked call to: gp_NotificationMsgClean
    470              
    471              if ( gp_GetHeadNotificationMsg ( ) != NULL )
   \   000163                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000163   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000166   8B..         MOV       ?V1,R3
   \   000168   EA           MOV       A,R2
   \   000169   45..         ORL       A,?V1
   \   00016B   6017         JZ        ??zcl_event_loop_6
    472              {
    473                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   00016D                ; Setup parameters for call to function osal_start_timerEx
   \   00016D   90....       MOV       DPTR,#__Constant_32
   \   000170   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000173   7A20         MOV       R2,#0x20
   \   000175   7B00         MOV       R3,#0x0
   \   000177   90....       MOV       DPTR,#zcl_TaskID
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   F9           MOV       R1,A
   \   00017C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00017F   7404         MOV       A,#0x4
   \   000181   12....       LCALL     ?DEALLOC_XSTACK8
    474              }
    475            }
    476          #endif
    477          
    478            // Discard unknown events
    479            return 0;
   \                     ??zcl_event_loop_6:
   \   000184   7A00         MOV       R2,#0x0
   \   000186   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   000188                REQUIRE ?Subroutine8
   \   000188                ; // Fall through to label ?Subroutine8
    480          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine196_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F5..         MOV       ?V0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V1,A
   \   000008   75..00       MOV       ?V2,#0x0
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine197_0
   \   000003                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine218_0
   \   000006                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine221_0
   \   000001                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine231_0
   \   000006                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    481          #endif
    482          
    483          #if !defined ( ZCL_STANDALONE )
    484          /*********************************************************************
    485           * @fn      zcl_registerForMsg
    486           *
    487           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    488           *          messages that aren't processed to one task (if a task is
    489           *          registered).
    490           *
    491           * @param   taskId - task Id of the Application where commands will be sent to
    492           *
    493           * @return  TRUE if task registeration successful, FALSE otherwise
    494           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    496          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    497            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
    498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine201_0
   \   000003                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    499          
    500          /*********************************************************************
    501           * @fn      zcl_registerForMsgExt
    502           *
    503           * @brief   This function enables a Task to register to recieve all
    504           *          incoming Foundation Command/Response messages, for a particular
    505           *          End Point, that aren't processed by ZCL.
    506           *
    507           *          NOTE: Any Task registered for a unique end point will take
    508           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    509           *          value.  ie. If task A registers for End Point 1, task B registers
    510           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    511           *          sent to Task A and NOT Task B.
    512           *
    513           * @param   taskId - task Id of the Application where commands will be sent to
    514           * @param   endPointId - end point Id of interest
    515           *
    516           * @return  TRUE if task registeration successful, FALSE otherwise
    517           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    519          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    520            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine2 & 0xFFFF
    521          }
    522          
    523          /*********************************************************************
    524           * @fn      zcl_addExternalFoundationHandler
    525           *
    526           * @brief   This function adds a record to the internal list of external
    527           *          handlers of unhandled incoming Foundation Command/Response messages.
    528           *
    529           * @param   taskId - task Id of the Application where commands will be sent to
    530           * @param   endPointId - end point Id of interest
    531           *
    532           * @return  TRUE if task registeration successful, FALSE otherwise
    533           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    535          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    536            zclExternalFoundationHandlerList *pNewItem;
    537            zclExternalFoundationHandlerList *pLoop;
    538            zclExternalFoundationHandlerList *pLoopPrev;
    539          
    540            // Fill in the new endpoint registrant list
    541            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   A8..         MOV       R0,?V0
   \   000016   A9..         MOV       R1,?V1
    542            if ( pNewItem == NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6038         JZ        ??zcl_addExternalFoundationHandler_0
    543            {
    544              return ( false );
    545            }
    546          
    547            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   00001C   EF           MOV       A,R7
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    548            pNewItem->zcl_ExternalTaskID = taskId;
   \   000025   EE           MOV       A,R6
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ?Subroutine38 & 0xFFFF
    549            pNewItem->next = NULL;
    550          
    551            // Add to the list
    552            if ( externalEndPointHandlerList == NULL )
   \                     ??CrossCallReturnLabel_50:
   \   00002F   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000032   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000035   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    553            {
    554              externalEndPointHandlerList = pNewItem;
   \   000037   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00003A   E8           MOV       A,R0
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   E9           MOV       A,R1
   \   00003E   8046         SJMP      ??zcl_addExternalFoundationHandler_2
    555            }
    556            else
    557            {
    558              // make sure no one else tried to register for this endpoint
    559              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
    560              pLoopPrev = externalEndPointHandlerList;
    561          
    562              while ( pLoop != NULL )
    563              {
    564                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   6F           XRL       A,R7
   \   00004B   700B         JNZ       ??zcl_addExternalFoundationHandler_4
    565                {
    566                  zcl_mem_free(pNewItem);
   \   00004D                ; Setup parameters for call to function osal_mem_free
   \   00004D   E8           MOV       A,R0
   \   00004E   FA           MOV       R2,A
   \   00004F   E9           MOV       A,R1
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    567                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   000054   7900         MOV       R1,#0x0
   \   000056   8031         SJMP      ??zcl_addExternalFoundationHandler_5
    568                }
    569                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   000058   EA           MOV       A,R2
   \   000059   FC           MOV       R4,A
   \   00005A   EB           MOV       A,R3
   \   00005B   FD           MOV       R5,A
    570                pLoop = pLoop->next;
   \   00005C   8A82         MOV       DPL,R2
   \   00005E   8B83         MOV       DPH,R3
   \   000060   12....       LCALL     ??Subroutine191_0 & 0xFFFF
    571              }
   \                     ??CrossCallReturnLabel_315:
   \   000063   70DD         JNZ       ??zcl_addExternalFoundationHandler_3
    572          
    573              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   000065   74FF         MOV       A,#-0x1
   \   000067   6F           XRL       A,R7
   \   000068   700C         JNZ       ??zcl_addExternalFoundationHandler_6
    574              {
    575                // put new registration at the end of the list
    576                pLoopPrev->next = pNewItem;
   \   00006A   8C82         MOV       DPL,R4
   \   00006C   8D83         MOV       DPH,R5
   \   00006E   12....       LCALL     ?Subroutine43 & 0xFFFF
    577                pNewItem->next = NULL;
    578              }
   \                     ??CrossCallReturnLabel_57:
   \   000071   E4           CLR       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   8010         SJMP      ??zcl_addExternalFoundationHandler_2
    579              else
    580              {
    581                // put new registration at the front of the list
    582                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   000076   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000079   12....       LCALL     ??Subroutine211_0 & 0xFFFF
    583                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_386:
   \   00007C   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00007F   12....       LCALL     ?Subroutine43 & 0xFFFF
    584                pNewItem->next = temp;
    585              }
    586            }
   \                     ??CrossCallReturnLabel_58:
   \   000082   EA           MOV       A,R2
   \   000083   F0           MOVX      @DPTR,A
   \   000084   A3           INC       DPTR
   \   000085   EB           MOV       A,R3
   \                     ??zcl_addExternalFoundationHandler_2:
   \   000086   F0           MOVX      @DPTR,A
    587          
    588            return ( true );
   \   000087   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000089   02....       LJMP      ??Subroutine202_0 & 0xFFFF
    589          
    590          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    591          
    592          /*********************************************************************
    593           * @fn      zcl_getExternalFoundationHandler
    594           *
    595           * @brief   This function retrieves the Task ID of the task registered
    596           *          to received unhandled incoming Foundation Command/Response messages
    597           *          for a particular End Point ID.
    598           *
    599           * @param   pInMsg - recevied ZCL command
    600           *
    601           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    602           *          TASK_NO_TASK.
    603           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    604          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    605          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    606            zclExternalFoundationHandlerList *pLoop;
    607            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
    608          
    609            // make sure no one else tried to register for this endpoint
    610            pLoop = externalEndPointHandlerList;
   \   00000D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000010   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    611          
    612            while ( pLoop != NULL )
    613            {
    614              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    615                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    616              {
    617                return ( pLoop->zcl_ExternalTaskID );
    618              }
    619              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000016   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000019   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   EA           MOV       A,R2
   \   000025   6B           XRL       A,R3
   \   000026   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   6B           XRL       A,R3
   \   00002B   70E5         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    620            }
    621          
    622            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   000037   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   000039   02....       LJMP      ?Subroutine0 & 0xFFFF
    623          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    624          #endif
    625          
    626          #if !defined ( ZCL_STANDALONE )
    627          /*********************************************************************
    628           * @fn      zcl_HandleExternal
    629           *
    630           * @brief
    631           *
    632           * @param   pInMsg - incoming message to process
    633           *
    634           * @return  TRUE
    635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    636          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    638            zclIncomingMsg_t *pCmd;
    639            uint8 taskID;
    640          
    641            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    642          
    643            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   65..         XRL       A,?V0
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    644            {
    645              return ( TRUE );
    646            }
    647          
    648            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001F                ; Setup parameters for call to function osal_msg_allocate
   \   00001F   7A19         MOV       R2,#0x19
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    649            if ( pCmd != NULL )
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    650            {
    651              // fill in the message
    652              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   7434         MOV       A,#0x34
   \   000033   12....       LCALL     ?Subroutine153 & 0xFFFF
    653              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_501:
   \   000036   EA           MOV       A,R2
   \   000037   2402         ADD       A,#0x2
   \   000039   FC           MOV       R4,A
   \   00003A   E4           CLR       A
   \   00003B   3B           ADDC      A,R3
   \   00003C   FD           MOV       R5,A
   \   00003D   7406         MOV       A,#0x6
   \   00003F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    654              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000049   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   12....       LCALL     ?Subroutine39 & 0xFFFF
    655              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_343:
   \   00005B   8882         MOV       DPL,R0
   \   00005D   8983         MOV       DPH,R1
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   EA           MOV       A,R2
   \   000066   240A         ADD       A,#0xa
   \   000068   FC           MOV       R4,A
   \   000069   E4           CLR       A
   \   00006A   3B           ADDC      A,R3
   \   00006B   FD           MOV       R5,A
   \   00006C   740C         MOV       A,#0xc
   \   00006E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    656              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   000071   8E82         MOV       DPL,R6
   \   000073   8F83         MOV       DPH,R7
   \   000075   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000078   C8           XCH       A,R0
   \   000079   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00007C   38           ADDC      A,R0
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   C0E0         PUSH      A
   \   000082   EA           MOV       A,R2
   \   000083   2416         ADD       A,#0x16
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   3B           ADDC      A,R3
   \   000089   F583         MOV       DPH,A
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
    657              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00008E   EE           MOV       A,R6
   \   00008F   240C         ADD       A,#0xc
   \   000091   F8           MOV       R0,A
   \   000092   E4           CLR       A
   \   000093   3F           ADDC      A,R7
   \   000094   F9           MOV       R1,A
   \   000095   8882         MOV       DPL,R0
   \   000097   8983         MOV       DPH,R1
   \   000099   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00009C   EA           MOV       A,R2
   \   00009D   2417         ADD       A,#0x17
   \   00009F   F582         MOV       DPL,A
   \   0000A1   E4           CLR       A
   \   0000A2   3B           ADDC      A,R3
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   EC           MOV       A,R4
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   ED           MOV       A,R5
   \   0000A9   12....       LCALL     ?Subroutine38 & 0xFFFF
    658              
    659          #ifdef BDB_REPORTING
    660              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
    661              {
    662                bdb_ProcessInConfigReportCmd(pCmd);
    663                return TRUE;          
    664              }
    665              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
    666              {
    667                bdb_ProcessInReadReportCfgCmd(pCmd);
    668                return TRUE;
    669              }
    670          #endif
    671              // Application will free the attrCmd buffer
    672              pInMsg->attrCmd = NULL;
    673          
    674              /* send message through task message */
    675              osal_msg_send( taskID, (uint8 *)pCmd );
   \                     ??CrossCallReturnLabel_51:
   \   0000AC                ; Setup parameters for call to function osal_msg_send
   \   0000AC   A9..         MOV       R1,?V0
   \   0000AE   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    676            }
    677          
    678            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000B1   7901         MOV       R1,#0x1
   \   0000B3   02....       LJMP      ?Subroutine4 & 0xFFFF
    679          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EC           MOV       A,R4
   \   000001                REQUIRE ??Subroutine194_0
   \   000001                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   ED           MOV       A,R5
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine225_0
   \   000002                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine226_0
   \   000002                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    680          #endif
    681          
    682          
    683          /*********************************************************************
    684           * @fn          zcl_getRawAFMsg
    685           *
    686           * @brief       Call to get original unprocessed AF message
    687           *              (not parsed by ZCL).
    688           *
    689           *   NOTE:  This function can only be called during a ZCL callback function
    690           *          and the calling function must NOT change any data in the message.
    691           *
    692           * @param       none
    693           *
    694           * @return      pointer to original AF message, NULL if not processing
    695           *              AF message.
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    698          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    699            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00000A   80..         SJMP      ?Subroutine0
    700          }
    701          
    702          /*********************************************************************
    703           * @fn          zcl_getParsedTransSeqNum
    704           *
    705           * @brief       Call to the get the transaction sequence number from
    706           *              the incoming message.
    707           *
    708           *   NOTE:  This function can only be called during a ZCL callback function
    709           *          and the calling function must NOT change any data in the message.
    710           *
    711           * @param       none
    712           *
    713           * @return      transaction sequence number.
    714           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    715          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    716          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    717            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0
    718          }
    719          
    720          /*********************************************************************
    721           * @fn          zcl_registerPlugin
    722           *
    723           * @brief       Add a Cluster Library handler
    724           *
    725           * @param       startClusterID - starting cluster ID
    726           * @param       endClusterID - ending cluster ID
    727           * @param       pfnHdlr - function pointer to incoming message handler
    728           *
    729           * @return      ZSuccess if OK
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    732                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    733          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    734            zclLibPlugin_t *pNewItem;
    735            zclLibPlugin_t *pLoop;
    736          
    737            // Fill in the new profile list
    738            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    739            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerPlugin_0
    740            {
    741              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   803E         SJMP      ??CrossCallReturnLabel_32
    742            }
    743          
    744            // Fill in the plugin record.
    745            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine152 & 0xFFFF
    746            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_333:
   \   00002E   12....       LCALL     ?Subroutine24 & 0xFFFF
    747            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_24:
   \   000031   12....       LCALL     ??Subroutine206_0 & 0xFFFF
    748            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \                     ??CrossCallReturnLabel_379:
   \   000034   740C         MOV       A,#0xc
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ??Subroutine218_0 & 0xFFFF
    749          
    750            // Find spot in list
    751            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_450:
   \   000043   90....       MOV       DPTR,#plugins
   \   000046   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000049   90....       MOV       DPTR,#plugins
   \   00004C   6011         JZ        ??zcl_registerPlugin_1
    752            {
    753              plugins = pNewItem;
    754            }
    755            else
    756            {
    757              // Look for end of list
    758              pLoop = plugins;
   \   00004E   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000051   8003         SJMP      ??zcl_registerPlugin_2
    759              while ( pLoop->next != NULL )
    760              {
    761                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   000053   EA           MOV       A,R2
   \   000054   FC           MOV       R4,A
   \   000055   EB           MOV       A,R3
    762              }
   \                     ??zcl_registerPlugin_2:
   \   000056   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000059   70F8         JNZ       ??zcl_registerPlugin_3
    763          
    764              // Put new item at end of list
    765              pLoop->next = pNewItem;
   \   00005B   8C82         MOV       DPL,R4
   \   00005D   8D83         MOV       DPH,R5
    766            }
   \                     ??zcl_registerPlugin_1:
   \   00005F   12....       LCALL     ?Subroutine28 & 0xFFFF
    767          
    768            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_32:
   \   000062   02....       LJMP      ?Subroutine4 & 0xFFFF
    769          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   E5..         MOV       A,?V1
   \   000002                REQUIRE ??Subroutine190_0
   \   000002                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   FD           MOV       R5,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine191_0
   \   000005                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   EE           MOV       A,R6
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EF           MOV       A,R7
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    770          
    771          #ifdef ZCL_DISCOVER
    772          /*********************************************************************
    773           * @fn          zcl_registerCmdList
    774           *
    775           * @brief       Register a Command List with ZCL Foundation
    776           *
    777           * @param       endpoint - endpoint the attribute list belongs to
    778           * @param       newCmdList - array of command records
    779           *
    780           * @return      ZSuccess if OK
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
   \                     zcl_registerCmdList:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    784            zclCmdRecsList_t *pNewItem;
    785            zclCmdRecsList_t *pLoop;
    786          
    787            // Fill in the new profile list
    788            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    789            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerCmdList_0
    790            {
    791              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8022         SJMP      ??CrossCallReturnLabel_33
    792            }
    793          
    794            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
   \                     ??zcl_registerCmdList_0:
   \   000024   12....       LCALL     ?Subroutine12 & 0xFFFF
    795            pNewItem->endpoint = endpoint;
    796            pNewItem->numCommands = cmdListSize;
    797            pNewItem->pCmdRecs = newCmdList;
    798          
    799            // Find spot in list
    800            if ( gpCmdList == NULL )
   \                     ??CrossCallReturnLabel_4:
   \   000027   90....       MOV       DPTR,#gpCmdList
   \   00002A   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00002D   90....       MOV       DPTR,#gpCmdList
   \   000030   6011         JZ        ??zcl_registerCmdList_1
    801            {
    802              gpCmdList = pNewItem;
    803            }
    804            else
    805            {
    806              // Look for end of list
    807              pLoop = gpCmdList;
   \   000032   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000035   8003         SJMP      ??zcl_registerCmdList_2
    808              while ( pLoop->pNext != NULL )
    809              {
    810                pLoop = pLoop->pNext;
   \                     ??zcl_registerCmdList_3:
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
    811              }
   \                     ??zcl_registerCmdList_2:
   \   00003A   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00003D   70F8         JNZ       ??zcl_registerCmdList_3
    812          
    813              // Put new item at end of list
    814              pLoop->pNext = pNewItem;
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
    815            }
   \                     ??zcl_registerCmdList_1:
   \   000043   12....       LCALL     ?Subroutine28 & 0xFFFF
    816          
    817            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_33:
   \   000046   02....       LJMP      ?Subroutine4 & 0xFFFF
    818          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000006   EE           MOV       A,R6
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EF           MOV       A,R7
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   E5..         MOV       A,?V0
   \   000010   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000013   22           RET
    819          #endif  // ZCL_DISCOVER
    820          
    821          /*********************************************************************
    822           * @fn          zcl_registerAttrList
    823           *
    824           * @brief       Register an Attribute List with ZCL Foundation
    825           *
    826           * @param       endpoint - endpoint the attribute list belongs to
    827           * @param       numAttr - number of attributes in list
    828           * @param       newAttrList - array of Attribute records.
    829           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    830           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    831           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    832           *
    833           * @return      ZSuccess if OK
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    836          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    837            zclAttrRecsList *pNewItem;
    838            zclAttrRecsList *pLoop;
    839          
    840            // Fill in the new profile list
    841            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    842            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerAttrList_0
    843            {
    844              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8030         SJMP      ??CrossCallReturnLabel_34
    845            }
    846          
    847            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000024   12....       LCALL     ?Subroutine148 & 0xFFFF
    848            pNewItem->endpoint = endpoint;
    849            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_264:
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ?Subroutine29 & 0xFFFF
    850            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_36:
   \   00002D   E5..         MOV       A,?V1
   \   00002F   12....       LCALL     ?Subroutine29 & 0xFFFF
    851            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_37:
   \   000032   12....       LCALL     ?Subroutine45 & 0xFFFF
    852          
    853            // Find spot in list
    854            if ( attrList == NULL )
   \                     ??CrossCallReturnLabel_383:
   \   000035   90....       MOV       DPTR,#attrList
   \   000038   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00003B   90....       MOV       DPTR,#attrList
   \   00003E   6011         JZ        ??zcl_registerAttrList_1
    855            {
    856              attrList = pNewItem;
    857            }
    858            else
    859            {
    860              // Look for end of list
    861              pLoop = attrList;
   \   000040   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000043   8003         SJMP      ??zcl_registerAttrList_2
    862              while ( pLoop->next != NULL )
    863              {
    864                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
    865              }
   \                     ??zcl_registerAttrList_2:
   \   000048   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00004B   70F8         JNZ       ??zcl_registerAttrList_3
    866          
    867              // Put new item at end of list
    868              pLoop->next = pNewItem;
   \   00004D   8C82         MOV       DPL,R4
   \   00004F   8D83         MOV       DPH,R5
    869            }
   \                     ??zcl_registerAttrList_1:
   \   000051   12....       LCALL     ?Subroutine28 & 0xFFFF
    870          
    871            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_34:
   \   000054   02....       LJMP      ?Subroutine4 & 0xFFFF
    872          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine206_0
   \   000001                ; // Fall through to label ??Subroutine206_0
    873          
    874          /*********************************************************************
    875           * @fn          zcl_registerClusterOptionList
    876           *
    877           * @brief       Register a Cluster Option List with ZCL Foundation
    878           *
    879           * @param       endpoint - endpoint the option list belongs to
    880           * @param       numOption - number of options in list
    881           * @param       optionList - array of cluster option records.
    882           *
    883           *              NOTE: This API should be called to enable 'Application
    884           *                    Link Key' security and/or 'APS ACK' for a specific
    885           *                    Cluster. The 'Application Link Key' is discarded
    886           *                    if security isn't enabled on the device.
    887           *                    The default behavior is 'Network Key' when security
    888           *                    is enabled and no 'APS ACK' for the ZCL messages.
    889           *
    890           * @return      ZSuccess if OK
    891           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    892          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    893          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    894            zclClusterOptionList *pNewItem;
    895            zclClusterOptionList *pLoop;
    896          
    897            // Fill in the new profile list
    898            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    899            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerClusterOptionList_0
    900            {
    901              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8022         SJMP      ??CrossCallReturnLabel_35
    902            }
    903          
    904            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000024   12....       LCALL     ?Subroutine12 & 0xFFFF
    905            pNewItem->endpoint = endpoint;
    906            pNewItem->numOptions = numOption;
    907            pNewItem->options = optionList;
    908          
    909            // Find spot in list
    910            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_5:
   \   000027   90....       MOV       DPTR,#clusterOptionList
   \   00002A   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00002D   90....       MOV       DPTR,#clusterOptionList
   \   000030   6011         JZ        ??zcl_registerClusterOptionList_1
    911            {
    912              clusterOptionList = pNewItem;
    913            }
    914            else
    915            {
    916              // Look for end of list
    917              pLoop = clusterOptionList;
   \   000032   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000035   8003         SJMP      ??zcl_registerClusterOptionList_2
    918              while ( pLoop->next != NULL )
    919              {
    920                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
    921              }
   \                     ??zcl_registerClusterOptionList_2:
   \   00003A   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00003D   70F8         JNZ       ??zcl_registerClusterOptionList_3
    922          
    923              // Put new item at end of list
    924              pLoop->next = pNewItem;
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
    925            }
   \                     ??zcl_registerClusterOptionList_1:
   \   000043   12....       LCALL     ?Subroutine28 & 0xFFFF
    926          
    927            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_35:
   \   000046   02....       LJMP      ?Subroutine4 & 0xFFFF
    928          }
    929          
    930          /*********************************************************************
    931           * @fn          zcl_registerValidateAttrData
    932           *
    933           * @brief       Add a validation function for attribute data
    934           *
    935           * @param       pfnValidateAttrData - function pointer to validate routine
    936           *
    937           * @return      ZSuccess if OK
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    940          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    941            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL     ??Subroutine218_0 & 0xFFFF
    942          
    943            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_451:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   02....       LJMP      ?Subroutine0 & 0xFFFF
    944          }
    945          
    946          /*********************************************************************
    947           * @fn          zcl_registerReadWriteCB
    948           *
    949           * @brief       Register the application's callback function to read/write
    950           *              attribute data, and authorize read/write operation.
    951           *
    952           *              Note: The pfnReadWriteCB callback function is only required
    953           *                    when the attribute data format is unknown to ZCL. The
    954           *                    callback function gets called when the pointer 'dataPtr'
    955           *                    to the attribute value is NULL in the attribute database
    956           *                    registered with the ZCL.
    957           *
    958           *              Note: The pfnAuthorizeCB callback function is only required
    959           *                    when the Read/Write operation on an attribute requires
    960           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
    961           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
    962           *
    963           * @param       endpoint - application's endpoint
    964           * @param       pfnReadWriteCB - function pointer to read/write routine
    965           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
    966           *
    967           * @return      ZSuccess if successful. ZFailure, otherwise.
    968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    969          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
    970                                             zclAuthorizeCB_t pfnAuthorizeCB )
    971          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    972            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   A8..         MOV       R0,?V4
   \   000016   A9..         MOV       R1,?V5
    973          
    974            if ( pRec != NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   600F         JZ        ??zcl_registerReadWriteCB_0
    975            {
    976              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   A3           INC       DPTR
   \   000021   12....       LCALL     ?Subroutine24 & 0xFFFF
    977              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_25:
   \   000024   12....       LCALL     ?Subroutine45 & 0xFFFF
    978          
    979              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_384:
   \   000027   7900         MOV       R1,#0x0
   \   000029   8002         SJMP      ??zcl_registerReadWriteCB_1
    980            }
    981          
    982            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   00002B   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   00002D   02....       LJMP      ??Subroutine207_0 & 0xFFFF
    983          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    984          
    985          /*********************************************************************
    986           * @fn      zcl_DeviceOperational
    987           *
    988           * @brief   Used to see whether or not the device can send or respond
    989           *          to application level commands.
    990           *
    991           * @param   srcEP - source endpoint
    992           * @param   clusterID - cluster ID
    993           * @param   frameType - command type
    994           * @param   cmd - command ID
    995           *
    996           * @return  TRUE if device is operational, FALSE otherwise
    997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    998          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
    999                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   1001            zclAttrRec_t attrRec;
   1002            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   1003          
   1004            (void)profileID;  // Intentionally unreferenced parameter
   1005          
   1006            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1007            // cannot send or respond to application level commands, other than commands
   1008            // to read or write attributes. Note that the Identify cluster cannot be
   1009            // disabled, and remains functional regardless of this setting.
   1010            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000017   EC           MOV       A,R4
   \   000018   7006         JNZ       ??zcl_DeviceOperational_0
   \   00001A   EF           MOV       A,R7
   \   00001B   C3           CLR       C
   \   00001C   9406         SUBB      A,#0x6
   \   00001E   4050         JC        ??zcl_DeviceOperational_1
   1011            {
   1012              return ( TRUE );
   1013            }
   1014          
   1015            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV       A,#0x3
   \   000022   6A           XRL       A,R2
   \   000023   4B           ORL       A,R3
   \   000024   604A         JZ        ??zcl_DeviceOperational_1
   1016            {
   1017              return ( TRUE );
   1018            }
   1019          
   1020            // Is device enabled?
   1021            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1022                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000026                ; Setup parameters for call to function zclFindAttrRec
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP100_8
   \   00002B   88..         MOV       ?V2,R0
   \   00002D   89..         MOV       ?V3,R1
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7C12         MOV       R4,#0x12
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   601C         JZ        ??zcl_DeviceOperational_2
   1023            {
   1024          #ifdef ZCL_READ
   1025              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000049                ; Setup parameters for call to function zclReadAttrData
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   F5..         MOV       ?V3,A
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?XSTACK_DISP102_8
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   1026          #endif
   1027            }
   1028          
   1029            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6401         XRL       A,#0x1
   \   00006E   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   000070   7901         MOV       R1,#0x1
   \   000072   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   000074   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000076   7409         MOV       A,#0x9
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B                REQUIRE ?Subroutine4
   \   00007B                ; // Fall through to label ?Subroutine4
   1030          }
   1031          
   1032          /*********************************************************************
   1033           * @fn      zcl_SendCommand
   1034           *
   1035           * @brief   Used to send Profile and Cluster Specific Command messages.
   1036           *
   1037           *          NOTE: The calling application is responsible for incrementing
   1038           *                the Sequence Number.
   1039           *
   1040           * @param   srcEp - source endpoint
   1041           * @param   destAddr - destination address
   1042           * @param   clusterID - cluster ID
   1043           * @param   cmd - command ID
   1044           * @param   specific - whether the command is Cluster Specific
   1045           * @param   direction - client/server direction of the command
   1046           * @param   disableDefaultRsp - disable Default Response command
   1047           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1048           * @param   seqNumber - identification number for the transaction
   1049           * @param   cmdFormatLen - length of the command to be sent
   1050           * @param   cmdFormat - command to be sent
   1051           *
   1052           * @return  ZSuccess if OK
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1055                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1056                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1057                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1058          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   00001A   8C..         MOV       ?V4,R4
   \   00001C   8D..         MOV       ?V5,R5
   1059            endPointDesc_t *epDesc;
   1060            zclFrameHdr_t hdr;
   1061            uint8 *msgBuf;
   1062            uint16 msgLen;
   1063            uint8 *pBuf;
   1064            uint8 options;
   1065            ZStatus_t status;
   1066          
   1067            epDesc = afFindEndPointDesc( srcEP );
   \   00001E                ; Setup parameters for call to function afFindEndPointDesc
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000029   7407         MOV       A,#0x7
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   1068            if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_453:
   \   000031   7407         MOV       A,#0x7
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000039   7005         JNZ       ??zcl_SendCommand_0
   1069            {
   1070              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   00003B   7902         MOV       R1,#0x2
   \   00003D   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1071            }
   1072          
   1073          #if defined ( INTER_PAN )
   1074            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   1075            {
   1076              options = AF_TX_OPTIONS_NONE;
   1077            }
   1078            else
   1079          #endif
   1080            {
   1081              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_0:
   \   000040                ; Setup parameters for call to function zclGetClusterOption
   \   000040   AA..         MOV       R2,?V4
   \   000042   AB..         MOV       R3,?V5
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00004F   E9           MOV       A,R1
   \   000050   F5..         MOV       ?V3,A
   1082          
   1083              // The cluster might not have been defined to use security but if this message
   1084              // is in response to another message that was using APS security this message
   1085              // will be sent with APS security
   1086              if ( !( options & AF_EN_SECURITY ) )
   \   000052   A2E6         MOV       C,0xE0 /* A   */.6
   \   000054   401C         JC        ??zcl_SendCommand_2
   1087              {
   1088                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000056   90....       MOV       DPTR,#rawAFMsg
   \   000059   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   1089          
   1090                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \                     ??CrossCallReturnLabel_419:
   \   00005C   6014         JZ        ??zcl_SendCommand_2
   \   00005E   E8           MOV       A,R0
   \   00005F   2419         ADD       A,#0x19
   \   000061   F582         MOV       DPL,A
   \   000063   E4           CLR       A
   \   000064   39           ADDC      A,R1
   \   000065   F583         MOV       DPH,A
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6401         XRL       A,#0x1
   \   00006A   7006         JNZ       ??zcl_SendCommand_2
   1091                {
   1092                  options |= AF_EN_SECURITY;
   \   00006C   E5..         MOV       A,?V3
   \   00006E   D2E6         SETB      0xE0 /* A   */.6
   \   000070   F5..         MOV       ?V3,A
   1093                }
   1094              }
   1095            }
   1096          
   1097            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_2:
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C06         MOV       R4,#0x6
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7900         MOV       R1,#0x0
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP101_8
   \   00007D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1098          
   1099            // Not Profile wide command (like READ, WRITE)
   1100            if ( specific )
   \   000080   741C         MOV       A,#0x1c
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   600D         JZ        ??zcl_SendCommand_3
   1101            {
   1102              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   54FC         ANL       A,#0xfc
   \   000090   F0           MOVX      @DPTR,A
   \   000091   4401         ORL       A,#0x1
   \   000093   8008         SJMP      ??zcl_SendCommand_4
   1103            }
   1104            else
   1105            {
   1106              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_3:
   \   000095   7401         MOV       A,#0x1
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   54FC         ANL       A,#0xfc
   \                     ??zcl_SendCommand_4:
   \   00009D   F0           MOVX      @DPTR,A
   1107            }
   1108          
   1109            if ( ( epDesc->simpleDesc == NULL ) ||
   1110                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1111                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \   00009E   7407         MOV       A,#0x7
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000A6   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   0000A9   6030         JZ        ??zcl_SendCommand_5
   \   0000AB   741B         MOV       A,#0x1b
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   FE           MOV       R6,A
   \   0000B2                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   8983         MOV       DPH,R1
   \   0000B6   A3           INC       DPTR
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FD           MOV       R5,A
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   5403         ANL       A,#0x3
   \   0000C4   FC           MOV       R4,A
   \   0000C5   AA..         MOV       R2,?V4
   \   0000C7   AB..         MOV       R3,?V5
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F9           MOV       R1,A
   \   0000D0   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV       A,R1
   \   0000D9   7005         JNZ       ??zcl_SendCommand_6
   1112            {
   1113              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_5:
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1114            }
   \                     ??zcl_SendCommand_6:
   \   0000E0   741F         MOV       A,#0x1f
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   1115          
   1116            // Fill in the Maufacturer Code
   1117            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_420:
   \   0000E8   6011         JZ        ??CrossCallReturnLabel_473
   1118            {
   1119              hdr.fc.manuSpecific = 1;
   \   0000EA   7401         MOV       A,#0x1
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   4404         ORL       A,#0x4
   \   0000F2   F0           MOVX      @DPTR,A
   1120              hdr.manuCode = manuCode;
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   1121            }
   1122          
   1123            // Set the Command Direction
   1124            if ( direction )
   \                     ??CrossCallReturnLabel_473:
   \   0000FB   741D         MOV       A,#0x1d
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   E0           MOVX      A,@DPTR
   \   000101   600A         JZ        ??zcl_SendCommand_7
   1125            {
   1126              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000103   7401         MOV       A,#0x1
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   4408         ORL       A,#0x8
   \   00010B   8008         SJMP      ??zcl_SendCommand_8
   1127            }
   1128            else
   1129            {
   1130              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_7:
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   E0           MOVX      A,@DPTR
   \   000113   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_8:
   \   000115   F0           MOVX      @DPTR,A
   1131            }
   1132          
   1133            // Set the Disable Default Response field
   1134            if ( disableDefaultRsp )
   \   000116   741E         MOV       A,#0x1e
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   600A         JZ        ??zcl_SendCommand_9
   1135            {
   1136              hdr.fc.disableDefaultRsp = 1;
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   4410         ORL       A,#0x10
   \   000126   8008         SJMP      ??zcl_SendCommand_10
   1137            }
   1138            else
   1139            {
   1140              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_9:
   \   000128   7401         MOV       A,#0x1
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_10:
   \   000130   F0           MOVX      @DPTR,A
   1141            }
   1142          
   1143            // Fill in the Transaction Sequence Number
   1144            hdr.transSeqNum = seqNum;
   \   000131   7421         MOV       A,#0x21
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   E0           MOVX      A,@DPTR
   \   000137   C0E0         PUSH      A
   \   000139   7405         MOV       A,#0x5
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   D0E0         POP       A
   \   000140   F0           MOVX      @DPTR,A
   1145          
   1146            // Fill in the command
   1147            hdr.commandID = cmd;
   \   000141   7406         MOV       A,#0x6
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   EE           MOV       A,R6
   \   000147   F0           MOVX      @DPTR,A
   1148          
   1149            // calculate the needed buffer size
   1150            msgLen = zclCalcHdrSize( &hdr );
   \   000148   7803         MOV       R0,#0x3
   \   00014A   7401         MOV       A,#0x1
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   5404         ANL       A,#0x4
   \   000152   6002         JZ        ??zcl_SendCommand_11
   \   000154   7805         MOV       R0,#0x5
   1151            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_11:
   \   000156   7422         MOV       A,#0x22
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   28           ADD       A,R0
   \   00015D   FE           MOV       R6,A
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   3400         ADDC      A,#0x0
   \   000162   FF           MOV       R7,A
   1152          
   1153            // Allocate the buffer needed
   1154            msgBuf = zcl_mem_alloc( msgLen );
   \   000163                ; Setup parameters for call to function osal_mem_alloc
   \   000163   EE           MOV       A,R6
   \   000164   FA           MOV       R2,A
   \   000165   EF           MOV       A,R7
   \   000166   FB           MOV       R3,A
   \   000167   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00016A   8A..         MOV       ?V6,R2
   \   00016C   8B..         MOV       ?V7,R3
   1155            if ( msgBuf != NULL )
   \   00016E   EA           MOV       A,R2
   \   00016F   45..         ORL       A,?V7
   \   000171   6072         JZ        ??zcl_SendCommand_12
   1156            {
   1157              // Fill in the ZCL Header
   1158              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   000173                ; Setup parameters for call to function zclBuildHdr
   \   000173   AC..         MOV       R4,?V6
   \   000175   AD..         MOV       R5,?V7
   \   000177   7401         MOV       A,#0x1
   \   000179   12....       LCALL     ?XSTACK_DISP101_8
   \   00017C   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1159          
   1160              // Fill in the command frame
   1161              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   00017F                ; Setup parameters for call to function osal_memcpy
   \   00017F   7424         MOV       A,#0x24
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018A   7425         MOV       A,#0x25
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000192   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000195   7403         MOV       A,#0x3
   \   000197   12....       LCALL     ?DEALLOC_XSTACK8
   1162          
   1163              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1164                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );
   \   00019A                ; Setup parameters for call to function AF_DataRequest
   \   00019A   75..1E       MOV       ?V0,#0x1e
   \   00019D   78..         MOV       R0,#?V0
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A2   75....       MOV       ?V0,#zcl_TransID & 0xff
   \   0001A5   75....       MOV       ?V1,#(zcl_TransID >> 8) & 0xff
   \   0001A8   78..         MOV       R0,#?V0
   \   0001AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AD   78..         MOV       R0,#?V6
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B2   8E..         MOV       ?V0,R6
   \   0001B4   8F..         MOV       ?V1,R7
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BB   78..         MOV       R0,#?V4
   \   0001BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C0   A9..         MOV       R1,?V3
   \   0001C2   7410         MOV       A,#0x10
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   0001CA   7412         MOV       A,#0x12
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   0001D2   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001D5   7409         MOV       A,#0x9
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DA   E9           MOV       A,R1
   \   0001DB   FE           MOV       R6,A
   1165              zcl_mem_free ( msgBuf );
   \   0001DC                ; Setup parameters for call to function osal_mem_free
   \   0001DC   AA..         MOV       R2,?V6
   \   0001DE   AB..         MOV       R3,?V7
   \   0001E0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E3   8002         SJMP      ??zcl_SendCommand_13
   1166            }
   1167            else
   1168            {
   1169              status = ZMemError;
   \                     ??zcl_SendCommand_12:
   \   0001E5   7E10         MOV       R6,#0x10
   1170            }
   1171          
   1172            return ( status );
   \                     ??zcl_SendCommand_13:
   \   0001E7   EE           MOV       A,R6
   \   0001E8   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001E9   740B         MOV       A,#0xb
   \   0001EB   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   1173          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine214_0
   \   000002                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   000003   22           RET
   1174          
   1175          #ifdef ZCL_READ
   1176          /*********************************************************************
   1177           * @fn      zcl_SendRead
   1178           *
   1179           * @brief   Send a Read command
   1180           *
   1181           * @param   srcEP - Application's endpoint
   1182           * @param   dstAddr - destination address
   1183           * @param   clusterID - cluster ID
   1184           * @param   readCmd - read command to be sent
   1185           * @param   direction - direction of the command
   1186           * @param   seqNum - transaction sequence number
   1187           *
   1188           * @return  ZSuccess if OK
   1189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1191                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1192                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00001B   89..         MOV       ?V6,R1
   \   00001D   7413         MOV       A,#0x13
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   1194            uint16 dataLen;
   1195            uint8 *buf;
   1196            uint8 *pBuf;
   1197            ZStatus_t status;
   1198          
   1199            dataLen = readCmd->numAttr * 2; // Attribute ID
   \                     ??CrossCallReturnLabel_552:
   \   000025   85..82       MOV       DPL,?V2
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   25E0         ADD       A,0xE0 /* A   */
   \   00002D   FE           MOV       R6,A
   \   00002E   E4           CLR       A
   \   00002F   33           RLC       A
   \   000030   FF           MOV       R7,A
   1200          
   1201            buf = zcl_mem_alloc( dataLen );
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   EE           MOV       A,R6
   \   000032   FA           MOV       R2,A
   \   000033   EF           MOV       A,R7
   \   000034   FB           MOV       R3,A
   \   000035   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   1202            if ( buf != NULL )
   \   00003C   EA           MOV       A,R2
   \   00003D   45..         ORL       A,?V1
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1203            {
   1204              uint8 i;
   1205          
   1206              // Load the buffer - serially
   1207              pBuf = buf;
   \   000044   A8..         MOV       R0,?V0
   \   000046   A9..         MOV       R1,?V1
   1208              for (i = 0; i < readCmd->numAttr; i++)
   \   000048   7C00         MOV       R4,#0x0
   \   00004A   8023         SJMP      ??zcl_SendRead_1
   1209              {
   1210                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   00004C   EC           MOV       A,R4
   \   00004D   25E0         ADD       A,0xE0 /* A   */
   \   00004F   FA           MOV       R2,A
   \   000050   E4           CLR       A
   \   000051   33           RLC       A
   \   000052   FB           MOV       R3,A
   \   000053   E5..         MOV       A,?V2
   \   000055   2A           ADD       A,R2
   \   000056   F582         MOV       DPL,A
   \   000058   E5..         MOV       A,?V3
   \   00005A   12....       LCALL     ?Subroutine140 & 0xFFFF
   1211                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1212              }
   \                     ??CrossCallReturnLabel_248:
   \   00005D   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000060   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000063   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000066   F0           MOVX      @DPTR,A
   \   000067   E8           MOV       A,R0
   \   000068   2402         ADD       A,#0x2
   \   00006A   F8           MOV       R0,A
   \   00006B   5001         JNC       ??zcl_SendRead_3
   \   00006D   09           INC       R1
   \                     ??zcl_SendRead_3:
   \   00006E   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   00006F   85..82       MOV       DPL,?V2
   \   000072   85..83       MOV       DPH,?V3
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   EC           MOV       A,R4
   \   000078   C3           CLR       C
   \   000079   9A           SUBB      A,R2
   \   00007A   40D0         JC        ??zcl_SendRead_2
   1213          
   1214              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1215                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007C                ; Setup parameters for call to function zcl_SendCommand
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   8E..         MOV       ?V2,R6
   \   000083   8F..         MOV       ?V3,R7
   \   000085   78..         MOV       R0,#?V2
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   741B         MOV       A,#0x1b
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V2,A
   \   000098   F5..         MOV       ?V3,A
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   741D         MOV       A,#0x1d
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   741D         MOV       A,#0x1d
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   75..00       MOV       ?V2,#0x0
   \   0000B8   78..         MOV       R0,#?V2
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BD   78..         MOV       R0,#?V2
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   740B         MOV       A,#0xb
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   0000CA   740D         MOV       A,#0xd
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000D2   A9..         MOV       R1,?V6
   \   0000D4   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D7   740B         MOV       A,#0xb
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV       A,R1
   \   0000DD   FE           MOV       R6,A
   1216              zcl_mem_free( buf );
   \   0000DE                ; Setup parameters for call to function osal_mem_free
   \   0000DE   AA..         MOV       R2,?V0
   \   0000E0   AB..         MOV       R3,?V1
   \   0000E2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E5   8002         SJMP      ??zcl_SendRead_4
   1217            }
   1218            else
   1219            {
   1220              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000E7   7E10         MOV       R6,#0x10
   1221            }
   1222          
   1223            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000E9   EE           MOV       A,R6
   \   0000EA   F9           MOV       R1,A
   \   0000EB   7404         MOV       A,#0x4
   \   0000ED   02....       LJMP      ??Subroutine245_0 & 0xFFFF
   1224          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   3B           ADDC      A,R3
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   AA82         MOV       R2,DPL
   \   000006   AB83         MOV       R3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine246_0
   \   000003                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1225          
   1226          /*********************************************************************
   1227           * @fn      zcl_SendReadRsp
   1228           *
   1229           * @brief   Send a Read Response command.
   1230           *
   1231           * @param   srcEP - Application's endpoint
   1232           * @param   dstAddr - destination address
   1233           * @param   clusterID - cluster ID
   1234           * @param   readRspCmd - read response command to be sent
   1235           * @param   direction - direction of the command
   1236           * @param   seqNum - transaction sequence number
   1237           *
   1238           * @return  ZSuccess if OK
   1239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1240          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1241                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1242                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1243          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine19 & 0xFFFF
   1244            uint8 *buf;
   1245            uint16 len = 0;
   \                     ??CrossCallReturnLabel_16:
   \   000012   7E00         MOV       R6,#0x0
   \   000014   7F00         MOV       R7,#0x0
   1246            ZStatus_t status;
   1247            uint8 i;
   1248          
   1249            // calculate the size of the command
   1250            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000016   75..00       MOV       ?V2,#0x0
   \   000019   801A         SJMP      ??zcl_SendReadRsp_0
   1251            {
   1252              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1253          
   1254              len += 2 + 1; // Attribute ID + Status
   1255          
   1256              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1257              {
   1258                len++; // Attribute Data Type length
   1259          
   1260                // Attribute Data length
   1261                if ( statusRec->data != NULL )
   1262                {
   1263                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1264                }
   1265                else
   1266                {
   1267                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   00001B                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00001B   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   1268                }
   \                     ??CrossCallReturnLabel_512:
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000027   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   00002A   8B..         MOV       ?V1,R3
   \   00002C   EE           MOV       A,R6
   \   00002D   2A           ADD       A,R2
   \   00002E   FE           MOV       R6,A
   \   00002F   EF           MOV       A,R7
   \   000030   35..         ADDC      A,?V1
   \   000032   FF           MOV       R7,A
   \                     ??zcl_SendReadRsp_3:
   \   000033   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000035   7416         MOV       A,#0x16
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00003D   5041         JNC       ??zcl_SendReadRsp_4
   \   00003F   E5..         MOV       A,?V2
   \   000041   75F006       MOV       B,#0x6
   \   000044   A4           MUL       AB
   \   000045   F8           MOV       R0,A
   \   000046   A9F0         MOV       R1,B
   \   000048   7416         MOV       A,#0x16
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000050   A882         MOV       R0,DPL
   \   000052   A983         MOV       R1,DPH
   \   000054   EE           MOV       A,R6
   \   000055   2403         ADD       A,#0x3
   \   000057   FE           MOV       R6,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   FF           MOV       R7,A
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   70D3         JNZ       ??zcl_SendReadRsp_3
   \   000060   0E           INC       R6
   \   000061   EE           MOV       A,R6
   \   000062   7001         JNZ       ??zcl_SendReadRsp_5
   \   000064   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   000065   8882         MOV       DPL,R0
   \   000067   8983         MOV       DPH,R1
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000070   8882         MOV       DPL,R0
   \   000072   8983         MOV       DPH,R1
   \   000074   60A5         JZ        ??zcl_SendReadRsp_1
   \   000076                ; Setup parameters for call to function zclGetAttrDataLength
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00007E   80AA         SJMP      ??zcl_SendReadRsp_2
   1269              }
   1270            }
   1271          
   1272            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   000080                ; Setup parameters for call to function osal_mem_alloc
   \   000080   EE           MOV       A,R6
   \   000081   FA           MOV       R2,A
   \   000082   EF           MOV       A,R7
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000087   8A..         MOV       ?V0,R2
   \   000089   8B..         MOV       ?V1,R3
   \   00008B   8A..         MOV       ?V6,R2
   \   00008D   8B..         MOV       ?V7,R3
   1273            if ( buf != NULL )
   \   00008F   EA           MOV       A,R2
   \   000090   45..         ORL       A,?V7
   \   000092   7003         JNZ       $+5
   \   000094   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1274            {
   1275              // Load the buffer - serially
   1276              uint8 *pBuf = buf;
   1277          
   1278              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000097   75..00       MOV       ?V2,#0x0
   \   00009A   803C         SJMP      ??zcl_SendReadRsp_7
   1279              {
   1280                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1281          
   1282                *pBuf++ = LO_UINT16( statusRec->attrID );
   1283                *pBuf++ = HI_UINT16( statusRec->attrID );
   1284                *pBuf++ = statusRec->status;
   1285          
   1286                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1287                {
   1288                  *pBuf++ = statusRec->dataType;
   1289          
   1290                  if ( statusRec->data != NULL )
   1291                  {
   1292                    // Copy attribute data to the buffer to be sent out
   1293                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1294                  }
   1295                  else
   1296                  {
   1297                    uint16 dataLen;
   1298          
   1299                    // Read attribute data directly into the buffer to be sent out
   1300                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   00009C                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A1   88..         MOV       ?V4,R0
   \   0000A3   89..         MOV       ?V5,R1
   \   0000A5   78..         MOV       R0,#?V4
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   8A82         MOV       DPL,R2
   \   0000B1   8B83         MOV       DPH,R3
   \   0000B3   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000BC   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0000BF   7404         MOV       A,#0x4
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   1301                    pBuf += dataLen;
   \   0000C4   7402         MOV       A,#0x2
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   1302                  }
   \                     ??CrossCallReturnLabel_559:
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   28           ADD       A,R0
   \   0000CF   F5..         MOV       ?V0,A
   \   0000D1   E5..         MOV       A,?V1
   \   0000D3   39           ADDC      A,R1
   \   0000D4   F5..         MOV       ?V1,A
   \                     ??zcl_SendReadRsp_9:
   \   0000D6   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000D8   7416         MOV       A,#0x16
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   0000E0   507C         JNC       ??zcl_SendReadRsp_10
   \   0000E2   E5..         MOV       A,?V2
   \   0000E4   75F006       MOV       B,#0x6
   \   0000E7   A4           MUL       AB
   \   0000E8   F8           MOV       R0,A
   \   0000E9   A9F0         MOV       R1,B
   \   0000EB   7416         MOV       A,#0x16
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0000F3   85..82       MOV       DPL,?V0
   \   0000F6   85..83       MOV       DPH,?V1
   \   0000F9   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000FC   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000103   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000106   F0           MOVX      @DPTR,A
   \   000107   E5..         MOV       A,?V0
   \   000109   2403         ADD       A,#0x3
   \   00010B   F5..         MOV       ?V0,A
   \   00010D   5002         JNC       ??zcl_SendReadRsp_11
   \   00010F   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   000111   8882         MOV       DPL,R0
   \   000113   8983         MOV       DPH,R1
   \   000115   E0           MOVX      A,@DPTR
   \   000116   70BE         JNZ       ??zcl_SendReadRsp_9
   \   000118   EA           MOV       A,R2
   \   000119   2403         ADD       A,#0x3
   \   00011B   08           INC       R0
   \   00011C   E4           CLR       A
   \   00011D   3B           ADDC      A,R3
   \   00011E   F9           MOV       R1,A
   \   00011F   8882         MOV       DPL,R0
   \   000121   8983         MOV       DPH,R1
   \   000123   E0           MOVX      A,@DPTR
   \   000124   85..82       MOV       DPL,?V0
   \   000127   85..83       MOV       DPH,?V1
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   8582..       MOV       ?V0,DPL
   \   00012F   8583..       MOV       ?V1,DPH
   \   000132   8A82         MOV       DPL,R2
   \   000134   8B83         MOV       DPH,R3
   \   000136   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000139   8C82         MOV       DPL,R4
   \   00013B   8D83         MOV       DPH,R5
   \   00013D   E582         MOV       A,DPL
   \   00013F   4583         ORL       A,DPH
   \   000141   7003         JNZ       $+5
   \   000143   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   000146                ; Setup parameters for call to function zclSerializeData
   \   000146   AC..         MOV       R4,?V0
   \   000148   AD..         MOV       R5,?V1
   \   00014A   AA82         MOV       R2,DPL
   \   00014C   AB83         MOV       R3,DPH
   \   00014E   8882         MOV       DPL,R0
   \   000150   8983         MOV       DPH,R1
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F9           MOV       R1,A
   \   000154   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000157   8A..         MOV       ?V0,R2
   \   000159   8B..         MOV       ?V1,R3
   \   00015B   02....       LJMP      ??zcl_SendReadRsp_9 & 0xFFFF
   1303                }
   1304              } // for loop
   1305          
   1306              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1307                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   00015E                ; Setup parameters for call to function zcl_SendCommand
   \   00015E   78..         MOV       R0,#?V6
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000163   8E..         MOV       ?V0,R6
   \   000165   8F..         MOV       ?V1,R7
   \   000167   78..         MOV       R0,#?V0
   \   000169   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016C   741E         MOV       A,#0x1e
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000174   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000177   E4           CLR       A
   \   000178   F5..         MOV       ?V0,A
   \   00017A   F5..         MOV       ?V1,A
   \   00017C   78..         MOV       R0,#?V0
   \   00017E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000181   7420         MOV       A,#0x20
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018C   7420         MOV       A,#0x20
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000197   75..00       MOV       ?V0,#0x0
   \   00019A   78..         MOV       R0,#?V0
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019F   75..01       MOV       ?V0,#0x1
   \   0001A2   78..         MOV       R0,#?V0
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   740B         MOV       A,#0xb
   \   0001A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AC   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   0001AF   740F         MOV       A,#0xf
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0001B7   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001BA   740B         MOV       A,#0xb
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BF   E9           MOV       A,R1
   \   0001C0   FE           MOV       R6,A
   1308              zcl_mem_free( buf );
   \   0001C1                ; Setup parameters for call to function osal_mem_free
   \   0001C1   AA..         MOV       R2,?V6
   \   0001C3   AB..         MOV       R3,?V7
   \   0001C5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C8   8002         SJMP      ??zcl_SendReadRsp_12
   1309            }
   1310            else
   1311            {
   1312              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   0001CA   7E10         MOV       R6,#0x10
   1313            }
   1314          
   1315            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   0001CC   EE           MOV       A,R6
   \   0001CD   F9           MOV       R1,A
   \   0001CE   02....       LJMP      ??Subroutine195_0 & 0xFFFF
   1316          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000003   F8           MOV       R0,A
   \   000004   E5..         MOV       A,?V2
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   A9..         MOV       R1,?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EC           MOV       A,R4
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   ED           MOV       A,R5
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   89..         MOV       ?V3,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   7406         MOV       A,#0x6
   \   000002                REQUIRE ??Subroutine196_0
   \   000002                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   AA82         MOV       R2,DPL
   \   000005   AB83         MOV       R3,DPH
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000003   22           RET
   1317          #endif // ZCL_READ
   1318          
   1319          #ifdef ZCL_WRITE
   1320          /*********************************************************************
   1321           * @fn      sendWriteRequest
   1322           *
   1323           * @brief   Send a Write command
   1324           *
   1325           * @param   dstAddr - destination address
   1326           * @param   clusterID - cluster ID
   1327           * @param   writeCmd - write command to be sent
   1328           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1329           * @param   direction - direction of the command
   1330           * @param   seqNum - transaction sequence number
   1331           *
   1332           * @return  ZSuccess if OK
   1333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1334          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1335                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1336                                          uint8 disableDefaultRsp, uint8 seqNum )
   1337          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine39 & 0xFFFF
   1338            uint8 *buf;
   1339            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_345:
   \   000020   7E00         MOV       R6,#0x0
   \   000022   7F00         MOV       R7,#0x0
   1340            ZStatus_t status;
   1341            uint8 i;
   1342          
   1343            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000024   75..00       MOV       ?V0,#0x0
   \   000027   7415         MOV       A,#0x15
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00002F   8024         SJMP      ??zcl_SendWriteRequest_0
   1344            {
   1345              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   000031   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000034   A882         MOV       R0,DPL
   \   000036   A983         MOV       R1,DPH
   1346          
   1347              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1348          
   1349              // Attribute Data
   1350              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \   000038                ; Setup parameters for call to function zclGetAttrDataLength
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine67 & 0xFFFF
   1351            }
   \                     ??CrossCallReturnLabel_115:
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000043   8B..         MOV       ?V3,R3
   \   000045   EA           MOV       A,R2
   \   000046   2403         ADD       A,#0x3
   \   000048   F8           MOV       R0,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V3
   \   00004C   F9           MOV       R1,A
   \   00004D   EE           MOV       A,R6
   \   00004E   28           ADD       A,R0
   \   00004F   FE           MOV       R6,A
   \   000050   EF           MOV       A,R7
   \   000051   39           ADDC      A,R1
   \   000052   FF           MOV       R7,A
   \   000053   05..         INC       ?V0
   \                     ??zcl_SendWriteRequest_0:
   \   000055   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_681:
   \   000058   40D7         JC        ??zcl_SendWriteRequest_1
   1352          
   1353            buf = zcl_mem_alloc( dataLen );
   \   00005A                ; Setup parameters for call to function osal_mem_alloc
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV       ?V2,R2
   \   000063   8B..         MOV       ?V3,R3
   1354            if ( buf != NULL )
   \   000065   EA           MOV       A,R2
   \   000066   45..         ORL       A,?V3
   \   000068   7003         JNZ       $+5
   \   00006A   02....       LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
   1355            {
   1356              // Load the buffer - serially
   1357              uint8 *pBuf = buf;
   1358              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   00006D   75..00       MOV       ?V0,#0x0
   \   000070   8039         SJMP      ??zcl_SendWriteRequest_3
   1359              {
   1360                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_4:
   \   000072   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000075   8582..       MOV       ?V4,DPL
   \   000078   8583..       MOV       ?V5,DPH
   1361          
   1362                *pBuf++ = LO_UINT16( statusRec->attrID );
   \   00007B   12....       LCALL     ?Subroutine22 & 0xFFFF
   1363                *pBuf++ = HI_UINT16( statusRec->attrID );
   1364                *pBuf++ = statusRec->dataType;
   \                     ??CrossCallReturnLabel_20:
   \   00007E   E5..         MOV       A,?V4
   \   000080   2402         ADD       A,#0x2
   \   000082   F8           MOV       R0,A
   \   000083   E4           CLR       A
   \   000084   35..         ADDC      A,?V5
   \   000086   F9           MOV       R1,A
   \   000087   8882         MOV       DPL,R0
   \   000089   8983         MOV       DPH,R1
   \   00008B   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00008E   A3           INC       DPTR
   \   00008F   F0           MOVX      @DPTR,A
   1365          
   1366                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   \   000090                ; Setup parameters for call to function zclSerializeData
   \   000090   EA           MOV       A,R2
   \   000091   2403         ADD       A,#0x3
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   3B           ADDC      A,R3
   \   000096   FD           MOV       R5,A
   \   000097   85..82       MOV       DPL,?V4
   \   00009A   85..83       MOV       DPH,?V5
   \   00009D   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   1367              }
   \                     ??CrossCallReturnLabel_411:
   \   0000A0   8882         MOV       DPL,R0
   \   0000A2   8983         MOV       DPH,R1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F9           MOV       R1,A
   \   0000A6   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   0000A9   05..         INC       ?V0
   \                     ??zcl_SendWriteRequest_3:
   \   0000AB   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_682:
   \   0000AE   40C2         JC        ??zcl_SendWriteRequest_4
   1368          
   1369              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1370                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000B0                ; Setup parameters for call to function zcl_SendCommand
   \   0000B0   78..         MOV       R0,#?V2
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   8E..         MOV       ?V0,R6
   \   0000B7   8F..         MOV       ?V1,R7
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   741E         MOV       A,#0x1e
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C9   E4           CLR       A
   \   0000CA   F5..         MOV       ?V0,A
   \   0000CC   F5..         MOV       ?V1,A
   \   0000CE   78..         MOV       R0,#?V0
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D3   7420         MOV       A,#0x20
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DE   7420         MOV       A,#0x20
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E9   75..00       MOV       ?V0,#0x0
   \   0000EC   78..         MOV       R0,#?V0
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F1   7421         MOV       A,#0x21
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FC   740C         MOV       A,#0xc
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   F9           MOV       R1,A
   \   00010F   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000112   740B         MOV       A,#0xb
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   E9           MOV       A,R1
   \   000118   FE           MOV       R6,A
   1371              zcl_mem_free( buf );
   \   000119                ; Setup parameters for call to function osal_mem_free
   \   000119   AA..         MOV       R2,?V2
   \   00011B   AB..         MOV       R3,?V3
   \   00011D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000120   8002         SJMP      ??zcl_SendWriteRequest_5
   1372            }
   1373            else
   1374            {
   1375              status = ZMemError;
   \                     ??zcl_SendWriteRequest_2:
   \   000122   7E10         MOV       R6,#0x10
   1376            }
   1377          
   1378            return ( status);
   \                     ??zcl_SendWriteRequest_5:
   \   000124                REQUIRE ?Subroutine7
   \   000124                ; // Fall through to label ?Subroutine7
   1379          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   7405         MOV       A,#0x5
   \   000004   02....       LJMP      ??Subroutine196_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   E5..         MOV       A,?V0
   \   000002   75F005       MOV       B,#0x5
   \   000005   A4           MUL       AB
   \   000006   F8           MOV       R0,A
   \   000007   A9F0         MOV       R1,B
   \   000009   E5..         MOV       A,?V6
   \   00000B   28           ADD       A,R0
   \   00000C   F582         MOV       DPL,A
   \   00000E   E5..         MOV       A,?V7
   \   000010   39           ADDC      A,R1
   \   000011   F583         MOV       DPH,A
   \   000013   A3           INC       DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000003   740E         MOV       A,#0xe
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000003   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000006   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine210_0
   \   000002                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine211_0
   \   000001                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006                REQUIRE ??Subroutine249_0
   \   000006                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V0
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
   1380          
   1381          /*********************************************************************
   1382           * @fn      zcl_SendWriteRsp
   1383           *
   1384           * @brief   Send a Write Response command
   1385           *
   1386           * @param   dstAddr - destination address
   1387           * @param   clusterID - cluster ID
   1388           * @param   wrtieRspCmd - write response command to be sent
   1389           * @param   direction - direction of the command
   1390           * @param   seqNum - transaction sequence number
   1391           *
   1392           * @return  ZSuccess if OK
   1393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1394          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1395                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1396                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   00001A   8C..         MOV       ?V6,R4
   \   00001C   8D..         MOV       ?V7,R5
   \   00001E   7413         MOV       A,#0x13
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ?Subroutine95 & 0xFFFF
   1398            uint16 dataLen;
   1399            uint8 *buf;
   1400            ZStatus_t status;
   1401          
   1402            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \                     ??CrossCallReturnLabel_169:
   \   000026   E0           MOVX      A,@DPTR
   \   000027   75F003       MOV       B,#0x3
   \   00002A   A4           MUL       AB
   \   00002B   FE           MOV       R6,A
   \   00002C   AFF0         MOV       R7,B
   1403          
   1404            buf = zcl_mem_alloc( dataLen );
   \   00002E                ; Setup parameters for call to function osal_mem_alloc
   \   00002E   FA           MOV       R2,A
   \   00002F   EF           MOV       A,R7
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV       ?V2,R2
   \   000036   8B..         MOV       ?V3,R3
   1405            if ( buf != NULL )
   \   000038   EA           MOV       A,R2
   \   000039   45..         ORL       A,?V3
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1406            {
   1407              // Load the buffer - serially
   1408              uint8 i;
   1409              uint8 *pBuf = buf;
   \   000040   A8..         MOV       R0,?V2
   \   000042   A9..         MOV       R1,?V3
   1410              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   000044   7A00         MOV       R2,#0x0
   \   000046   8034         SJMP      ??zcl_SendWriteRsp_1
   1411              {
   1412                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   000048   EA           MOV       A,R2
   \   000049   75F003       MOV       B,#0x3
   \   00004C   A4           MUL       AB
   \   00004D   FC           MOV       R4,A
   \   00004E   ADF0         MOV       R5,B
   \   000050   E5..         MOV       A,?V0
   \   000052   2C           ADD       A,R4
   \   000053   FC           MOV       R4,A
   \   000054   E5..         MOV       A,?V1
   \   000056   3D           ADDC      A,R5
   \   000057   FD           MOV       R5,A
   \   000058   8C82         MOV       DPL,R4
   \   00005A   8D83         MOV       DPH,R5
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000060   F0           MOVX      @DPTR,A
   1413                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \   000061   EC           MOV       A,R4
   \   000062   2402         ADD       A,#0x2
   \   000064   FC           MOV       R4,A
   \   000065   5001         JNC       ??zcl_SendWriteRsp_3
   \   000067   0D           INC       R5
   \                     ??zcl_SendWriteRsp_3:
   \   000068   8C82         MOV       DPL,R4
   \   00006A   8D83         MOV       DPH,R5
   \   00006C   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00006F   F0           MOVX      @DPTR,A
   1414                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \   000070   8C82         MOV       DPL,R4
   \   000072   8D83         MOV       DPH,R5
   \   000074   A3           INC       DPTR
   \   000075   12....       LCALL     ?Subroutine96 & 0xFFFF
   1415              }
   \                     ??CrossCallReturnLabel_171:
   \   000078   5001         JNC       ??zcl_SendWriteRsp_4
   \   00007A   09           INC       R1
   \                     ??zcl_SendWriteRsp_4:
   \   00007B   0A           INC       R2
   \                     ??zcl_SendWriteRsp_1:
   \   00007C   85..82       MOV       DPL,?V0
   \   00007F   85..83       MOV       DPH,?V1
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FB           MOV       R3,A
   \   000084   EA           MOV       A,R2
   \   000085   C3           CLR       C
   \   000086   9B           SUBB      A,R3
   \   000087   40BF         JC        ??zcl_SendWriteRsp_2
   1416          
   1417              // If there's only a single status record and its status field is set to
   1418              // SUCCESS then omit the attribute ID field.
   1419              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   000089   7401         MOV       A,#0x1
   \   00008B   6B           XRL       A,R3
   \   00008C   7008         JNZ       ??zcl_SendWriteRsp_5
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   7004         JNZ       ??zcl_SendWriteRsp_5
   1420              {
   1421                dataLen = 1;
   \   000092   7E01         MOV       R6,#0x1
   \   000094   7F00         MOV       R7,#0x0
   1422              }
   1423          
   1424              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1425                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   000096                ; Setup parameters for call to function zcl_SendCommand
   \   000096   78..         MOV       R0,#?V2
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   8E..         MOV       ?V0,R6
   \   00009D   8F..         MOV       ?V1,R7
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   741B         MOV       A,#0x1b
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   E4           CLR       A
   \   0000B0   F5..         MOV       ?V0,A
   \   0000B2   F5..         MOV       ?V1,A
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   741D         MOV       A,#0x1d
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   741D         MOV       A,#0x1d
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   75..00       MOV       ?V0,#0x0
   \   0000D2   78..         MOV       R0,#?V0
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   75..04       MOV       ?V0,#0x4
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DF   AC..         MOV       R4,?V6
   \   0000E1   AD..         MOV       R5,?V7
   \   0000E3   740C         MOV       A,#0xc
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F9           MOV       R1,A
   \   0000F0   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000F3   740B         MOV       A,#0xb
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   E9           MOV       A,R1
   \   0000F9   FE           MOV       R6,A
   1426              zcl_mem_free( buf );
   \   0000FA                ; Setup parameters for call to function osal_mem_free
   \   0000FA   AA..         MOV       R2,?V2
   \   0000FC   AB..         MOV       R3,?V3
   \   0000FE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000101   8002         SJMP      ??zcl_SendWriteRsp_6
   1427            }
   1428            else
   1429            {
   1430              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   000103   7E10         MOV       R6,#0x10
   1431            }
   1432          
   1433            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   000105   EE           MOV       A,R6
   \   000106   F9           MOV       R1,A
   \   000107   7403         MOV       A,#0x3
   \   000109   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   1434          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   85..82       MOV       DPL,?V0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E8           MOV       A,R0
   \   000006   2403         ADD       A,#0x3
   \   000008   F8           MOV       R0,A
   \   000009   22           RET
   1435          #endif // ZCL_WRITE
   1436          
   1437          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1438          /*********************************************************************
   1439           * @fn      zcl_SendConfigReportCmd
   1440           *
   1441           * @brief   Send a Configure Reporting command
   1442           *
   1443           * @param   dstAddr - destination address
   1444           * @param   clusterID - cluster ID
   1445           * @param   cfgReportCmd - configure reporting command to be sent
   1446           * @param   direction - direction of the command
   1447           * @param   seqNum - transaction sequence number
   1448           *
   1449           * @return  ZSuccess if OK
   1450           */
   1451          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1452                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1453                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1454          {
   1455            uint8 *buf;
   1456            uint16 dataLen = 0;
   1457            ZStatus_t status;
   1458            uint8 i;
   1459          
   1460            // Find out the data length
   1461            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1462            {
   1463              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1464          
   1465              dataLen += 1 + 2; // Direction + Attribute ID
   1466          
   1467              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1468              {
   1469                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1470          
   1471                // Find out the size of the Reportable Change field (for Analog data types)
   1472                if ( zclAnalogDataType( reportRec->dataType ) )
   1473                {
   1474                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1475                }
   1476              }
   1477              else
   1478              {
   1479                dataLen += 2; // Timeout Period
   1480              }
   1481            }
   1482          
   1483            buf = zcl_mem_alloc( dataLen );
   1484            if ( buf != NULL )
   1485            {
   1486              // Load the buffer - serially
   1487              uint8 *pBuf = buf;
   1488          
   1489              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1490              {
   1491                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1492          
   1493                *pBuf++ = reportRec->direction;
   1494                *pBuf++ = LO_UINT16( reportRec->attrID );
   1495                *pBuf++ = HI_UINT16( reportRec->attrID );
   1496          
   1497                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1498                {
   1499                  *pBuf++ = reportRec->dataType;
   1500                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1501                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1502                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1503                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1504          
   1505                  if ( zclAnalogDataType( reportRec->dataType ) )
   1506                  {
   1507                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1508                  }
   1509                }
   1510                else
   1511                {
   1512                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1513                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1514                }
   1515              } // for loop
   1516          
   1517              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1518                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1519              zcl_mem_free( buf );
   1520            }
   1521            else
   1522            {
   1523              status = ZMemError;
   1524            }
   1525          
   1526            return ( status );
   1527          }
   1528          #endif
   1529          
   1530          #ifdef ZCL_REPORTING_DEVICE
   1531          /*********************************************************************
   1532           * @fn      zcl_SendConfigReportRspCmd
   1533           *
   1534           * @brief   Send a Configure Reporting Response command
   1535           *
   1536           * @param   dstAddr - destination address
   1537           * @param   clusterID - cluster ID
   1538           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1539           * @param   direction - direction of the command
   1540           * @param   seqNum - transaction sequence number
   1541           *
   1542           * @return  ZSuccess if OK
   1543           */
   1544          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1545                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1546                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1547          {
   1548            uint16 dataLen;
   1549            uint8 *buf;
   1550            ZStatus_t status;
   1551          
   1552            // Atrribute list (Status, Direction and Attribute ID)
   1553            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   1554          
   1555            buf = zcl_mem_alloc( dataLen );
   1556            if ( buf != NULL )
   1557            {
   1558              // Load the buffer - serially
   1559              uint8 *pBuf = buf;
   1560              uint8 i;
   1561          
   1562              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   1563              {
   1564                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   1565                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   1566                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1567                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1568              }
   1569          
   1570              // If there's only a single status record and its status field is set to
   1571              // SUCCESS then omit the attribute ID field.
   1572              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1573              {
   1574                dataLen = 1;
   1575              }
   1576          
   1577              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1578                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1579                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   1580              zcl_mem_free( buf );
   1581            }
   1582            else
   1583            {
   1584              status = ZMemError;
   1585            }
   1586          
   1587            return ( status );
   1588          }
   1589          #endif
   1590          
   1591          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1592          /*********************************************************************
   1593           * @fn      zcl_SendReadReportCfgCmd
   1594           *
   1595           * @brief   Send a Read Reporting Configuration command
   1596           *
   1597           * @param   dstAddr - destination address
   1598           * @param   clusterID - cluster ID
   1599           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1600           * @param   direction - direction of the command
   1601           * @param   seqNum - transaction sequence number
   1602           *
   1603           * @return  ZSuccess if OK
   1604           */
   1605          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1606                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1607                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1608          {
   1609            uint16 dataLen;
   1610            uint8 *buf;
   1611            ZStatus_t status;
   1612          
   1613            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1614          
   1615            buf = zcl_mem_alloc( dataLen );
   1616            if ( buf != NULL )
   1617            {
   1618              // Load the buffer - serially
   1619              uint8 *pBuf = buf;
   1620              uint8 i;
   1621          
   1622              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1623              {
   1624                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1625                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1626                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1627              }
   1628          
   1629              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1630                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1631              zcl_mem_free( buf );
   1632            }
   1633            else
   1634            {
   1635              status = ZMemError;
   1636            }
   1637          
   1638            return ( status );
   1639          }
   1640          #endif
   1641          
   1642          #ifdef ZCL_REPORTING_DEVICE
   1643          /*********************************************************************
   1644           * @fn      zcl_SendReadReportCfgRspCmd
   1645           *
   1646           * @brief   Send a Read Reporting Configuration Response command
   1647           *
   1648           * @param   dstAddr - destination address
   1649           * @param   clusterID - cluster ID
   1650           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1651           * @param   direction - direction of the command
   1652           * @param   seqNum - transaction sequence number
   1653           *
   1654           * @return  ZSuccess if OK
   1655           */
   1656          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1657                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1658                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1659          {
   1660            uint8 *buf;
   1661            uint16 dataLen = 0;
   1662            ZStatus_t status;
   1663            uint8 i;
   1664          
   1665            // Find out the data length
   1666            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1667            {
   1668              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1669          
   1670              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1671          
   1672              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1673              {
   1674                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1675                {
   1676                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1677          
   1678                  // Find out the size of the Reportable Change field (for Analog data types)
   1679                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1680                  {
   1681                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1682                  }
   1683                }
   1684                else
   1685                {
   1686                  dataLen += 2; // Timeout Period
   1687                }
   1688              }
   1689            }
   1690          
   1691            buf = zcl_mem_alloc( dataLen );
   1692            if ( buf != NULL )
   1693            {
   1694              // Load the buffer - serially
   1695              uint8 *pBuf = buf;
   1696          
   1697              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1698              {
   1699                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1700          
   1701                *pBuf++ = reportRspRec->status;
   1702                *pBuf++ = reportRspRec->direction;
   1703                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1704                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1705          
   1706                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1707                {
   1708                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1709                  {
   1710                    *pBuf++ = reportRspRec->dataType;
   1711                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1712                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1713                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1714                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1715          
   1716                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1717                    {
   1718                      pBuf = zclSerializeData( reportRspRec->dataType,
   1719                                               reportRspRec->reportableChange, pBuf );
   1720                    }
   1721                  }
   1722                  else
   1723                  {
   1724                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1725                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1726                  }
   1727                }
   1728              }
   1729          
   1730              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1731                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1732                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1733              zcl_mem_free( buf );
   1734            }
   1735            else
   1736            {
   1737              status = ZMemError;
   1738            }
   1739          
   1740            return ( status );
   1741          }
   1742          
   1743          /*********************************************************************
   1744           * @fn      zcl_SendReportCmd
   1745           *
   1746           * @brief   Send a Report command
   1747           *
   1748           * @param   dstAddr - destination address
   1749           * @param   clusterID - cluster ID
   1750           * @param   reportCmd - report command to be sent
   1751           * @param   direction - direction of the command
   1752           * @param   seqNum - transaction sequence number
   1753           *
   1754           * @return  ZSuccess if OK
   1755           */
   1756          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1757                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1758                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1759          {
   1760            uint16 dataLen = 0;
   1761            uint8 *buf;
   1762            ZStatus_t status;
   1763            uint8 i;
   1764          
   1765            // calculate the size of the command
   1766            for ( i = 0; i < reportCmd->numAttr; i++ )
   1767            {
   1768              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1769          
   1770              dataLen += 2 + 1; // Attribute ID + data type
   1771          
   1772              // Attribute Data
   1773              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1774            }
   1775          
   1776            buf = zcl_mem_alloc( dataLen );
   1777            if ( buf != NULL )
   1778            {
   1779              // Load the buffer - serially
   1780              uint8 *pBuf = buf;
   1781          
   1782              for ( i = 0; i < reportCmd->numAttr; i++ )
   1783              {
   1784                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1785          
   1786                *pBuf++ = LO_UINT16( reportRec->attrID );
   1787                *pBuf++ = HI_UINT16( reportRec->attrID );
   1788                *pBuf++ = reportRec->dataType;
   1789          
   1790                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1791              }
   1792          
   1793              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1794                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1795              zcl_mem_free( buf );
   1796            }
   1797            else
   1798            {
   1799              status = ZMemError;
   1800            }
   1801          
   1802            return ( status );
   1803          }
   1804          #endif
   1805          
   1806          /*********************************************************************
   1807           * @fn      zcl_SendDefaultRspCmd
   1808           *
   1809           * @brief   Send a Default Response command
   1810           *
   1811           *          Note: The manufacturer code field should be set if this
   1812           *          command is being sent in response to a manufacturer specific
   1813           *          command.
   1814           *
   1815           * @param   dstAddr - destination address
   1816           * @param   clusterID - cluster ID
   1817           * @param   defaultRspCmd - default response command to be sent
   1818           * @param   direction - direction of the command
   1819           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1820           * @param   seqNum - transaction sequence number
   1821           *
   1822           * @return  ZSuccess if OK
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1825                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1826                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine16 & 0xFFFF
   1828            uint8 buf[2]; // Command ID and Status;
   1829          
   1830            // Load the buffer - serially
   1831            buf[0] = defaultRspCmd->commandID;
   1832            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_326:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   12....       LCALL     ?Subroutine31 & 0xFFFF
   1833          
   1834            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1835                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_38:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV       ?V0,#0x2
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7416         MOV       A,#0x16
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   7415         MOV       A,#0x15
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   7416         MOV       A,#0x16
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   7416         MOV       A,#0x16
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   75..00       MOV       ?V0,#0x0
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..0B       MOV       ?V0,#0xb
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   EE           MOV       A,R6
   \   000068   F9           MOV       R1,A
   \   000069   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00006C   740B         MOV       A,#0xb
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   7402         MOV       A,#0x2
   \   000073   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A                REQUIRE ??Subroutine192_0
   \   00000A                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine202_0
   \   000003                ; // Fall through to label ??Subroutine202_0
   1836          }
   1837          
   1838          #ifdef ZCL_DISCOVER
   1839          /*********************************************************************
   1840           * @fn      zcl_SendDiscoverCmdsCmd
   1841           *
   1842           * @brief   Send a Discover Commands command
   1843           *
   1844           * @param   dstAddr - destination address
   1845           * @param   clusterID - cluster ID
   1846           * @param   cmdType - requesting command ID
   1847           * @param   pDiscoverCmd - discover command to be sent
   1848           * @param   direction - direction of the command
   1849           * @param   seqNum - transaction sequence number
   1850           *
   1851           * @return  ZSuccess if OK
   1852           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1853          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDiscoverCmdsCmd:
   1854                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1855                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7411         MOV       A,#0x11
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine16 & 0xFFFF
   1857            uint8 payload[2]; // size of startCmdID and maxCmdID
   1858            ZStatus_t status;
   1859          
   1860            payload[0] = pDiscoverCmd->startCmdID;
   1861            payload[1] = pDiscoverCmd->maxCmdID;
   \                     ??CrossCallReturnLabel_327:
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   7413         MOV       A,#0x13
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   7414         MOV       A,#0x14
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7415         MOV       A,#0x15
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   1862          
   1863            // Send message for either commands received or generated
   1864            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00003B   7410         MOV       A,#0x10
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6411         XRL       A,#0x11
   \   000043   AC..         MOV       R4,?XSP + 0
   \   000045   AD..         MOV       R5,?XSP + 1
   \   000047   8C..         MOV       ?V0,R4
   \   000049   8D..         MOV       ?V1,R5
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   703B         JNZ       ??zcl_SendDiscoverCmdsCmd_0
   1865            {
   1866              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1867                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \   00004F                ; Setup parameters for call to function zcl_SendCommand
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV       ?V0,#0x2
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   EB           MOV       A,R3
   \   00005E   F5..         MOV       ?V0,A
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   E4           CLR       A
   \   000066   F5..         MOV       ?V0,A
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   EA           MOV       A,R2
   \   00006E   F5..         MOV       ?V0,A
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   E9           MOV       A,R1
   \   000076   F5..         MOV       ?V0,A
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   75..00       MOV       ?V0,#0x0
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000085   75..11       MOV       ?V0,#0x11
   \   000088   8039         SJMP      ??zcl_SendDiscoverCmdsCmd_1
   1868            }
   1869            else  // generated
   1870            {
   1871              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1872                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \                     ??zcl_SendDiscoverCmdsCmd_0:
   \   00008A                ; Setup parameters for call to function zcl_SendCommand
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..02       MOV       ?V0,#0x2
   \   000090   75..00       MOV       ?V1,#0x0
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   EB           MOV       A,R3
   \   000099   F5..         MOV       ?V0,A
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V0,A
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   EA           MOV       A,R2
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   E9           MOV       A,R1
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   75..00       MOV       ?V0,#0x0
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   75..13       MOV       ?V0,#0x13
   \                     ??zcl_SendDiscoverCmdsCmd_1:
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   EE           MOV       A,R6
   \   0000C9   FC           MOV       R4,A
   \   0000CA   EF           MOV       A,R7
   \   0000CB   FD           MOV       R5,A
   \   0000CC   AA..         MOV       R2,?V4
   \   0000CE   AB..         MOV       R3,?V5
   \   0000D0   A9..         MOV       R1,?V2
   \   0000D2   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D5   740B         MOV       A,#0xb
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV       A,R1
   \   0000DB   F9           MOV       R1,A
   1873            }
   1874          
   1875            return ( status );
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   02....       LJMP      ?Subroutine5 & 0xFFFF
   1876          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine207_0
   \   000003                ; // Fall through to label ??Subroutine207_0
   1877          
   1878          /*********************************************************************
   1879           * @fn      zcl_SendDiscoverCmdsRspCmd
   1880           *
   1881           * @brief   Send a Discover Commands Response command
   1882           *
   1883           * @param   dstAddr - destination address
   1884           * @param   clusterID - cluster ID
   1885           * @param   pDiscoverRspCmd - response command to be sent
   1886           * @param   direction - direction of the command
   1887           * @param   seqNum - transaction sequence number
   1888           *
   1889           * @return  ZSuccess if OK
   1890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1891          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverCmdsRspCmd:
   1892                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1893                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1894          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   04           INC       A
   1895            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   1896            uint8 *pCmdBuf;
   1897            uint8 i;
   1898            ZStatus_t status = ZSuccess;
   \   00001E   75..00       MOV       ?V2,#0x0
   1899          
   1900            // allocate memory
   1901            pCmdBuf = zcl_mem_alloc( payloadSize );
   \   000021   FE           MOV       R6,A
   \   000022   7F00         MOV       R7,#0x0
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   FA           MOV       R2,A
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV       ?V6,R2
   \   00002C   8B..         MOV       ?V7,R3
   1902            if ( pCmdBuf != NULL )
   \   00002E   EA           MOV       A,R2
   \   00002F   45..         ORL       A,?V7
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??zcl_SendDiscoverCmdsRspCmd_0 & 0xFFFF
   1903            {
   1904              uint8 *pBuf = pCmdBuf;
   \   000036   A8..         MOV       R0,?V6
   \   000038   A9..         MOV       R1,?V7
   1905          
   1906              // Load the buffer - serially
   1907              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00003A   12....       LCALL     ?Subroutine46 & 0xFFFF
   1908              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_59:
   \   00003D   801E         SJMP      ??zcl_SendDiscoverCmdsRspCmd_1
   1909              {
   1910                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   \                     ??zcl_SendDiscoverCmdsRspCmd_2:
   \   00003F   EA           MOV       A,R2
   \   000040   FC           MOV       R4,A
   \   000041   85..82       MOV       DPL,?V0
   \   000044   85..83       MOV       DPH,?V1
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   2C           ADD       A,R4
   \   00004C   FB           MOV       R3,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   3400         ADDC      A,#0x0
   \   000051   8B82         MOV       DPL,R3
   \   000053   12....       LCALL     ?Subroutine125 & 0xFFFF
   1911              }
   \                     ??CrossCallReturnLabel_340:
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   A882         MOV       R0,DPL
   \   00005A   A983         MOV       R1,DPH
   \   00005C   0A           INC       R2
   \                     ??zcl_SendDiscoverCmdsRspCmd_1:
   \   00005D   85..82       MOV       DPL,?V0
   \   000060   85..83       MOV       DPH,?V1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FB           MOV       R3,A
   \   000067   EA           MOV       A,R2
   \   000068   C3           CLR       C
   \   000069   9B           SUBB      A,R3
   \   00006A   40D3         JC        ??zcl_SendDiscoverCmdsRspCmd_2
   1912          
   1913              // Send response message for either commands received or generated
   1914              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   7416         MOV       A,#0x16
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   7417         MOV       A,#0x17
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FA           MOV       R2,A
   \   000083   7418         MOV       A,#0x18
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FB           MOV       R3,A
   \   00008A   7411         MOV       A,#0x11
   \   00008C   68           XRL       A,R0
   \   00008D   7040         JNZ       ??zcl_SendDiscoverCmdsRspCmd_3
   1915              {
   1916                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1917                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   00008F                ; Setup parameters for call to function zcl_SendCommand
   \   00008F   85....       MOV       ?V0,?V6
   \   000092   85....       MOV       ?V1,?V7
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   8E..         MOV       ?V0,R6
   \   00009C   8F..         MOV       ?V1,R7
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   EB           MOV       A,R3
   \   0000A4   F5..         MOV       ?V0,A
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   E4           CLR       A
   \   0000AC   F5..         MOV       ?V0,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   EA           MOV       A,R2
   \   0000B4   F5..         MOV       ?V0,A
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   8F..         MOV       ?V0,R7
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   75..12       MOV       ?V0,#0x12
   \   0000CD   8043         SJMP      ??zcl_SendDiscoverCmdsRspCmd_4
   1918              }
   1919              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zcl_SendDiscoverCmdsRspCmd_3:
   \   0000CF   7413         MOV       A,#0x13
   \   0000D1   68           XRL       A,R0
   \   0000D2   705E         JNZ       ??zcl_SendDiscoverCmdsRspCmd_5
   1920              {
   1921                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1922                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000D4                ; Setup parameters for call to function zcl_SendCommand
   \   0000D4   85....       MOV       ?V0,?V6
   \   0000D7   85....       MOV       ?V1,?V7
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   8E..         MOV       ?V0,R6
   \   0000E1   8F..         MOV       ?V1,R7
   \   0000E3   78..         MOV       R0,#?V0
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E8   EB           MOV       A,R3
   \   0000E9   F5..         MOV       ?V0,A
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F0   E4           CLR       A
   \   0000F1   F5..         MOV       ?V0,A
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   EA           MOV       A,R2
   \   0000F9   F5..         MOV       ?V0,A
   \   0000FB   78..         MOV       R0,#?V0
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   E9           MOV       A,R1
   \   000101   F5..         MOV       ?V0,A
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   8F..         MOV       ?V0,R7
   \   00010A   78..         MOV       R0,#?V0
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010F   75..14       MOV       ?V0,#0x14
   \                     ??zcl_SendDiscoverCmdsRspCmd_4:
   \   000112   78..         MOV       R0,#?V0
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000117   740B         MOV       A,#0xb
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   1923              }
   \   00011C   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   00011F   740D         MOV       A,#0xd
   \   000121   12....       LCALL     ?XSTACK_DISP0_8
   \   000124   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000127   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00012A   740B         MOV       A,#0xb
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012F   E9           MOV       A,R1
   \   000130   F5..         MOV       ?V2,A
   1924          
   1925              zcl_mem_free( pCmdBuf );
   \                     ??zcl_SendDiscoverCmdsRspCmd_5:
   \   000132                ; Setup parameters for call to function osal_mem_free
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000139   8003         SJMP      ??zcl_SendDiscoverCmdsRspCmd_6
   1926            }
   1927            else
   1928            {
   1929              status = ZMemError;
   \                     ??zcl_SendDiscoverCmdsRspCmd_0:
   \   00013B   75..10       MOV       ?V2,#0x10
   1930            }
   1931          
   1932            return ( status );
   \                     ??zcl_SendDiscoverCmdsRspCmd_6:
   \   00013E   A9..         MOV       R1,?V2
   \   000140   7404         MOV       A,#0x4
   \   000142   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   1933          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine193_0
   \   000002                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   A882         MOV       R0,DPL
   \   00000F   A983         MOV       R1,DPH
   \   000011   7A00         MOV       R2,#0x0
   \   000013   22           RET
   1934          
   1935          /*********************************************************************
   1936           * @fn      zcl_SendDiscoverAttrsCmd
   1937           *
   1938           * @brief   Send a Discover Attributes command
   1939           *
   1940           * @param   dstAddr - destination address
   1941           * @param   clusterID - cluster ID
   1942           * @param   pDiscoverCmd - discover command to be sent
   1943           * @param   direction - direction of the command
   1944           * @param   seqNum - transaction sequence number
   1945           *
   1946           * @return  ZSuccess if OK
   1947           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1948          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsCmd:
   1949                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1950                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1951          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   1952            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1953            uint8 *buf;
   1954            ZStatus_t status;
   1955          
   1956            buf = zcl_mem_alloc( dataLen );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A03         MOV       R2,#0x3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   1957            if ( buf != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   45..         ORL       A,?V1
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zcl_SendDiscoverAttrsCmd_0 & 0xFFFF
   \   000022   7410         MOV       A,#0x10
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ?Subroutine117 & 0xFFFF
   1958            {
   1959              // Load the buffer - serially
   1960              uint8 *pBuf = buf;
   1961              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_215:
   \   00002A   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   00002D   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   1962              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_329:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine48 & 0xFFFF
   1963              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   \                     ??CrossCallReturnLabel_63:
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   1964          
   1965              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   1966                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00003F                ; Setup parameters for call to function zcl_SendCommand
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..03       MOV       ?V4,#0x3
   \   000047   75..00       MOV       ?V5,#0x0
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F5..         MOV       ?V3,A
   \   000057   78..         MOV       R0,#?V3
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   E4           CLR       A
   \   00005D   F5..         MOV       ?V4,A
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   741A         MOV       A,#0x1a
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V3,A
   \   00006C   78..         MOV       R0,#?V3
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   741A         MOV       A,#0x1a
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V3,A
   \   000079   78..         MOV       R0,#?V3
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   75..00       MOV       ?V3,#0x0
   \   000081   78..         MOV       R0,#?V3
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   75..0C       MOV       ?V3,#0xc
   \   000089   78..         MOV       R0,#?V3
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   EE           MOV       A,R6
   \   00008F   FC           MOV       R4,A
   \   000090   EF           MOV       A,R7
   \   000091   FD           MOV       R5,A
   \   000092   AA..         MOV       R2,?V6
   \   000094   AB..         MOV       R3,?V7
   \   000096   A9..         MOV       R1,?V2
   \   000098   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00009B   740B         MOV       A,#0xb
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   FE           MOV       R6,A
   1967              zcl_mem_free( buf );
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   AA..         MOV       R2,?V0
   \   0000A4   AB..         MOV       R3,?V1
   \   0000A6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A9   8002         SJMP      ??zcl_SendDiscoverAttrsCmd_1
   1968            }
   1969            else
   1970            {
   1971              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsCmd_0:
   \   0000AB   7E10         MOV       R6,#0x10
   1972            }
   1973          
   1974            return ( status );
   \                     ??zcl_SendDiscoverAttrsCmd_1:
   \   0000AD   EE           MOV       A,R6
   \   0000AE   F9           MOV       R1,A
   \   0000AF   02....       LJMP      ??Subroutine197_0 & 0xFFFF
   1975          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   1976          
   1977          /*********************************************************************
   1978           * @fn      zcl_SendDiscoverAttrsRspCmd
   1979           *
   1980           * @brief   Send a Discover Attributes Response command
   1981           *
   1982           * @param   dstAddr - destination address
   1983           * @param   clusterID - cluster ID
   1984           * @param   reportRspCmd - report response command to be sent
   1985           * @param   direction - direction of the command
   1986           * @param   seqNum - transaction sequence number
   1987           *
   1988           * @return  ZSuccess if OK
   1989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1990          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsRspCmd:
   1991                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   1992                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1993          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000020   7415         MOV       A,#0x15
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000028   75F003       MOV       B,#0x3
   \   00002B   A4           MUL       AB
   \   00002C   A9F0         MOV       R1,B
   \   00002E   2401         ADD       A,#0x1
   \   000030   FE           MOV       R6,A
   \   000031   E4           CLR       A
   \   000032   39           ADDC      A,R1
   \   000033   FF           MOV       R7,A
   1994            uint16 dataLen = 1; // Discovery complete
   1995            uint8 *buf;
   1996            ZStatus_t status;
   1997          
   1998            // calculate the size of the command
   1999            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   2000          
   2001            buf = zcl_mem_alloc( dataLen );
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V2,R2
   \   00003D   8B..         MOV       ?V3,R3
   2002            if ( buf != NULL )
   \   00003F   EA           MOV       A,R2
   \   000040   45..         ORL       A,?V3
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zcl_SendDiscoverAttrsRspCmd_0 & 0xFFFF
   2003            {
   2004              // Load the buffer - serially
   2005              uint8 i;
   2006              uint8 *pBuf = buf;
   \   000047   A8..         MOV       R0,?V2
   \   000049   A9..         MOV       R1,?V3
   2007          
   2008              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00004B   12....       LCALL     ?Subroutine46 & 0xFFFF
   2009          
   2010              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_60:
   \   00004E   8025         SJMP      ??zcl_SendDiscoverAttrsRspCmd_1
   2011              {
   2012                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \                     ??zcl_SendDiscoverAttrsRspCmd_2:
   \   000050   EA           MOV       A,R2
   \   000051   75F003       MOV       B,#0x3
   \   000054   A4           MUL       AB
   \   000055   FC           MOV       R4,A
   \   000056   ADF0         MOV       R5,B
   \   000058   E5..         MOV       A,?V0
   \   00005A   2C           ADD       A,R4
   \   00005B   FC           MOV       R4,A
   \   00005C   E5..         MOV       A,?V1
   \   00005E   3D           ADDC      A,R5
   \   00005F   12....       LCALL     ?Subroutine133 & 0xFFFF
   2013                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2014                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   2015              }
   \                     ??CrossCallReturnLabel_237:
   \   000062   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000065   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000068   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00006B   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00006E   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000071   5001         JNC       ??zcl_SendDiscoverAttrsRspCmd_3
   \   000073   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsRspCmd_3:
   \   000074   0A           INC       R2
   \                     ??zcl_SendDiscoverAttrsRspCmd_1:
   \   000075   85..82       MOV       DPL,?V0
   \   000078   85..83       MOV       DPH,?V1
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FB           MOV       R3,A
   \   00007E   EA           MOV       A,R2
   \   00007F   C3           CLR       C
   \   000080   9B           SUBB      A,R3
   \   000081   40CD         JC        ??zcl_SendDiscoverAttrsRspCmd_2
   2016          
   2017              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2018                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000083                ; Setup parameters for call to function zcl_SendCommand
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   8E..         MOV       ?V0,R6
   \   00008A   8F..         MOV       ?V1,R7
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   741D         MOV       A,#0x1d
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009C   E4           CLR       A
   \   00009D   F5..         MOV       ?V0,A
   \   00009F   F5..         MOV       ?V1,A
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   741F         MOV       A,#0x1f
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   741F         MOV       A,#0x1f
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   75..00       MOV       ?V0,#0x0
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   75..0D       MOV       ?V0,#0xd
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CC   740C         MOV       A,#0xc
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F9           MOV       R1,A
   \   0000DF   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000E2   740B         MOV       A,#0xb
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV       A,R1
   \   0000E8   FE           MOV       R6,A
   2019              zcl_mem_free( buf );
   \   0000E9                ; Setup parameters for call to function osal_mem_free
   \   0000E9   AA..         MOV       R2,?V2
   \   0000EB   AB..         MOV       R3,?V3
   \   0000ED   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F0   8002         SJMP      ??zcl_SendDiscoverAttrsRspCmd_4
   2020            }
   2021            else
   2022            {
   2023              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsRspCmd_0:
   \   0000F2   7E10         MOV       R6,#0x10
   2024            }
   2025          
   2026            return ( status );
   \                     ??zcl_SendDiscoverAttrsRspCmd_4:
   \   0000F4   02....       LJMP      ?Subroutine7 & 0xFFFF
   2027          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   FD           MOV       R5,A
   \   000001   EC           MOV       A,R4
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V4,A
   \   000006   E4           CLR       A
   \   000007   3D           ADDC      A,R5
   \   000008   F5..         MOV       ?V5,A
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   8C82         MOV       DPL,R4
   \   000004   8D83         MOV       DPH,R5
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   22           RET
   2028          
   2029          /*********************************************************************
   2030           * @fn      zcl_SendDiscoverAttrsExt
   2031           *
   2032           * @brief   Send a Discover Attributes Extended command
   2033           *
   2034           * @param   dstAddr - destination address
   2035           * @param   clusterID - cluster ID
   2036           * @param   pDiscoverAttrsExt:
   2037           *            - startAttrID: the first attribute to be selected
   2038           *            - maxAttrIDs: maximum number of returned attributes
   2039           * @param   direction - direction of the command
   2040           * @param   seqNum - transaction sequence number
   2041           *
   2042           * @return  ZSuccess if OK
   2043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2044          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExt:
   2045                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2046                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2047          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740D         MOV       A,#0xd
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine16 & 0xFFFF
   2048            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2049            ZStatus_t status;
   2050          
   2051            // Load the buffer - serially
   2052            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   2053            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   \                     ??CrossCallReturnLabel_328:
   \   000014   F5..         MOV       ?V0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E5..         MOV       A,?V0
   \   00001D   12....       LCALL     ?Subroutine48 & 0xFFFF
   2054            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   \                     ??CrossCallReturnLabel_64:
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   12....       LCALL     ?Subroutine31 & 0xFFFF
   2055          
   2056            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2057                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2058          
   2059            return ( status );
   \                     ??CrossCallReturnLabel_39:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..03       MOV       ?V0,#0x3
   \   000032   75..00       MOV       ?V1,#0x0
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7415         MOV       A,#0x15
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000045   E4           CLR       A
   \   000046   F5..         MOV       ?V0,A
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7417         MOV       A,#0x17
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   7417         MOV       A,#0x17
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   75..00       MOV       ?V0,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006B   75..15       MOV       ?V0,#0x15
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000073   EE           MOV       A,R6
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000078   740B         MOV       A,#0xb
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   7403         MOV       A,#0x3
   \   00007F   02....       LJMP      ?Subroutine3 & 0xFFFF
   2060          }
   2061          
   2062          /*********************************************************************
   2063           * @fn      zcl_SendDiscoverAttrsExtRsp
   2064           *
   2065           * @brief   Send a Discover Attributes Extended Response command
   2066           *
   2067           * @param   dstAddr - destination address
   2068           * @param   clusterID - cluster ID
   2069           * @param   pDiscoverRspCmd:
   2070           *            - discComplete: indicates whether all requested attributes returned
   2071           *            - attrID: attribute ID
   2072           *            - attrDataType: data type of the given attribute
   2073           *            - attrAccessControl: access control of the given attribute
   2074           * @param   direction - direction of the command
   2075           * @param   seqNum - transaction sequence number
   2076           *
   2077           * @return  ZSuccess if OK
   2078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2079          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExtRsp:
   2080                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2081                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2082          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000020   7415         MOV       A,#0x15
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000028   F5..         MOV       ?V2,A
   \   00002A   75..00       MOV       ?V3,#0x0
   \   00002D   7402         MOV       A,#0x2
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?S_SHL
   \   000034   E5..         MOV       A,?V2
   \   000036   2401         ADD       A,#0x1
   \   000038   FE           MOV       R6,A
   \   000039   E4           CLR       A
   \   00003A   35..         ADDC      A,?V3
   \   00003C   FF           MOV       R7,A
   2083            uint8 *buf;
   2084            uint8 i;
   2085            uint16 dataLen = 1; // Discovery complete
   2086            ZStatus_t status;
   2087          
   2088            // calculate the size of the command
   2089            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   2090          
   2091            buf = zcl_mem_alloc( dataLen );
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV       ?V2,R2
   \   000046   8B..         MOV       ?V3,R3
   2092            if ( buf != NULL )
   \   000048   EA           MOV       A,R2
   \   000049   45..         ORL       A,?V3
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??zcl_SendDiscoverAttrsExtRsp_0 & 0xFFFF
   2093            {
   2094              // Load the buffer - serially
   2095              uint8 *pBuf = buf;
   2096              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000059   A3           INC       DPTR
   \   00005A   AA82         MOV       R2,DPL
   \   00005C   AB83         MOV       R3,DPH
   2097              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   00005E   7900         MOV       R1,#0x0
   \   000060   8039         SJMP      ??zcl_SendDiscoverAttrsExtRsp_1
   2098              {
   2099                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \                     ??zcl_SendDiscoverAttrsExtRsp_2:
   \   000062   E9           MOV       A,R1
   \   000063   F5..         MOV       ?V4,A
   \   000065   75..00       MOV       ?V5,#0x0
   \   000068   7402         MOV       A,#0x2
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   12....       LCALL     ?S_SHL
   \   00006F   E5..         MOV       A,?V0
   \   000071   25..         ADD       A,?V4
   \   000073   FC           MOV       R4,A
   \   000074   E5..         MOV       A,?V1
   \   000076   35..         ADDC      A,?V5
   \   000078   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   00007B   F583         MOV       DPH,A
   \   00007D   12....       LCALL     ?Subroutine22 & 0xFFFF
   2100                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2101                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   \                     ??CrossCallReturnLabel_21:
   \   000080   8C82         MOV       DPL,R4
   \   000082   8D83         MOV       DPH,R5
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   12....       LCALL     ?Subroutine97 & 0xFFFF
   2102                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2103              }
   \                     ??CrossCallReturnLabel_493:
   \   00008A   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00008D   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   F0           MOVX      @DPTR,A
   \   000093   EA           MOV       A,R2
   \   000094   2404         ADD       A,#0x4
   \   000096   FA           MOV       R2,A
   \   000097   5001         JNC       ??zcl_SendDiscoverAttrsExtRsp_3
   \   000099   0B           INC       R3
   \                     ??zcl_SendDiscoverAttrsExtRsp_3:
   \   00009A   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsExtRsp_1:
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F8           MOV       R0,A
   \   0000A4   E9           MOV       A,R1
   \   0000A5   C3           CLR       C
   \   0000A6   98           SUBB      A,R0
   \   0000A7   40B9         JC        ??zcl_SendDiscoverAttrsExtRsp_2
   2104          
   2105              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2106                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000A9                ; Setup parameters for call to function zcl_SendCommand
   \   0000A9   78..         MOV       R0,#?V2
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   8E..         MOV       ?V0,R6
   \   0000B0   8F..         MOV       ?V1,R7
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   741D         MOV       A,#0x1d
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   E4           CLR       A
   \   0000C3   F5..         MOV       ?V0,A
   \   0000C5   F5..         MOV       ?V1,A
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CC   741F         MOV       A,#0x1f
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   741F         MOV       A,#0x1f
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E2   75..00       MOV       ?V0,#0x0
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EA   75..16       MOV       ?V0,#0x16
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   740C         MOV       A,#0xc
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F9           MOV       R1,A
   \   000105   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000108   740B         MOV       A,#0xb
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010D   E9           MOV       A,R1
   \   00010E   FE           MOV       R6,A
   2107              zcl_mem_free( buf );
   \   00010F                ; Setup parameters for call to function osal_mem_free
   \   00010F   AA..         MOV       R2,?V2
   \   000111   AB..         MOV       R3,?V3
   \   000113   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000116   8002         SJMP      ??zcl_SendDiscoverAttrsExtRsp_4
   2108            }
   2109            else
   2110            {
   2111              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsExtRsp_0:
   \   000118   7E10         MOV       R6,#0x10
   2112            }
   2113          
   2114            return ( status );
   \                     ??zcl_SendDiscoverAttrsExtRsp_4:
   \   00011A   02....       LJMP      ?Subroutine7 & 0xFFFF
   2115          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine222_0
   \   000001                ; // Fall through to label ??Subroutine222_0
   2116          #endif // ZCL_DISCOVER
   2117          
   2118          /*********************************************************************
   2119           * @fn      zcl_ProcessMessageMSG
   2120           *
   2121           * @brief   Data message processor callback.  This function processes
   2122           *          any incoming data - probably from other devices.  So, based
   2123           *          on cluster ID, perform the intended action.
   2124           *
   2125           * @param   pkt - incoming message
   2126           *
   2127           * @return  zclProcMsgStatus_t
   2128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2129          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2130          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2131            endPointDesc_t *epDesc;
   2132            zclIncoming_t inMsg;
   2133            zclLibPlugin_t *pInPlugin;
   2134            zclDefaultRspCmd_t defautlRspCmd;
   2135            uint8 options;
   2136            uint8 securityEnable;
   2137            uint8 interPanMsg;
   2138            ZStatus_t status = ZFailure;
   2139            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2140          
   2141            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EE           MOV       A,R6
   \   000011   2420         ADD       A,#0x20
   \   000013   F5..         MOV       ?V2,A
   \   000015   E4           CLR       A
   \   000016   3F           ADDC      A,R7
   \   000017   F5..         MOV       ?V3,A
   \   000019   85..82       MOV       DPL,?V2
   \   00001C   F583         MOV       DPH,A
   \   00001E   C3           CLR       C
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   9403         SUBB      A,#0x3
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   9400         SUBB      A,#0x0
   \   000026   5005         JNC       ??zcl_ProcessMessageMSG_0
   2142            {
   2143              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000028   7901         MOV       R1,#0x1
   \   00002A   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2144            }
   2145          
   2146            // Initialize
   2147            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   00002D   90....       MOV       DPTR,#rawAFMsg
   \   000030   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   2148            inMsg.msg = pkt;
   \                     ??CrossCallReturnLabel_380:
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   2149            inMsg.attrCmd = NULL;
   \                     ??CrossCallReturnLabel_381:
   \   00003B   740E         MOV       A,#0xe
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   2150            inMsg.pData = NULL;
   \   000044   740A         MOV       A,#0xa
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   2151            inMsg.pDataLen = 0;
   \   00004D   740C         MOV       A,#0xc
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
   2152          
   2153            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000056   EE           MOV       A,R6
   \   000057   2422         ADD       A,#0x22
   \   000059   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00005C   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   AA82         MOV       R2,DPL
   \   000064   AB83         MOV       R3,DPH
   \   000066   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000069   8A..         MOV       ?V4,R2
   \   00006B   8B..         MOV       ?V5,R3
   \   00006D   A8..         MOV       R0,?V4
   \   00006F   A9..         MOV       R1,?V5
   \   000071   740A         MOV       A,#0xa
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   2154            inMsg.pDataLen = pkt->cmd.DataLength;
   2155            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_474:
   \   000079   85..82       MOV       DPL,?V2
   \   00007C   85..83       MOV       DPH,?V3
   \   00007F   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000082   EA           MOV       A,R2
   \   000083   C3           CLR       C
   \   000084   98           SUBB      A,R0
   \   000085   F8           MOV       R0,A
   \   000086   EB           MOV       A,R3
   \   000087   99           SUBB      A,R1
   \   000088   F9           MOV       R1,A
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000092   740C         MOV       A,#0xc
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   2156          
   2157            // Temporary workaround to allow callback functions access to the
   2158            // transaction sequence number.  Callback functions will call
   2159            // zcl_getParsedTransSeqNum() to retrieve this number.
   2160            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_475:
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000A3   F0           MOVX      @DPTR,A
   2161          
   2162            // Find the wanted endpoint
   2163            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2414         ADD       A,#0x14
   \   0000A7   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F9           MOV       R1,A
   \   0000AC   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000AF   8A82         MOV       DPL,R2
   \   0000B1   8B83         MOV       DPH,R3
   2164            if ( epDesc == NULL )
   \   0000B3   E582         MOV       A,DPL
   \   0000B5   4583         ORL       A,DPH
   \   0000B7   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2165            {
   2166              rawAFMsg = NULL;
   \   0000B9   90....       MOV       DPTR,#rawAFMsg
   \   0000BC   E4           CLR       A
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   F0           MOVX      @DPTR,A
   2167              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000C0   7902         MOV       R1,#0x2
   \   0000C2   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2168            }
   2169          
   2170            if ( ( epDesc->simpleDesc == NULL ) ||
   2171                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2172                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000C5   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   0000C8   602B         JZ        ??zcl_ProcessMessageMSG_3
   \   0000CA   EE           MOV       A,R6
   \   0000CB   2404         ADD       A,#0x4
   \   0000CD   F5..         MOV       ?V2,A
   \   0000CF   E4           CLR       A
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   F5..         MOV       ?V3,A
   \   0000D3                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000D3   A3           INC       DPTR
   \   0000D4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000D7   740B         MOV       A,#0xb
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FD           MOV       R5,A
   \   0000DE   7406         MOV       A,#0x6
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   5403         ANL       A,#0x3
   \   0000E6   FC           MOV       R4,A
   \   0000E7   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000EA   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000ED   7402         MOV       A,#0x2
   \   0000EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F2   E9           MOV       A,R1
   \   0000F3   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2173            {
   2174              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   0000F5   90....       MOV       DPTR,#rawAFMsg
   \   0000F8   E4           CLR       A
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   F0           MOVX      @DPTR,A
   2175              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   0000FC   7903         MOV       R1,#0x3
   \   0000FE   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2176            }
   2177          
   2178          
   2179          #if defined ( INTER_PAN )
   2180            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   2181            {
   2182              // No foundation command is supported thru Inter-PAN communication.
   2183              // But the Light Link cluster uses a different Frame Control format
   2184              // for it's Inter-PAN messages, where the messages could be confused
   2185              // with the foundation commands.
   2186              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   2187              {
   2188                rawAFMsg = NULL;
   2189                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   2190              }
   2191          
   2192              interPanMsg = TRUE;
   2193              options = AF_TX_OPTIONS_NONE;
   2194            }
   2195            else
   2196          #endif
   2197            {
   2198              interPanMsg = FALSE;
   2199              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \                     ??zcl_ProcessMessageMSG_4:
   \   000101                ; Setup parameters for call to function zclGetClusterOption
   \   000101   12....       LCALL     ?Subroutine63 & 0xFFFF
   2200            }
   \                     ??CrossCallReturnLabel_108:
   \   000104   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000107   E9           MOV       A,R1
   \   000108   FC           MOV       R4,A
   2201          
   2202            // Find the appropriate plugin
   2203            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   000109   85..82       MOV       DPL,?V2
   \   00010C   85..83       MOV       DPH,?V3
   \   00010F   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000112   8A..         MOV       ?V4,R2
   \   000114   8B..         MOV       ?V5,R3
   \   000116   90....       MOV       DPTR,#plugins
   \   000119   8004         SJMP      ??zcl_ProcessMessageMSG_5
   \                     ??zcl_ProcessMessageMSG_6:
   \   00011B   8882         MOV       DPL,R0
   \   00011D   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_5:
   \   00011F   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000122   7003         JNZ       $+5
   \   000124   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   \   000127   8882         MOV       DPL,R0
   \   000129   8983         MOV       DPH,R1
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000130   C3           CLR       C
   \   000131   EA           MOV       A,R2
   \   000132   95..         SUBB      A,?V6
   \   000134   EB           MOV       A,R3
   \   000135   95..         SUBB      A,?V7
   \   000137   40E2         JC        ??zcl_ProcessMessageMSG_6
   \   000139   8882         MOV       DPL,R0
   \   00013B   8983         MOV       DPH,R1
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   C3           CLR       C
   \   000142   E0           MOVX      A,@DPTR
   \   000143   95..         SUBB      A,?V4
   \   000145   A3           INC       DPTR
   \   000146   E0           MOVX      A,@DPTR
   \   000147   95..         SUBB      A,?V5
   \   000149   40D0         JC        ??zcl_ProcessMessageMSG_6
   \   00014B   7404         MOV       A,#0x4
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   E0           MOVX      A,@DPTR
   \   000151   5407         ANL       A,#0x7
   \   000153   700D         JNZ       ??zcl_ProcessMessageMSG_8
   \   000155   7409         MOV       A,#0x9
   \   000157   12....       LCALL     ?XSTACK_DISP0_8
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   640B         XRL       A,#0xb
   \   00015D   7003         JNZ       $+5
   \   00015F   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2204          
   2205            // Local and remote Security options must match except for Default Response command
   2206            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2207            {
   2208              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_8:
   \   000162   EC           MOV       A,R4
   \   000163   A2E6         MOV       C,0xE0 /* A   */.6
   \   000165   4003         JC        $+5
   \   000167   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   \   00016A   EE           MOV       A,R6
   \   00016B   2419         ADD       A,#0x19
   \   00016D   F582         MOV       DPL,A
   \   00016F   E4           CLR       A
   \   000170   3F           ADDC      A,R7
   \   000171   F583         MOV       DPH,A
   \   000173   E0           MOVX      A,@DPTR
   \   000174   6003         JZ        $+5
   \   000176   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2209          
   2210              // Make sure that Clusters specifically defined to use security are received secure,
   2211              // any other cluster that wants to use APS security will be allowed
   2212              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2213              {
   2214                if ( UNICAST_MSG( inMsg.msg ) )
   \   000179   7402         MOV       A,#0x2
   \   00017B   12....       LCALL     ?XSTACK_DISP0_8
   \   00017E   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000181   6003         JZ        $+5
   \   000183   02....       LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
   \   000186   7402         MOV       A,#0x2
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   00018E   7079         JNZ       ??zcl_ProcessMessageMSG_10
   2215                {
   2216                  // Send a Default Response command back with no Application Link Key security
   2217                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   000190                ; Setup parameters for call to function zclSetSecurityOption
   \   000190   7C00         MOV       R4,#0x0
   \   000192   85..82       MOV       DPL,?V0
   \   000195   85..83       MOV       DPH,?V1
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F9           MOV       R1,A
   \   00019A   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2218          
   2219                  defautlRspCmd.statusCode = status;
   \   00019D   7401         MOV       A,#0x1
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   7401         MOV       A,#0x1
   \   0001A4   F0           MOVX      @DPTR,A
   2220                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001A5   7409         MOV       A,#0x9
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL     ?Subroutine111 & 0xFFFF
   2221                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2222                                         inMsg.msg->clusterId, &defautlRspCmd,
   2223                                         !inMsg.hdr.fc.direction, true,
   2224                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_205:
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   F5..         MOV       ?V4,A
   \   0001B3   78..         MOV       R0,#?V4
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B8   7407         MOV       A,#0x7
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001C0   75..01       MOV       ?V4,#0x1
   \   0001C3   78..         MOV       R0,#?V4
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C8   7408         MOV       A,#0x8
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0001D0   F5..         MOV       ?V4,A
   \   0001D2   78..         MOV       R0,#?V4
   \   0001D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D7   7405         MOV       A,#0x5
   \   0001D9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001DC   88..         MOV       ?V4,R0
   \   0001DE   89..         MOV       ?V5,R1
   \   0001E0   78..         MOV       R0,#?V4
   \   0001E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E5   7409         MOV       A,#0x9
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0001ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F0   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0001F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0001F9   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0001FC   7407         MOV       A,#0x7
   \   0001FE   12....       LCALL     ?DEALLOC_XSTACK8
   2225          
   2226                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   000201                ; Setup parameters for call to function zclSetSecurityOption
   \   000201   7C01         MOV       R4,#0x1
   \   000203   12....       LCALL     ?Subroutine63 & 0xFFFF
   2227                }
   \                     ??CrossCallReturnLabel_109:
   \   000206   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2228          
   2229                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_10:
   \   000209   90....       MOV       DPTR,#rawAFMsg
   \   00020C   E4           CLR       A
   \   00020D   F0           MOVX      @DPTR,A
   \   00020E   A3           INC       DPTR
   \   00020F   F0           MOVX      @DPTR,A
   2230                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   000210   7905         MOV       R1,#0x5
   \   000212   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2231              }
   2232            }
   \                     ??zcl_ProcessMessageMSG_7:
   \   000215   7800         MOV       R0,#0x0
   \   000217   7900         MOV       R1,#0x0
   2233          
   2234            // Is this a foundation type message
   2235            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_9:
   \   000219   7404         MOV       A,#0x4
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   E0           MOVX      A,@DPTR
   \   00021F   5403         ANL       A,#0x3
   \   000221   6003         JZ        $+5
   \   000223   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   2236            {
   2237              /**
   2238               * JC NOTES: Here we remove the check of manuSpecific field for ZCL foundation command.
   2239               * The reason is that we found for some vendors, e.g., Philips, they (maybe accidentally) set this field, and as a result, foundation command (e.g., Default Response) cannot be further proceessed.
   2240              */
   2241              //if ( inMsg.hdr.fc.manuSpecific )
   2242              //{
   2243              //  // We don't support any manufacturer specific command
   2244              //  status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   2245              //}
   2246              //else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2247              //          ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   2248              if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2249                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \   000226   7409         MOV       A,#0x9
   \   000228   12....       LCALL     ?XSTACK_DISP0_8
   \   00022B   E0           MOVX      A,@DPTR
   \   00022C   F8           MOV       R0,A
   \   00022D   C3           CLR       C
   \   00022E   9417         SUBB      A,#0x17
   \   000230   4003         JC        $+5
   \   000232   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   \   000235   E8           MOV       A,R0
   \   000236   F5..         MOV       ?V2,A
   \   000238   75..00       MOV       ?V3,#0x0
   \   00023B   7402         MOV       A,#0x2
   \   00023D   78..         MOV       R0,#?V2
   \   00023F   12....       LCALL     ?S_SHL
   \   000242   74..         MOV       A,#zclCmdTable & 0xff
   \   000244   25..         ADD       A,?V2
   \   000246   F582         MOV       DPL,A
   \   000248   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   00024A   35..         ADDC      A,?V3
   \   00024C   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00024F   E8           MOV       A,R0
   \   000250   49           ORL       A,R1
   \   000251   7003         JNZ       $+5
   \   000253   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   2250              {
   2251                zclParseCmd_t parseCmd;
   2252          
   2253                parseCmd.endpoint = pkt->endPoint;
   \   000256   85..82       MOV       DPL,?V0
   \   000259   85..83       MOV       DPH,?V1
   \   00025C   E0           MOVX      A,@DPTR
   \   00025D   C0E0         PUSH      A
   \   00025F   7410         MOV       A,#0x10
   \   000261   12....       LCALL     ?XSTACK_DISP0_8
   \   000264   D0E0         POP       A
   \   000266   F0           MOVX      @DPTR,A
   2254                parseCmd.dataLen = inMsg.pDataLen;
   \   000267   740C         MOV       A,#0xc
   \   000269   12....       LCALL     ?XSTACK_DISP0_8
   \   00026C   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   00026F   7411         MOV       A,#0x11
   \   000271   12....       LCALL     ?XSTACK_DISP0_8
   \   000274   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   2255                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_658:
   \   000277   12....       LCALL     ?XSTACK_DISP0_8
   \   00027A   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00027D   7413         MOV       A,#0x13
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   2256          
   2257                // Parse the command, remember that the return value is a pointer to allocated memory
   2258                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_456:
   \   000285                ; Setup parameters for indirect call
   \   000285   7410         MOV       A,#0x10
   \   000287   12....       LCALL     ?XSTACK_DISP101_8
   \   00028A   8882         MOV       DPL,R0
   \   00028C   8983         MOV       DPH,R1
   \   00028E   12....       LCALL     ?CALL_IND
   \   000291   8A..         MOV       ?V0,R2
   \   000293   8B..         MOV       ?V1,R3
   \   000295   A8..         MOV       R0,?V0
   \   000297   A9..         MOV       R1,?V1
   \   000299   740E         MOV       A,#0xe
   \   00029B   12....       LCALL     ?XSTACK_DISP0_8
   \   00029E   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   2259                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_476:
   \   0002A1   E8           MOV       A,R0
   \   0002A2   49           ORL       A,R1
   \   0002A3   6046         JZ        ??zcl_ProcessMessageMSG_13
   \   0002A5   7409         MOV       A,#0x9
   \   0002A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX      A,@DPTR
   \   0002AB   F5..         MOV       ?V0,A
   \   0002AD   75..00       MOV       ?V1,#0x0
   \   0002B0   7402         MOV       A,#0x2
   \   0002B2   78..         MOV       R0,#?V0
   \   0002B4   12....       LCALL     ?S_SHL
   \   0002B7   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   0002B9   25..         ADD       A,?V0
   \   0002BB   F582         MOV       DPL,A
   \   0002BD   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   0002BF   35..         ADDC      A,?V1
   \   0002C1   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0002C4   8882         MOV       DPL,R0
   \   0002C6   8983         MOV       DPH,R1
   \   0002C8   E582         MOV       A,DPL
   \   0002CA   4583         ORL       A,DPH
   \   0002CC   6012         JZ        ??zcl_ProcessMessageMSG_14
   2260                {
   2261                  // Process the command
   2262                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0002CE                ; Setup parameters for indirect call
   \   0002CE   7402         MOV       A,#0x2
   \   0002D0   12....       LCALL     ?XSTACK_DISP101_8
   \   0002D3   12....       LCALL     ?CALL_IND
   2263                  {
   2264                    // Couldn't find attribute in the table.
   2265                  }
   2266                }
   2267          
   2268                // Free the buffer
   2269                if ( inMsg.attrCmd )
   \   0002D6   740E         MOV       A,#0xe
   \   0002D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DB   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   0002DE   600B         JZ        ??zcl_ProcessMessageMSG_13
   2270                {
   2271                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_14:
   \   0002E0                ; Setup parameters for call to function osal_mem_free
   \   0002E0   740E         MOV       A,#0xe
   \   0002E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E5   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   2272                }
   \                     ??CrossCallReturnLabel_395:
   \   0002E8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2273          
   2274                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zcl_ProcessMessageMSG_13:
   \   0002EB   7409         MOV       A,#0x9
   \   0002ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F0   E0           MOVX      A,@DPTR
   \   0002F1   F8           MOV       R0,A
   \   0002F2   6058         JZ        ??zcl_ProcessMessageMSG_15
   \   0002F4   7402         MOV       A,#0x2
   \   0002F6   68           XRL       A,R0
   \   0002F7   6053         JZ        ??zcl_ProcessMessageMSG_15
   \   0002F9   7403         MOV       A,#0x3
   \   0002FB   68           XRL       A,R0
   \   0002FC   604E         JZ        ??zcl_ProcessMessageMSG_15
   \   0002FE   7405         MOV       A,#0x5
   \   000300   68           XRL       A,R0
   \   000301   6049         JZ        ??zcl_ProcessMessageMSG_15
   \   000303   7406         MOV       A,#0x6
   \   000305   68           XRL       A,R0
   \   000306   6044         JZ        ??zcl_ProcessMessageMSG_15
   \   000308   7408         MOV       A,#0x8
   \   00030A   68           XRL       A,R0
   \   00030B   603F         JZ        ??zcl_ProcessMessageMSG_15
   \   00030D   740C         MOV       A,#0xc
   \   00030F   68           XRL       A,R0
   \   000310   603A         JZ        ??zcl_ProcessMessageMSG_15
   \   000312   7411         MOV       A,#0x11
   \   000314   68           XRL       A,R0
   \   000315   6035         JZ        ??zcl_ProcessMessageMSG_15
   \   000317   7413         MOV       A,#0x13
   \   000319   68           XRL       A,R0
   \   00031A   6030         JZ        ??zcl_ProcessMessageMSG_15
   \   00031C   7415         MOV       A,#0x15
   \   00031E   68           XRL       A,R0
   \   00031F   602B         JZ        ??zcl_ProcessMessageMSG_15
   \   000321   740B         MOV       A,#0xb
   \   000323   68           XRL       A,R0
   \   000324   6026         JZ        ??zcl_ProcessMessageMSG_15
   2275                {
   2276                  rawAFMsg = NULL;
   2277                  return ( ZCL_PROC_SUCCESS ); // We're done
   2278                }
   2279          
   2280                status = ZSuccess;
   \   000326   7E00         MOV       R6,#0x0
   \   000328   8042         SJMP      ??zcl_ProcessMessageMSG_16
   2281              }
   2282              else
   2283              {
   2284                // Unsupported message
   2285                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_12:
   \   00032A   7E82         MOV       R6,#-0x7e
   \   00032C   803E         SJMP      ??zcl_ProcessMessageMSG_16
   2286              }
   2287            }
   2288            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2289            {
   2290              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_11:
   \   00032E   E8           MOV       A,R0
   \   00032F   49           ORL       A,R1
   \   000330   602A         JZ        ??zcl_ProcessMessageMSG_17
   \   000332   8882         MOV       DPL,R0
   \   000334   8983         MOV       DPH,R1
   \   000336   A3           INC       DPTR
   \   000337   A3           INC       DPTR
   \   000338   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00033B   601F         JZ        ??zcl_ProcessMessageMSG_17
   2291              {
   2292                // The return value of the plugin function will be
   2293                //  ZSuccess - Supported and need default response
   2294                //  ZFailure - Unsupported
   2295                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2296                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2297                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2298                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2299                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   00033D                ; Setup parameters for indirect call
   \   00033D   7402         MOV       A,#0x2
   \   00033F   12....       LCALL     ?XSTACK_DISP101_8
   \   000342   12....       LCALL     ?CALL_IND
   \   000345   E9           MOV       A,R1
   \   000346   FE           MOV       R6,A
   2300                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   000347   74FF         MOV       A,#-0x1
   \   000349   6E           XRL       A,R6
   \   00034A   700B         JNZ       ??zcl_ProcessMessageMSG_18
   2301                {
   2302                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_15:
   \   00034C   90....       MOV       DPTR,#rawAFMsg
   \   00034F   E4           CLR       A
   \   000350   F0           MOVX      @DPTR,A
   \   000351   A3           INC       DPTR
   \   000352   F0           MOVX      @DPTR,A
   2303                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   000353   F9           MOV       R1,A
   \   000354   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2304                }
   2305              }
   2306          
   2307              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_18:
   \   000357   7401         MOV       A,#0x1
   \   000359   6E           XRL       A,R6
   \   00035A   7010         JNZ       ??zcl_ProcessMessageMSG_16
   2308              {
   2309                // Unsupported message
   2310                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_17:
   \   00035C   7404         MOV       A,#0x4
   \   00035E   12....       LCALL     ?XSTACK_DISP0_8
   \   000361   E0           MOVX      A,@DPTR
   \   000362   5404         ANL       A,#0x4
   \   000364   6004         JZ        ??zcl_ProcessMessageMSG_19
   2311                {
   2312                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   000366   7E83         MOV       R6,#-0x7d
   \   000368   8002         SJMP      ??zcl_ProcessMessageMSG_16
   2313                }
   2314                else
   2315                {
   2316                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_19:
   \   00036A   7E81         MOV       R6,#-0x7f
   2317                }
   2318              }
   2319            }
   2320          
   2321            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_16:
   \   00036C   7402         MOV       A,#0x2
   \   00036E   12....       LCALL     ?XSTACK_DISP0_8
   \   000371   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000374   7075         JNZ       ??zcl_ProcessMessageMSG_20
   \   000376   7402         MOV       A,#0x2
   \   000378   12....       LCALL     ?XSTACK_DISP0_8
   \   00037B   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   00037E   706B         JNZ       ??zcl_ProcessMessageMSG_20
   \   000380   7404         MOV       A,#0x4
   \   000382   12....       LCALL     ?XSTACK_DISP0_8
   \   000385   E0           MOVX      A,@DPTR
   \   000386   FA           MOV       R2,A
   \   000387   5410         ANL       A,#0x10
   \   000389   7060         JNZ       ??zcl_ProcessMessageMSG_20
   2322            {
   2323              // Send a Default Response command back
   2324              defautlRspCmd.statusCode = status;
   \   00038B   7401         MOV       A,#0x1
   \   00038D   12....       LCALL     ?XSTACK_DISP0_8
   \   000390   EE           MOV       A,R6
   \   000391   F0           MOVX      @DPTR,A
   2325              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   000392   7409         MOV       A,#0x9
   \   000394   12....       LCALL     ?XSTACK_DISP0_8
   \   000397   12....       LCALL     ?Subroutine111 & 0xFFFF
   2326              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2327                                     inMsg.msg->clusterId, &defautlRspCmd,
   2328                                     !inMsg.hdr.fc.direction, true,
   2329                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_206:
   \   00039A   12....       LCALL     ?XSTACK_DISP0_8
   \   00039D   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0003A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003A3   7407         MOV       A,#0x7
   \   0003A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0003AB   75..01       MOV       ?V0,#0x1
   \   0003AE   78..         MOV       R0,#?V0
   \   0003B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003B3   EA           MOV       A,R2
   \   0003B4   13           RRC       A
   \   0003B5   13           RRC       A
   \   0003B6   13           RRC       A
   \   0003B7   541F         ANL       A,#0x1f
   \   0003B9   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0003BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003BF   7405         MOV       A,#0x5
   \   0003C1   12....       LCALL     ?XSTACK_DISP100_8
   \   0003C4   88..         MOV       ?V0,R0
   \   0003C6   89..         MOV       ?V1,R1
   \   0003C8   78..         MOV       R0,#?V0
   \   0003CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003CD   7409         MOV       A,#0x9
   \   0003CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D2   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0003D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D8   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0003DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0003DE   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0003E1   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0003E4   7407         MOV       A,#0x7
   \   0003E6   12....       LCALL     ?DEALLOC_XSTACK8
   2330              defaultResponseSent = TRUE;
   \   0003E9   D2..         SETB      ?VB.0
   2331            }
   2332          
   2333            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_20:
   \   0003EB   90....       MOV       DPTR,#rawAFMsg
   \   0003EE   E4           CLR       A
   \   0003EF   F0           MOVX      @DPTR,A
   \   0003F0   A3           INC       DPTR
   \   0003F1   F0           MOVX      @DPTR,A
   2334            if ( status == ZSuccess )
   \   0003F2   EE           MOV       A,R6
   \   0003F3   7004         JNZ       ??zcl_ProcessMessageMSG_21
   2335            {
   2336              return ( ZCL_PROC_SUCCESS );
   \   0003F5   7900         MOV       R1,#0x0
   \   0003F7   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2337            }
   2338            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_21:
   \   0003F9   7484         MOV       A,#-0x7c
   \   0003FB   6E           XRL       A,R6
   \   0003FC   A2..         MOV       C,?VB.0
   \   0003FE   700A         JNZ       ??zcl_ProcessMessageMSG_22
   2339            {
   2340              if ( defaultResponseSent )
   \   000400   5004         JNC       ??zcl_ProcessMessageMSG_23
   2341              {
   2342                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   000402   7907         MOV       R1,#0x7
   \   000404   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2343              }
   2344              else
   2345              {
   2346                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_23:
   \   000406   7906         MOV       R1,#0x6
   \   000408   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2347              }
   2348            }
   2349            else
   2350            {
   2351              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_22:
   \   00040A   5004         JNC       ??zcl_ProcessMessageMSG_24
   2352              {
   2353                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   00040C   7909         MOV       R1,#0x9
   \   00040E   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2354              }
   2355              else
   2356              {
   2357                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_24:
   \   000410   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   000412   7415         MOV       A,#0x15
   2358              }
   2359            }
   \   000414   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   2360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006                ; Setup parameters for call to function zclParseHdr
   \   000006                ; Setup parameters for call to function afFindEndPointDesc
   \   000006   85..82       MOV       DPL,?V0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV       A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7409         MOV       A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000003   C8           XCH       A,R0
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000003   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000006   7409         MOV       A,#0x9
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine198_0
   \   000004                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000003   E582         MOV       A,DPL
   \   000005   4583         ORL       A,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F583         MOV       DPH,A
   \   000002   E4           CLR       A
   \   000003   93           MOVC      A,@A+DPTR
   \   000004   F8           MOV       R0,A
   \   000005   7401         MOV       A,#0x1
   \   000007   93           MOVC      A,@A+DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000003                REQUIRE ??Subroutine213_0
   \   000003                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine227_0
   \   000004                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000003   6401         XRL       A,#0x1
   \   000005   5401         ANL       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   6401         XRL       A,#0x1
   \   000002   5401         ANL       A,#0x1
   \   000004   F5..         MOV       ?V0,A
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000003   740A         MOV       A,#0xa
   \   000005   22           RET
   2361          
   2362          /*********************************************************************
   2363           * PRIVATE FUNCTIONS
   2364           *********************************************************************/
   2365          
   2366          /*********************************************************************
   2367           * @fn      zclParseHdr
   2368           *
   2369           * @brief   Parse header of the ZCL format
   2370           *
   2371           * @param   hdr - place to put the frame control information
   2372           * @param   pData - incoming buffer to parse
   2373           *
   2374           * @return  pointer past the header
   2375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2376          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2377          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2378            // Clear the header
   2379            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2380          
   2381            // Parse the Frame Control
   2382            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   12....       LCALL     ?Subroutine21 & 0xFFFF
   2383            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_683:
   \   000036   A2E2         MOV       C,0xE0 /* A   */.2
   \   000038   5004         JNC       ??zclParseHdr_0
   \   00003A   D2F0         SETB      B.0
   \   00003C   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   00003E   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000040   85..82       MOV       DPL,?V0
   \   000043   85..83       MOV       DPH,?V1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   54FB         ANL       A,#0xfb
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A2F0         MOV       C,B.0
   \   00004C   E4           CLR       A
   \   00004D   33           RLC       A
   \   00004E   F5..         MOV       ?V2,A
   \   000050   75..00       MOV       ?V3,#0x0
   \   000053   7402         MOV       A,#0x2
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?S_SHL
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   45..         ORL       A,?V2
   \   00005D   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   2384            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_684:
   \   000060   A2E3         MOV       C,0xE0 /* A   */.3
   \   000062   85..82       MOV       DPL,?V0
   \   000065   85..83       MOV       DPH,?V1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   5004         JNC       ??zclParseHdr_2
   2385            {
   2386              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006B   4408         ORL       A,#0x8
   \   00006D   8002         SJMP      ??zclParseHdr_3
   2387            }
   2388            else
   2389            {
   2390              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   00006F   54F7         ANL       A,#0xf7
   2391            }
   \                     ??zclParseHdr_3:
   \   000071   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   2392          
   2393            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_685:
   \   000074   A2E4         MOV       C,0xE0 /* A   */.4
   \   000076   5004         JNC       ??zclParseHdr_4
   \   000078   D2F0         SETB      B.0
   \   00007A   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007C   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   54EF         ANL       A,#0xef
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A2F0         MOV       C,B.0
   \   00008A   E4           CLR       A
   \   00008B   33           RLC       A
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   7404         MOV       A,#0x4
   \   000090   78..         MOV       R0,#?V2
   \   000092   12....       LCALL     ?S_SHL
   \   000095   E0           MOVX      A,@DPTR
   \   000096   45..         ORL       A,?V2
   \   000098   12....       LCALL     ?Subroutine18 & 0xFFFF
   2394            pData++;  // move past the frame control field
   2395          
   2396            // parse the manfacturer code
   2397            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_12:
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   5404         ANL       A,#0x4
   \   0000A4   601C         JZ        ??zclParseHdr_6
   2398            {
   2399              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   FA           MOV       R2,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F9           MOV       R1,A
   \   0000AF   EA           MOV       A,R2
   \   0000B0   85..82       MOV       DPL,?V0
   \   0000B3   85..83       MOV       DPH,?V1
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   2400              pData += 2;
   \                     ??CrossCallReturnLabel_471:
   \   0000BB   EE           MOV       A,R6
   \   0000BC   2402         ADD       A,#0x2
   \   0000BE   FE           MOV       R6,A
   \   0000BF   5001         JNC       ??zclParseHdr_6
   \   0000C1   0F           INC       R7
   2401            }
   2402          
   2403            // parse the Transaction Sequence Number
   2404            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000C9   A3           INC       DPTR
   \   0000CA   12....       LCALL     ?Subroutine30 & 0xFFFF
   2405          
   2406            // parse the Cluster's command ID
   2407            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_356:
   \   0000CD   85..82       MOV       DPL,?V0
   \   0000D0   85..83       MOV       DPH,?V1
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   F0           MOVX      @DPTR,A
   2408          
   2409            // Should point to the frame payload
   2410            return ( pData );
   \   0000D9   EE           MOV       A,R6
   \   0000DA   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   0000DD   3F           ADDC      A,R7
   \   0000DE   FB           MOV       R3,A
   \   0000DF   02....       LJMP      ?Subroutine4 & 0xFFFF
   2411          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine199_0
   \   000001                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   AE82         MOV       R6,DPL
   \   000008   AF83         MOV       R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine250_0
   \   000003                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2412          
   2413          /*********************************************************************
   2414           * @fn      zclBuildHdr
   2415           *
   2416           * @brief   Build header of the ZCL format
   2417           *
   2418           * @param   hdr - outgoing header information
   2419           * @param   pData - outgoing header space
   2420           *
   2421           * @return  pointer past the header
   2422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2423          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2424          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2425            // Build the Frame Control byte
   2426            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   2427            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_361:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine42 & 0xFFFF
   2428            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_359:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine42 & 0xFFFF
   2429            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_360:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2430            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2431          
   2432            // Add the manfacturer code
   2433            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   6016         JZ        ??zclBuildHdr_0
   2434            {
   2435              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   12....       LCALL     ?Subroutine134 & 0xFFFF
   2436              *pData++ = HI_UINT16( hdr->manuCode );
   2437            }
   \                     ??CrossCallReturnLabel_240:
   \   000038   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00003B   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   \   000044   EC           MOV       A,R4
   \   000045   2402         ADD       A,#0x2
   \   000047   FC           MOV       R4,A
   \   000048   5001         JNC       ??zclBuildHdr_0
   \   00004A   0D           INC       R5
   2438          
   2439            // Add the Transaction Sequence Number
   2440            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000052   12....       LCALL     ?Subroutine40 & 0xFFFF
   2441          
   2442            // Add the Cluster's command ID
   2443            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_54:
   \   000055   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   2444          
   2445            // Should point to the frame payload
   2446            return ( pData );
   \   00005A   EC           MOV       A,R4
   \   00005B   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   00005E   3D           ADDC      A,R5
   \   00005F   FB           MOV       R3,A
   \   000060   80..         SJMP      ??Subroutine201_0
   2447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine200_0
   \   000007                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine224_0
   \   000004                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   2448          
   2449          /*********************************************************************
   2450           * @fn      zclCalcHdrSize
   2451           *
   2452           * @brief   Calculate the number of bytes needed for an outgoing
   2453           *          ZCL header.
   2454           *
   2455           * @param   hdr - outgoing header information
   2456           *
   2457           * @return  returns the number of bytes needed
   2458           */
   2459          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2460          {
   2461            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2462          
   2463            // Add the manfacturer code
   2464            if ( hdr->fc.manuSpecific )
   2465            {
   2466              needed += 2;
   2467            }
   2468          
   2469            return ( needed );
   2470          }
   2471          
   2472          /*********************************************************************
   2473           * @fn      zclFindPlugin
   2474           *
   2475           * @brief   Find the right plugin for a cluster ID
   2476           *
   2477           * @param   clusterID - cluster ID to look for
   2478           * @param   profileID - profile ID
   2479           *
   2480           * @return  pointer to plugin, NULL if not found
   2481           */
   2482          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2483          {
   2484            zclLibPlugin_t *pLoop = plugins;
   2485          
   2486            (void)profileID;  // Intentionally unreferenced parameter
   2487          
   2488            while ( pLoop != NULL )
   2489            {
   2490              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2491              {
   2492                return ( pLoop );
   2493              }
   2494          
   2495              pLoop = pLoop->next;
   2496            }
   2497          
   2498            return ( (zclLibPlugin_t *)NULL );
   2499          }
   2500          
   2501          #ifdef ZCL_DISCOVER
   2502          /*********************************************************************
   2503           * @fn      zclFindCmdRecsList
   2504           *
   2505           * @brief   Find the right command record list for an endpoint
   2506           *
   2507           * @param   endpoint - endpoint to look for
   2508           *
   2509           * @return  pointer to record list, NULL if not found
   2510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2511          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   \                     zclFindCmdRecsList:
   2512          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2513            zclCmdRecsList_t *pLoop = gpCmdList;
   \   000004   90....       MOV       DPTR,#gpCmdList
   \   000007   8004         SJMP      ??zclFindCmdRecsList_0
   2514          
   2515            while ( pLoop != NULL )
   2516            {
   2517              if ( pLoop->endpoint == endpoint )
   2518              {
   2519                return ( pLoop );
   2520              }
   2521          
   2522              pLoop = pLoop->pNext;
   \                     ??zclFindCmdRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindCmdRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000010   600C         JZ        ??zclFindCmdRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindCmdRecsList_1
   \   00001C   8004         SJMP      ??zclFindCmdRecsList_3
   2523            }
   2524          
   2525            return ( NULL );
   \                     ??zclFindCmdRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindCmdRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2526          }
   2527          
   2528          /*********************************************************************
   2529           * @fn      zclFindCmdRec
   2530           *
   2531           * @brief   Find the command record that matchs the parameters
   2532           *
   2533           * @param   endpoint - Application's endpoint
   2534           * @param   clusterID - cluster ID
   2535           * @param   attrId - attribute looking for
   2536           * @param   pAttr - attribute record to be returned
   2537           *
   2538           * @return  TRUE if record found. FALSE, otherwise.
   2539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2540          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   \                     zclFindCmdRec:
   2541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2542            uint8 i;
   2543            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000B   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   2544          
   2545            if ( pRec != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   605F         JZ        ??zclFindCmdRec_0
   2546            {
   2547              for ( i = 0; i < pRec->numCommands; i++ )
   \   000012   7C00         MOV       R4,#0x0
   \   000014   8001         SJMP      ??zclFindCmdRec_1
   \                     ??zclFindCmdRec_2:
   \   000016   0C           INC       R4
   \                     ??zclFindCmdRec_1:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000021   504E         JNC       ??zclFindCmdRec_0
   2548              {
   2549                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   \   000023   EC           MOV       A,R4
   \   000024   F5..         MOV       ?V2,A
   \   000026   75..00       MOV       ?V3,#0x0
   \   000029   7402         MOV       A,#0x2
   \   00002B   78..         MOV       R0,#?V2
   \   00002D   12....       LCALL     ?S_SHL
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   25..         ADD       A,?V2
   \   00003B   F8           MOV       R0,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   35..         ADDC      A,?V3
   \   000040   F9           MOV       R1,A
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   E4           CLR       A
   \   000046   93           MOVC      A,@A+DPTR
   \   000047   F5..         MOV       ?V2,A
   \   000049   7401         MOV       A,#0x1
   \   00004B   93           MOVC      A,@A+DPTR
   \   00004C   F5..         MOV       ?V3,A
   \   00004E   EE           MOV       A,R6
   \   00004F   65..         XRL       A,?V2
   \   000051   7003         JNZ       ??zclFindCmdRec_3
   \   000053   EF           MOV       A,R7
   \   000054   65..         XRL       A,?V3
   \                     ??zclFindCmdRec_3:
   \   000056   70BE         JNZ       ??zclFindCmdRec_2
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E4           CLR       A
   \   00005B   93           MOVC      A,@A+DPTR
   \   00005C   65..         XRL       A,?V1
   \   00005E   70B6         JNZ       ??zclFindCmdRec_2
   2550                {
   2551                  *pCmd = pRec->pCmdRecs[i];
   \   000060   740C         MOV       A,#0xc
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2552          
   2553                  return ( TRUE ); // EMBEDDED RETURN
   \   00006D   7901         MOV       R1,#0x1
   \   00006F   8002         SJMP      ??zclFindCmdRec_4
   2554                }
   2555              }
   2556            }
   2557          
   2558            return ( FALSE );
   \                     ??zclFindCmdRec_0:
   \   000071   7900         MOV       R1,#0x0
   \                     ??zclFindCmdRec_4:
   \   000073   02....       LJMP      ?Subroutine4 & 0xFFFF
   2559          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000003   8983         MOV       DPH,R1
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   EC           MOV       A,R4
   \   000003   C3           CLR       C
   \   000004   98           SUBB      A,R0
   \   000005   22           RET
   2560          #endif // ZCL_DISCOVER
   2561          
   2562          /*********************************************************************
   2563           * @fn      zclFindAttrRecsList
   2564           *
   2565           * @brief   Find the right attribute record list for an endpoint
   2566           *
   2567           * @param   clusterID - endpointto look for
   2568           *
   2569           * @return  pointer to record list, NULL if not found
   2570           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2571          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2572          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2573            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2574          
   2575            while ( pLoop != NULL )
   2576            {
   2577              if ( pLoop->endpoint == endpoint )
   2578              {
   2579                return ( pLoop );
   2580              }
   2581          
   2582              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2583            }
   2584          
   2585            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2586          }
   2587          
   2588          /*********************************************************************
   2589           * @fn      zclFindAttrRec
   2590           *
   2591           * @brief   Find the attribute record that matchs the parameters
   2592           *
   2593           * @param   endpoint - Application's endpoint
   2594           * @param   clusterID - cluster ID
   2595           * @param   attrId - attribute looking for
   2596           * @param   pAttr - attribute record to be returned
   2597           *
   2598           * @return  TRUE if record found. FALSE, otherwise.
   2599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2600          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2601          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2602            uint8 x;
   2603            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   2604          
   2605            if ( pRec != NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6068         JZ        ??zclFindAttrRec_0
   2606            {
   2607              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000014   7C00         MOV       R4,#0x0
   \   000016   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   000018   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000027   5053         JNC       ??zclFindAttrRec_0
   2608              {
   2609                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   000029   EC           MOV       A,R4
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   75..00       MOV       ?V5,#0x0
   \   00002F   7403         MOV       A,#0x3
   \   000031   78..         MOV       R0,#?V4
   \   000033   12....       LCALL     ?S_SHL
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   25..         ADD       A,?V4
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   35..         ADDC      A,?V5
   \   00004A   F9           MOV       R1,A
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000052   E5..         MOV       A,?V0
   \   000054   65..         XRL       A,?V4
   \   000056   7004         JNZ       ??zclFindAttrRec_3
   \   000058   E5..         MOV       A,?V1
   \   00005A   65..         XRL       A,?V5
   \                     ??zclFindAttrRec_3:
   \   00005C   70BA         JNZ       ??zclFindAttrRec_2
   \   00005E   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000061   EE           MOV       A,R6
   \   000062   65..         XRL       A,?V4
   \   000064   7003         JNZ       ??zclFindAttrRec_4
   \   000066   EF           MOV       A,R7
   \   000067   65..         XRL       A,?V5
   \                     ??zclFindAttrRec_4:
   \   000069   70AD         JNZ       ??zclFindAttrRec_2
   2610                {
   2611                  *pAttr = pRec->attrs[x];
   \   00006B   740E         MOV       A,#0xe
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2612          
   2613                  return ( TRUE ); // EMBEDDED RETURN
   \   000078   7901         MOV       R1,#0x1
   \   00007A   8002         SJMP      ??zclFindAttrRec_5
   2614                }
   2615              }
   2616            }
   2617          
   2618            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   00007C   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   00007E   02....       LJMP      ??Subroutine207_0 & 0xFFFF
   2619          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine203_0
   \   000002                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   F5..         MOV       ?V4,A
   \   000004   7401         MOV       A,#0x1
   \   000006   93           MOVC      A,@A+DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET
   2620          
   2621          #if defined ( ZCL_STANDALONE )
   2622          /*********************************************************************
   2623           * @fn      zclSetAttrRecList
   2624           *
   2625           * @brief   Set attribute record list for end point
   2626           *
   2627           * @param   endpoint - endpoint the attribute list belongs to
   2628           * @param   numAttr - number of attributes in list
   2629           * @param   attrList - array of attribute records.
   2630           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2631           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2632           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2633           *                     ATTRIBUTE INFO
   2634           *
   2635           * @return  TRUE if successful, FALSE otherwise.
   2636           */
   2637          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2638          {
   2639            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2640          
   2641            if ( pRecsList != NULL )
   2642            {
   2643              pRecsList->numAttributes = numAttr;
   2644              pRecsList->attrs = attrList;
   2645              return ( TRUE );
   2646            }
   2647          
   2648            return ( FALSE );
   2649          }
   2650          
   2651          #endif // ZCL_STANDALONE
   2652          
   2653          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2654          /*********************************************************************
   2655           * @fn      zclGetReadWriteCB
   2656           *
   2657           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2658           *
   2659           * @param   endpoint - Application's endpoint
   2660           *
   2661           * @return  Read/Write CB, NULL if not found
   2662           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2663          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2664          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2665            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2666          
   2667            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetReadWriteCB_0
   2668            {
   2669              return ( pRec->pfnReadWriteCB );
   \   000012   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   2670            }
   \                     ??CrossCallReturnLabel_412:
   \   000015   8004         SJMP      ??zclGetReadWriteCB_1
   2671          
   2672            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   00001B   02....       LJMP      ??Subroutine202_0 & 0xFFFF
   2673          }
   2674          
   2675          /*********************************************************************
   2676           * @fn      zclGetAuthorizeCB
   2677           *
   2678           * @brief   Get the Read/Write Authorization callback function pointer
   2679           *          for a given endpoint.
   2680           *
   2681           * @param   endpoint - Application's endpoint
   2682           *
   2683           * @return  Authorization CB, NULL if not found
   2684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2685          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2687            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2688          
   2689            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetAuthorizeCB_0
   2690            {
   2691              return ( pRec->pfnAuthorizeCB );
   \   000012   12....       LCALL     ?Subroutine84 & 0xFFFF
   2692            }
   \                     ??CrossCallReturnLabel_416:
   \   000015   8004         SJMP      ??zclGetAuthorizeCB_1
   2693          
   2694            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   00001B   02....       LJMP      ??Subroutine202_0 & 0xFFFF
   2695          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine208_0
   \   000001                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0
   2696          #endif // ZCL_READ || ZCL_WRITE
   2697          
   2698          /*********************************************************************
   2699           * @fn      zclFindClusterOption
   2700           *
   2701           * @brief   Find the option record that matchs the cluster id
   2702           *
   2703           * @param   endpoint - Application's endpoint
   2704           * @param   clusterID - cluster ID looking for
   2705           *
   2706           * @return  pointer to clutser option, NULL if not found
   2707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2708          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2709          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2710            zclClusterOptionList *pLoop;
   2711          
   2712            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2713            while ( pLoop != NULL )
   2714            {
   2715              if ( pLoop->endpoint == endpoint )
   2716              {
   2717                uint8 x;
   2718                for ( x = 0; x < pLoop->numOptions; x++ )
   2719                {
   2720                  if ( pLoop->options[x].clusterID == clusterID )
   2721                  {
   2722                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2723                  }
   2724                }
   2725              }
   2726          
   2727              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000017   6046         JZ        ??zclFindClusterOption_2
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6E           XRL       A,R6
   \   000021   70ED         JNZ       ??zclFindClusterOption_1
   \   000023   7F00         MOV       R7,#0x0
   \   000025   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000027   0F           INC       R7
   \                     ??zclFindClusterOption_3:
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   C3           CLR       C
   \   000033   9A           SUBB      A,R2
   \   000034   50DA         JNC       ??zclFindClusterOption_1
   \   000036   EF           MOV       A,R7
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FA           MOV       R2,A
   \   00003C   85F0..       MOV       ?V0,B
   \   00003F   AB..         MOV       R3,?V0
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   3B           ADDC      A,R3
   \   00004F   FB           MOV       R3,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6C           XRL       A,R4
   \   000056   7003         JNZ       ??zclFindClusterOption_5
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005B   70CA         JNZ       ??zclFindClusterOption_4
   \   00005D   8004         SJMP      ??zclFindClusterOption_6
   2728            }
   2729          
   2730            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000063   02....       LJMP      ??Subroutine201_0 & 0xFFFF
   2731          }
   2732          
   2733          /*********************************************************************
   2734           * @fn      zclGetClusterOption
   2735           *
   2736           * @brief   Get the option record that matchs the cluster id
   2737           *
   2738           * @param   endpoint - Application's endpoint
   2739           * @param   clusterID - cluster ID looking for
   2740           *
   2741           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2743          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2745            uint8 option;
   2746            zclOptionRec_t *pOption;
   2747          
   2748            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2749            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2750            {
   2751              option = pOption->option;
   2752              if ( !ZG_SECURE_ENABLED )
   2753              {
   2754                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2755              }
   2756          
   2757              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2758            }
   2759          
   2760            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A   80..         SJMP      ??Subroutine202_0
   2761          }
   2762          
   2763          /*********************************************************************
   2764           * @fn      zclSetSecurityOption
   2765           *
   2766           * @brief   Set the security option for the cluster id
   2767           *
   2768           * @param   endpoint - Application's endpoint
   2769           * @param   clusterID - cluster ID looking for
   2770           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2771           *
   2772           * @return  none
   2773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2774          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2775          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2776            zclOptionRec_t *pOption;
   2777          
   2778            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   2779            if ( pOption != NULL )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6015         JZ        ??zclSetSecurityOption_0
   2780            {
   2781              if ( enable )
   \   000016   E8           MOV       A,R0
   \   000017   2402         ADD       A,#0x2
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??zclSetSecurityOption_1
   2782              {
   2783                pOption->option |= AF_EN_SECURITY;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E6         SETB      0xE0 /* A   */.6
   \   000025   8003         SJMP      ??zclSetSecurityOption_2
   2784              }
   2785              else
   2786              {
   2787                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   00002A   F0           MOVX      @DPTR,A
   2788              }
   2789            }
   2790          }
   \                     ??zclSetSecurityOption_0:
   \   00002B   80..         SJMP      ??Subroutine202_0
   2791          
   2792          #ifdef ZCL_DISCOVER
   2793          /*********************************************************************
   2794           * @fn      zclFindNextCmdRec
   2795           *
   2796           * @brief   Find the command (or next) record that matchs the parameters
   2797           *
   2798           * @param   endpoint - Application's endpoint
   2799           * @param   clusterID - cluster ID
   2800           * @param   commandID - command ID from requesting command
   2801           * @param   direction- direction of received command
   2802           * @param   pCmdID - command looking for
   2803           * @param   pCmd - command information within command record list
   2804           *
   2805           * @return  pointer to command record, NULL no more records of this cluster
   2806           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2807          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   \                     zclFindNextCmdRec:
   2808                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FF           MOV       R7,A
   \   00000B   8D..         MOV       ?V0,R5
   2810            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000D   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AC..         MOV       R4,?V2
   \   000016   AD..         MOV       R5,?V3
   2811            uint8 i;
   2812          
   2813            if ( pRec != NULL )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   2814            {
   2815              for ( i = 0; i < pRec->numCommands; i++ )
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   740E         MOV       A,#0xe
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   00002A   8014         SJMP      ??zclFindNextCmdRec_1
   2816              {
   2817                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2818                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2819                {
   2820                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2821                  {
   2822                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   \                     ??zclFindNextCmdRec_2:
   \   00002C   85..82       MOV       DPL,?V2
   \   00002F   85..83       MOV       DPH,?V3
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   93           MOVC      A,@A+DPTR
   \   000037   A2E3         MOV       C,0xE0 /* A   */.3
   \   000039   5003         JNC       $+5
   \   00003B   02....       LJMP      ??zclFindNextCmdRec_3 & 0xFFFF
   \                     ??zclFindNextCmdRec_4:
   \   00003E   05..         INC       ?V1
   \                     ??zclFindNextCmdRec_1:
   \   000040   8C82         MOV       DPL,R4
   \   000042   8D83         MOV       DPH,R5
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V1
   \   00004B   C3           CLR       C
   \   00004C   98           SUBB      A,R0
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   \   000052   E5..         MOV       A,?V1
   \   000054   F5..         MOV       ?V2,A
   \   000056   75..00       MOV       ?V3,#0x0
   \   000059   7402         MOV       A,#0x2
   \   00005B   78..         MOV       R0,#?V2
   \   00005D   12....       LCALL     ?S_SHL
   \   000060   8C82         MOV       DPL,R4
   \   000062   8D83         MOV       DPH,R5
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   25..         ADD       A,?V2
   \   00006B   F5..         MOV       ?V2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   35..         ADDC      A,?V3
   \   000071   F5..         MOV       ?V3,A
   \   000073   85..82       MOV       DPL,?V2
   \   000076   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000079   E5..         MOV       A,?V4
   \   00007B   68           XRL       A,R0
   \   00007C   7003         JNZ       ??zclFindNextCmdRec_5
   \   00007E   E5..         MOV       A,?V5
   \   000080   69           XRL       A,R1
   \                     ??zclFindNextCmdRec_5:
   \   000081   70BB         JNZ       ??zclFindNextCmdRec_4
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   85..82       MOV       DPL,?V2
   \   00008C   85..83       MOV       DPH,?V3
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E4           CLR       A
   \   000092   93           MOVC      A,@A+DPTR
   \   000093   C3           CLR       C
   \   000094   98           SUBB      A,R0
   \   000095   40A7         JC        ??zclFindNextCmdRec_4
   \   000097   7411         MOV       A,#0x11
   \   000099   6F           XRL       A,R7
   \   00009A   701B         JNZ       ??zclFindNextCmdRec_6
   \   00009C   7401         MOV       A,#0x1
   \   00009E   65..         XRL       A,?V0
   \   0000A0   608A         JZ        ??zclFindNextCmdRec_2
   2823                    {
   2824                      *pCmd = pRec->pCmdRecs[i];
   2825          
   2826                      // Update command ID
   2827                      *pCmdID = pCmd->cmdID;
   2828          
   2829                      return ( TRUE ); // EMBEDDED RETURN
   2830                    }
   2831                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   7098         JNZ       ??zclFindNextCmdRec_4
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E4           CLR       A
   \   0000B0   93           MOVC      A,@A+DPTR
   \   0000B1   A2E2         MOV       C,0xE0 /* A   */.2
   \                     ??zclFindNextCmdRec_7:
   \   0000B3   4035         JC        ??zclFindNextCmdRec_3
   \   0000B5   8087         SJMP      ??zclFindNextCmdRec_4
   2832                    {
   2833                      *pCmd = pRec->pCmdRecs[i];
   2834          
   2835                      // Update command ID
   2836                      *pCmdID = pCmd->cmdID;
   2837          
   2838                      return ( TRUE ); // EMBEDDED RETURN
   2839                    }
   2840                  }
   2841                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zclFindNextCmdRec_6:
   \   0000B7   7413         MOV       A,#0x13
   \   0000B9   6F           XRL       A,R7
   \   0000BA   704C         JNZ       ??zclFindNextCmdRec_0
   2842                  {
   2843                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   700F         JNZ       ??zclFindNextCmdRec_8
   \   0000C0   85..82       MOV       DPL,?V2
   \   0000C3   85..83       MOV       DPH,?V3
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   E4           CLR       A
   \   0000CA   93           MOVC      A,@A+DPTR
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   80E4         SJMP      ??zclFindNextCmdRec_7
   2844                    {
   2845                      *pCmd = pRec->pCmdRecs[i];
   2846          
   2847                      // Update command ID
   2848                      *pCmdID = pCmd->cmdID;
   2849          
   2850                      return ( TRUE ); // EMBEDDED RETURN
   2851                    }
   2852                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   \                     ??zclFindNextCmdRec_8:
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   65..         XRL       A,?V0
   \   0000D3   6003         JZ        $+5
   \   0000D5   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \   0000D8   85..82       MOV       DPL,?V2
   \   0000DB   85..83       MOV       DPH,?V3
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   E4           CLR       A
   \   0000E2   93           MOVC      A,@A+DPTR
   \   0000E3   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000E5   4003         JC        $+5
   \   0000E7   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \                     ??zclFindNextCmdRec_3:
   \   0000EA   7410         MOV       A,#0x10
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine100 & 0xFFFF
   2853                    {
   2854                      *pCmd = pRec->pCmdRecs[i];
   \                     ??CrossCallReturnLabel_177:
   \   0000F2   E8           MOV       A,R0
   \   0000F3   FC           MOV       R4,A
   \   0000F4   E9           MOV       A,R1
   \   0000F5   FD           MOV       R5,A
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2855          
   2856                      // Update command ID
   2857                      *pCmdID = pCmd->cmdID;
   \   0000FB   8882         MOV       DPL,R0
   \   0000FD   8983         MOV       DPH,R1
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   12....       LCALL     ?Subroutine127 & 0xFFFF
   2858          
   2859                      return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_227:
   \   000104   7901         MOV       R1,#0x1
   \   000106   8002         SJMP      ??zclFindNextCmdRec_9
   2860                    }
   2861                  }
   2862                  else
   2863                  {
   2864                    return ( FALSE ); // Incorrect Command ID
   2865                  }
   2866                }
   2867              }
   2868            }
   2869          
   2870            return ( FALSE );
   \                     ??zclFindNextCmdRec_0:
   \   000108   7900         MOV       R1,#0x0
   \                     ??zclFindNextCmdRec_9:
   \   00010A   02....       LJMP      ??Subroutine207_0 & 0xFFFF
   2871          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   22           RET
   2872          
   2873          /*********************************************************************
   2874           * @fn      zclFindNextAttrRec
   2875           *
   2876           * @brief   Find the attribute (or next) record that matchs the parameters
   2877           *
   2878           * @param   endpoint - Application's endpoint
   2879           * @param   clusterID - cluster ID
   2880           * @param   attr - attribute looking for
   2881           *
   2882           * @return  pointer to attribute record, NULL if not found
   2883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2884          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   \                     zclFindNextAttrRec:
   2885                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2886          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FF           MOV       R7,A
   2887            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000B   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   AC..         MOV       R4,?V0
   \   000014   AD..         MOV       R5,?V1
   2888            uint8 attrDir;
   2889          
   2890            if ( pRec != NULL )
   \   000016   EC           MOV       A,R4
   \   000017   4D           ORL       A,R5
   \   000018   7003         JNZ       $+5
   \   00001A   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2891            {
   2892              uint16 x;
   2893          
   2894              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001D   7A00         MOV       R2,#0x0
   \   00001F   7B00         MOV       R3,#0x0
   \   000021   7410         MOV       A,#0x10
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000029   8005         SJMP      ??zclFindNextAttrRec_1
   \                     ??zclFindNextAttrRec_2:
   \   00002B   0A           INC       R2
   \   00002C   EA           MOV       A,R2
   \   00002D   7001         JNZ       ??zclFindNextAttrRec_1
   \   00002F   0B           INC       R3
   \                     ??zclFindNextAttrRec_1:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   C3           CLR       C
   \   00003E   EA           MOV       A,R2
   \   00003F   98           SUBB      A,R0
   \   000040   EB           MOV       A,R3
   \   000041   9400         SUBB      A,#0x0
   \   000043   4003         JC        $+5
   \   000045   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2895              {
   2896                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2897                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   7403         MOV       A,#0x3
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?S_SHL
   \   000053   8C82         MOV       DPL,R4
   \   000055   8D83         MOV       DPH,R5
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   25..         ADD       A,?V0
   \   000062   F5..         MOV       ?V0,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   35..         ADDC      A,?V1
   \   000068   F5..         MOV       ?V1,A
   \   00006A   85..82       MOV       DPL,?V0
   \   00006D   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000070   E5..         MOV       A,?V6
   \   000072   68           XRL       A,R0
   \   000073   7003         JNZ       ??zclFindNextAttrRec_3
   \   000075   E5..         MOV       A,?V7
   \   000077   69           XRL       A,R1
   \                     ??zclFindNextAttrRec_3:
   \   000078   70B1         JNZ       ??zclFindNextAttrRec_2
   \   00007A   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   00007D   85..82       MOV       DPL,?V2
   \   000080   85..83       MOV       DPH,?V3
   \   000083   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000086   C3           CLR       C
   \   000087   E5..         MOV       A,?V4
   \   000089   98           SUBB      A,R0
   \   00008A   E5..         MOV       A,?V5
   \   00008C   99           SUBB      A,R1
   \   00008D   409C         JC        ??zclFindNextAttrRec_2
   2898                {
   2899                  // also make sure direction is right
   2900                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2901                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   \   00008F   E5..         MOV       A,?V0
   \   000091   2405         ADD       A,#0x5
   \   000093   F582         MOV       DPL,A
   \   000095   E4           CLR       A
   \   000096   35..         ADDC      A,?V1
   \   000098   F583         MOV       DPH,A
   \   00009A   E4           CLR       A
   \   00009B   93           MOVC      A,@A+DPTR
   \   00009C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00009E   E4           CLR       A
   \   00009F   33           RLC       A
   \   0000A0   6F           XRL       A,R7
   \   0000A1   6006         JZ        ??zclFindNextAttrRec_4
   \   0000A3   E4           CLR       A
   \   0000A4   93           MOVC      A,@A+DPTR
   \   0000A5   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000A7   5082         JNC       ??zclFindNextAttrRec_2
   \                     ??zclFindNextAttrRec_4:
   \   0000A9   7412         MOV       A,#0x12
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine101 & 0xFFFF
   2902                  {
   2903                    // return attribute and found attribute ID
   2904                    *pAttr = pRec->attrs[x];
   \                     ??CrossCallReturnLabel_179:
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FD           MOV       R5,A
   \   0000B5   7408         MOV       A,#0x8
   \   0000B7   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2905                    *attrId = pAttr->attr.attrId;
   \   0000BA   8882         MOV       DPL,R0
   \   0000BC   8983         MOV       DPH,R1
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000C3   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   2906          
   2907                    return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_477:
   \   0000C6   7901         MOV       R1,#0x1
   \   0000C8   8002         SJMP      ??zclFindNextAttrRec_5
   2908                  }
   2909                }
   2910              }
   2911            }
   2912          
   2913            return ( FALSE );
   \                     ??zclFindNextAttrRec_0:
   \   0000CA   7900         MOV       R1,#0x0
   \                     ??zclFindNextAttrRec_5:
   \   0000CC   02....       LJMP      ??Subroutine197_0 & 0xFFFF
   2914          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   22           RET
   2915          #endif // ZCL_DISCOVER
   2916          
   2917          /*********************************************************************
   2918           * @fn      zclSerializeData
   2919           *
   2920           * @brief   Builds a buffer from the attribute data to sent out over
   2921           *          the air.
   2922           *          NOTE - Not compatible with application's attributes callbacks.
   2923           *
   2924           * @param   dataType - data types defined in zcl.h
   2925           * @param   attrData - pointer to the attribute data
   2926           * @param   buf - where to put the serialized data
   2927           *
   2928           * @return  pointer to end of destination buffer
   2929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2930          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2932            uint8 *pStr;
   2933            uint16 len;
   2934          
   2935            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2936            {
   2937              return ( buf );
   2938            }
   2939          
   2940            switch ( dataType )
   \   000014   EA           MOV       A,R2
   \   000015   2402         ADD       A,#0x2
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E..         MOV       ?V0,R6
   \   000028   8F..         MOV       ?V1,R7
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   E9           MOV       A,R1
   \   00002E   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000031   04           DB        4
   \   000032   41           DB        65
   \   000033   42           DB        66
   \   000034   ....         DW        ??zclSerializeData_1
   \   000036   43           DB        67
   \   000037   44           DB        68
   \   000038   ....         DW        ??zclSerializeData_2
   \   00003A   E0           DB        224
   \   00003B   E2           DB        226
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   E8           DB        232
   \   00003F   E9           DB        233
   \   000040   ....         DW        ??zclSerializeData_4
   \   000042   21           DB        33
   \   000043   08           DB        8
   \   000044   ....         DW        ??zclSerializeData_5
   \   000046   09           DB        9
   \   000047   ....         DW        ??zclSerializeData_4
   \   000049   0A           DB        10
   \   00004A   ....         DW        ??zclSerializeData_6
   \   00004C   0B           DB        11
   \   00004D   ....         DW        ??zclSerializeData_3
   \   00004F   10           DB        16
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   18           DB        24
   \   000053   ....         DW        ??zclSerializeData_5
   \   000055   19           DB        25
   \   000056   ....         DW        ??zclSerializeData_4
   \   000058   1A           DB        26
   \   000059   ....         DW        ??zclSerializeData_6
   \   00005B   1B           DB        27
   \   00005C   ....         DW        ??zclSerializeData_3
   \   00005E   20           DB        32
   \   00005F   ....         DW        ??zclSerializeData_5
   \   000061   21           DB        33
   \   000062   ....         DW        ??zclSerializeData_4
   \   000064   22           DB        34
   \   000065   ....         DW        ??zclSerializeData_6
   \   000067   23           DB        35
   \   000068   ....         DW        ??zclSerializeData_3
   \   00006A   24           DB        36
   \   00006B   ....         DW        ??zclSerializeData_7
   \   00006D   25           DB        37
   \   00006E   ....         DW        ??zclSerializeData_8
   \   000070   26           DB        38
   \   000071   ....         DW        ??zclSerializeData_9
   \   000073   27           DB        39
   \   000074   ....         DW        ??zclSerializeData_10
   \   000076   28           DB        40
   \   000077   ....         DW        ??zclSerializeData_5
   \   000079   29           DB        41
   \   00007A   ....         DW        ??zclSerializeData_4
   \   00007C   2A           DB        42
   \   00007D   ....         DW        ??zclSerializeData_6
   \   00007F   2B           DB        43
   \   000080   ....         DW        ??zclSerializeData_3
   \   000082   2C           DB        44
   \   000083   ....         DW        ??zclSerializeData_7
   \   000085   2D           DB        45
   \   000086   ....         DW        ??zclSerializeData_8
   \   000088   2E           DB        46
   \   000089   ....         DW        ??zclSerializeData_9
   \   00008B   2F           DB        47
   \   00008C   ....         DW        ??zclSerializeData_10
   \   00008E   30           DB        48
   \   00008F   ....         DW        ??zclSerializeData_5
   \   000091   31           DB        49
   \   000092   ....         DW        ??zclSerializeData_4
   \   000094   38           DB        56
   \   000095   ....         DW        ??zclSerializeData_4
   \   000097   39           DB        57
   \   000098   ....         DW        ??zclSerializeData_3
   \   00009A   3A           DB        58
   \   00009B   ....         DW        ??zclSerializeData_10
   \   00009D   EA           DB        234
   \   00009E   ....         DW        ??zclSerializeData_3
   \   0000A0   F0           DB        240
   \   0000A1   ....         DW        ??zclSerializeData_10
   \   0000A3   F1           DB        241
   \   0000A4   ....         DW        ??zclSerializeData_11
   \   0000A6   ....         DW        ??zclSerializeData_0
   2941            {
   2942              case ZCL_DATATYPE_DATA8:
   2943              case ZCL_DATATYPE_BOOLEAN:
   2944              case ZCL_DATATYPE_BITMAP8:
   2945              case ZCL_DATATYPE_INT8:
   2946              case ZCL_DATATYPE_UINT8:
   2947              case ZCL_DATATYPE_ENUM8:
   2948                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   0000AF   EC           MOV       A,R4
   \   0000B0   FA           MOV       R2,A
   \   0000B1   ED           MOV       A,R5
   \   0000B2   FB           MOV       R3,A
   2949                 break;
   \   0000B3   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2950          
   2951              case ZCL_DATATYPE_DATA16:
   2952              case ZCL_DATATYPE_BITMAP16:
   2953              case ZCL_DATATYPE_UINT16:
   2954              case ZCL_DATATYPE_INT16:
   2955              case ZCL_DATATYPE_ENUM16:
   2956              case ZCL_DATATYPE_SEMI_PREC:
   2957              case ZCL_DATATYPE_CLUSTER_ID:
   2958              case ZCL_DATATYPE_ATTR_ID:
   2959                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000B6   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   0000B9   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   2960                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_358:
   \   0000BC   8C82         MOV       DPL,R4
   \   0000BE   8D83         MOV       DPH,R5
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   0A           INC       R2
   \   0000C2   0A           INC       R2
   \   0000C3   AB..         MOV       R3,?V5
   2961                break;
   \   0000C5   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2962          
   2963              case ZCL_DATATYPE_DATA24:
   2964              case ZCL_DATATYPE_BITMAP24:
   2965              case ZCL_DATATYPE_UINT24:
   2966              case ZCL_DATATYPE_INT24:
   2967                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   78..         MOV       R0,#?V0
   \   0000CE   12....       LCALL     ?L_MOV_X
   \   0000D1   8A82         MOV       DPL,R2
   \   0000D3   8B83         MOV       DPH,R3
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   12....       LCALL     ?Subroutine155 & 0xFFFF
   2968                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_689:
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?L_MOV_X
   \   0000DF   E5..         MOV       A,?V1
   \   0000E1   8C82         MOV       DPL,R4
   \   0000E3   8D83         MOV       DPH,R5
   \   0000E5   12....       LCALL     ?Subroutine155 & 0xFFFF
   2969                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_690:
   \   0000E8   78..         MOV       R0,#?V0
   \   0000EA   12....       LCALL     ?L_MOV_X
   \   0000ED   7410         MOV       A,#0x10
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?UL_SHR
   \   0000F4   85..82       MOV       DPL,?V4
   \   0000F7   85..83       MOV       DPH,?V5
   \   0000FA   E5..         MOV       A,?V0
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   EA           MOV       A,R2
   \   0000FE   2403         ADD       A,#0x3
   \   000100   FA           MOV       R2,A
   \   000101   506D         JNC       ??zclSerializeData_0
   \   000103   0B           INC       R3
   2970                break;
   \   000104   806A         SJMP      ??zclSerializeData_0
   2971          
   2972              case ZCL_DATATYPE_DATA32:
   2973              case ZCL_DATATYPE_BITMAP32:
   2974              case ZCL_DATATYPE_UINT32:
   2975              case ZCL_DATATYPE_INT32:
   2976              case ZCL_DATATYPE_SINGLE_PREC:
   2977              case ZCL_DATATYPE_TOD:
   2978              case ZCL_DATATYPE_DATE:
   2979              case ZCL_DATATYPE_UTC:
   2980              case ZCL_DATATYPE_BAC_OID:
   2981                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000106                ; Setup parameters for call to function osal_buffer_uint32
   \   000106   8E82         MOV       DPL,R6
   \   000108   8F83         MOV       DPH,R7
   \   00010A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00010D   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000110   7404         MOV       A,#0x4
   \   000112   12....       LCALL     ?DEALLOC_XSTACK8
   2982                break;
   \   000115   8059         SJMP      ??zclSerializeData_0
   2983          
   2984              case ZCL_DATATYPE_UINT40:
   2985              case ZCL_DATATYPE_INT40:
   2986                pStr = (uint8*)attrData;
   2987                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000117                ; Setup parameters for call to function osal_memcpy
   \   000117   78..         MOV       R0,#?V0
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011C   7C05         MOV       R4,#0x5
   \   00011E   8046         SJMP      ??zclSerializeData_12
   2988                break;
   2989          
   2990              case ZCL_DATATYPE_UINT48:
   2991              case ZCL_DATATYPE_INT48:
   2992                pStr = (uint8*)attrData;
   2993                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   000120                ; Setup parameters for call to function osal_memcpy
   \   000120   78..         MOV       R0,#?V0
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000125   7C06         MOV       R4,#0x6
   \   000127   803D         SJMP      ??zclSerializeData_12
   2994                break;
   2995          
   2996              case ZCL_DATATYPE_UINT56:
   2997              case ZCL_DATATYPE_INT56:
   2998                pStr = (uint8*)attrData;
   2999                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000129                ; Setup parameters for call to function osal_memcpy
   \   000129   78..         MOV       R0,#?V0
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012E   7C07         MOV       R4,#0x7
   \   000130   8034         SJMP      ??zclSerializeData_12
   3000                break;
   3001          
   3002              case ZCL_DATATYPE_DOUBLE_PREC:
   3003              case ZCL_DATATYPE_IEEE_ADDR:
   3004              case ZCL_DATATYPE_UINT64:
   3005              case ZCL_DATATYPE_INT64:
   3006                pStr = (uint8*)attrData;
   3007                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   000132                ; Setup parameters for call to function osal_memcpy
   \   000132   78..         MOV       R0,#?V0
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000137   7C08         MOV       R4,#0x8
   \   000139   802B         SJMP      ??zclSerializeData_12
   3008                break;
   3009          
   3010              case ZCL_DATATYPE_CHAR_STR:
   3011              case ZCL_DATATYPE_OCTET_STR:
   3012                pStr = (uint8*)attrData;
   3013                len = *pStr;
   3014                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   00013B                ; Setup parameters for call to function osal_memcpy
   \   00013B   78..         MOV       R0,#?V0
   \   00013D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000140   8E82         MOV       DPL,R6
   \   000142   8F83         MOV       DPH,R7
   \   000144   E0           MOVX      A,@DPTR
   \   000145   2401         ADD       A,#0x1
   \   000147   FC           MOV       R4,A
   \   000148   E4           CLR       A
   \   000149   3400         ADDC      A,#0x0
   \   00014B   800F         SJMP      ??zclSerializeData_13
   3015                break;
   3016          
   3017              case ZCL_DATATYPE_LONG_CHAR_STR:
   3018              case ZCL_DATATYPE_LONG_OCTET_STR:
   3019                pStr = (uint8*)attrData;
   3020                len = BUILD_UINT16( pStr[0], pStr[1] );
   3021                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   00014D                ; Setup parameters for call to function osal_memcpy
   \   00014D   78..         MOV       R0,#?V0
   \   00014F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000152   8E82         MOV       DPL,R6
   \   000154   8F83         MOV       DPH,R7
   \   000156   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000159   FC           MOV       R4,A
   \   00015A   E4           CLR       A
   \   00015B   39           ADDC      A,R1
   \                     ??zclSerializeData_13:
   \   00015C   FD           MOV       R5,A
   \   00015D   8009         SJMP      ??zclSerializeData_14
   3022                break;
   3023          
   3024              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3025                pStr = (uint8*)attrData;
   3026                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   00015F                ; Setup parameters for call to function osal_memcpy
   \   00015F   78..         MOV       R0,#?V0
   \   000161   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000164   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_12:
   \   000166   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_14:
   \   000168   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00016B   7403         MOV       A,#0x3
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   3027                break;
   3028          
   3029              case ZCL_DATATYPE_NO_DATA:
   3030              case ZCL_DATATYPE_UNKNOWN:
   3031                // Fall through
   3032          
   3033              default:
   3034                break;
   3035            }
   3036          
   3037            return ( buf );
   \                     ??zclSerializeData_0:
   \   000170   02....       LJMP      ??Subroutine246_0 & 0xFFFF
   3038          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine204_0
   \   000004                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   F9           MOV       R1,A
   \   000004   EC           MOV       A,R4
   \   000005   2402         ADD       A,#0x2
   \   000007   22           RET
   3039          
   3040          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3041          /*********************************************************************
   3042           * @fn      zclAnalogDataType
   3043           *
   3044           * @brief   Checks to see if Data Type is Analog
   3045           *
   3046           * @param   dataType - data type
   3047           *
   3048           * @return  TRUE if data type is analog
   3049           */
   3050          uint8 zclAnalogDataType( uint8 dataType )
   3051          {
   3052            uint8 analog;
   3053          
   3054            switch ( dataType )
   3055            {
   3056              case ZCL_DATATYPE_UINT8:
   3057              case ZCL_DATATYPE_UINT16:
   3058              case ZCL_DATATYPE_UINT24:
   3059              case ZCL_DATATYPE_UINT32:
   3060              case ZCL_DATATYPE_UINT40:
   3061              case ZCL_DATATYPE_UINT48:
   3062              case ZCL_DATATYPE_UINT56:
   3063              case ZCL_DATATYPE_UINT64:
   3064              case ZCL_DATATYPE_INT8:
   3065              case ZCL_DATATYPE_INT16:
   3066              case ZCL_DATATYPE_INT24:
   3067              case ZCL_DATATYPE_INT32:
   3068              case ZCL_DATATYPE_INT40:
   3069              case ZCL_DATATYPE_INT48:
   3070              case ZCL_DATATYPE_INT56:
   3071              case ZCL_DATATYPE_INT64:
   3072              case ZCL_DATATYPE_SEMI_PREC:
   3073              case ZCL_DATATYPE_SINGLE_PREC:
   3074              case ZCL_DATATYPE_DOUBLE_PREC:
   3075              case ZCL_DATATYPE_TOD:
   3076              case ZCL_DATATYPE_DATE:
   3077              case ZCL_DATATYPE_UTC:
   3078                analog = TRUE;
   3079                break;
   3080          
   3081              default:
   3082                analog = FALSE;
   3083                break;
   3084            }
   3085          
   3086            return ( analog );
   3087          }
   3088          
   3089          /*********************************************************************
   3090           * @fn      zclIsLittleEndianMachine
   3091           *
   3092           * @brief   Verifies endianness in system.
   3093           *
   3094           * @param   none
   3095           *
   3096           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3097           */
   3098          static int zclIsLittleEndianMachine(void)
   3099          {
   3100            uint16 test = 0x0001;
   3101          
   3102            return (*((uint8 *)(&test)));
   3103          }
   3104          
   3105          /*********************************************************************
   3106           * @fn      zcl_BuildAnalogData
   3107           *
   3108           * @brief   Build an analog arribute out of sequential bytes.
   3109           *
   3110           * @param   dataType - type of data
   3111           * @param   pData - pointer to data
   3112           * @param   pBuf - where to put the data
   3113           *
   3114           * @return  none
   3115           */
   3116          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3117          {
   3118            int current_byte_index;
   3119            int remaining_bytes;
   3120            int step;
   3121          
   3122            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3123          
   3124            // decide if move forward or backwards to copy data
   3125            if ( zclIsLittleEndianMachine() )
   3126            {
   3127              step = 1;
   3128              current_byte_index = 0;
   3129            }
   3130            else
   3131            {
   3132              step = -1;
   3133              current_byte_index = remaining_bytes - 1;
   3134            }
   3135          
   3136            while ( remaining_bytes-- )
   3137            {
   3138              pData[current_byte_index] = *(pBuf++);
   3139              current_byte_index += step;
   3140            }
   3141          }
   3142          #endif
   3143          
   3144          /*********************************************************************
   3145           * @fn      zclGetDataTypeLength
   3146           *
   3147           * @brief   Return the length of the datatype in octet.
   3148           *
   3149           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3150           *                ZCL_DATATYPE_CHAR_STR data types.
   3151           *
   3152           * @param   dataType - data type
   3153           *
   3154           * @return  length of data
   3155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3156          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3157          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3158            uint8 len;
   3159          
   3160            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3161            {
   3162              case ZCL_DATATYPE_DATA8:
   3163              case ZCL_DATATYPE_BOOLEAN:
   3164              case ZCL_DATATYPE_BITMAP8:
   3165              case ZCL_DATATYPE_INT8:
   3166              case ZCL_DATATYPE_UINT8:
   3167              case ZCL_DATATYPE_ENUM8:
   3168                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3169                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3170          
   3171              case ZCL_DATATYPE_DATA16:
   3172              case ZCL_DATATYPE_BITMAP16:
   3173              case ZCL_DATATYPE_UINT16:
   3174              case ZCL_DATATYPE_INT16:
   3175              case ZCL_DATATYPE_ENUM16:
   3176              case ZCL_DATATYPE_SEMI_PREC:
   3177              case ZCL_DATATYPE_CLUSTER_ID:
   3178              case ZCL_DATATYPE_ATTR_ID:
   3179                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3180                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3181          
   3182              case ZCL_DATATYPE_DATA24:
   3183              case ZCL_DATATYPE_BITMAP24:
   3184              case ZCL_DATATYPE_UINT24:
   3185              case ZCL_DATATYPE_INT24:
   3186                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3187                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3188          
   3189              case ZCL_DATATYPE_DATA32:
   3190              case ZCL_DATATYPE_BITMAP32:
   3191              case ZCL_DATATYPE_UINT32:
   3192              case ZCL_DATATYPE_INT32:
   3193              case ZCL_DATATYPE_SINGLE_PREC:
   3194              case ZCL_DATATYPE_TOD:
   3195              case ZCL_DATATYPE_DATE:
   3196              case ZCL_DATATYPE_UTC:
   3197              case ZCL_DATATYPE_BAC_OID:
   3198                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3199                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3200          
   3201             case ZCL_DATATYPE_UINT40:
   3202             case ZCL_DATATYPE_INT40:
   3203                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3204                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3205          
   3206             case ZCL_DATATYPE_UINT48:
   3207             case ZCL_DATATYPE_INT48:
   3208                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3209                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3210          
   3211             case ZCL_DATATYPE_UINT56:
   3212             case ZCL_DATATYPE_INT56:
   3213                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3214                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3215          
   3216             case ZCL_DATATYPE_DOUBLE_PREC:
   3217             case ZCL_DATATYPE_IEEE_ADDR:
   3218             case ZCL_DATATYPE_UINT64:
   3219             case ZCL_DATATYPE_INT64:
   3220               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3221               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3222          
   3223              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3224               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3225               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3226          
   3227              case ZCL_DATATYPE_NO_DATA:
   3228              case ZCL_DATATYPE_UNKNOWN:
   3229                // Fall through
   3230          
   3231              default:
   3232                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3233                break;
   3234            }
   3235          
   3236            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3237          }
   3238          
   3239          /*********************************************************************
   3240           * @fn      zclGetAttrDataLength
   3241           *
   3242           * @brief   Return the length of the attribute.
   3243           *
   3244           * @param   dataType - data type
   3245           * @param   pData - pointer to data
   3246           *
   3247           * @return  returns atrribute length
   3248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3249          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3250          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3251            uint16 dataLen = 0;
   3252          
   3253            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3254            {
   3255              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine132 & 0xFFFF
   3256            }
   \                     ??CrossCallReturnLabel_236:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3257            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3258            {
   3259              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3260            }
   3261            else
   3262            {
   3263              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3264            }
   3265          
   3266            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine201_0 & 0xFFFF
   3267          }
   3268          
   3269          #ifdef ZCL_READ
   3270          /*********************************************************************
   3271           * @fn      zclReadAttrData
   3272           *
   3273           * @brief   Read the attribute's current value into pAttrData.
   3274           *          NOTE - Not compatible with application's attributes callbacks.
   3275           *
   3276           * @param   pAttrData - where to put attribute data
   3277           * @param   pAttr - pointer to attribute
   3278           * @param   pDataLen - where to put attribute data length
   3279           *
   3280           * @return Success
   3281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3282          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   3284            uint16 dataLen;
   3285          
   3286            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   F5..         MOV       ?V1,A
   \   000012   85..82       MOV       DPL,?V0
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00001A   7004         JNZ       ??zclReadAttrData_0
   3287            {
   3288              return ( ZCL_STATUS_FAILURE );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   803A         SJMP      ??zclReadAttrData_1
   3289            }
   3290          
   3291            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000020                ; Setup parameters for call to function zclGetAttrDataLength
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00002D   8A..         MOV       ?V2,R2
   \   00002F   8B..         MOV       ?V3,R3
   \   000031   AE..         MOV       R6,?V2
   \   000033   AF..         MOV       R7,?V3
   3292            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003B   EE           MOV       A,R6
   \   00003C   FC           MOV       R4,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   AA..         MOV       R2,?V4
   \   000041   AB..         MOV       R3,?V5
   \   000043   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000046   7403         MOV       A,#0x3
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   740E         MOV       A,#0xe
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   3293          
   3294            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_350:
   \   000053   6003         JZ        ??CrossCallReturnLabel_382
   3295            {
   3296              *pDataLen = dataLen;
   \   000055   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   3297            }
   3298          
   3299            return ( ZCL_STATUS_SUCCESS );
   \                     ??CrossCallReturnLabel_382:
   \   000058   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   00005A   80..         SJMP      ??Subroutine207_0
   3300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine205_0
   \   000006                ; // Fall through to label ??Subroutine205_0
   3301          
   3302          /*********************************************************************
   3303           * @fn      zcl_ReadAttrData
   3304           *
   3305           * @brief   Read the attribute's current value into pAttrData.
   3306           *          Use application's callback function if assigned to this attribute.
   3307           *
   3308           * @param   endpoint - application's endpoint
   3309           * @param   clusterId - cluster that attribute belongs to
   3310           * @param   attrId - attribute id
   3311           * @param   pAttrData - where to put attribute data
   3312           * @param   pDataLen - where to put attribute data length
   3313           *
   3314           * @return  Successful if data was read
   3315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3316          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3317                                                   uint8 *pAttrData, uint16 *pDataLen )
   3318          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
   3319            zclAttrRec_t attrRec;
   3320          
   3321            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V0
   \   000023   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??zcl_ReadAttrData_0
   3322            {
   3323              return ( ZCL_STATUS_FAILURE );
   \   00002E   7901         MOV       R1,#0x1
   \   000030   804C         SJMP      ??zcl_ReadAttrData_1
   3324            }
   \                     ??zcl_ReadAttrData_0:
   \   000032   7416         MOV       A,#0x16
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00003A   7418         MOV       A,#0x18
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   3325          
   3326            if ( attrRec.attr.dataPtr != NULL )
   \                     ??CrossCallReturnLabel_578:
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   6012         JZ        ??zcl_ReadAttrData_2
   3327            {
   3328              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00004E                ; Setup parameters for call to function zclReadAttrData
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP102_8
   \   000056   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000059   7402         MOV       A,#0x2
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   801E         SJMP      ??zcl_ReadAttrData_1
   3329            }
   3330            else
   3331            {
   3332              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   000060                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   8A..         MOV       ?V4,R2
   \   000065   8B..         MOV       ?V5,R3
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   AC..         MOV       R4,?V2
   \   00006E   AD..         MOV       R5,?V3
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   FB           MOV       R3,A
   \   000074   A9..         MOV       R1,?V0
   \   000076   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00007E   7408         MOV       A,#0x8
   3333            }
   \   000080   02....       LJMP      ?Subroutine5 & 0xFFFF
   3334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
   3335          
   3336          /*********************************************************************
   3337           * @fn      zclGetAttrDataLengthUsingCB
   3338           *
   3339           * @brief   Use application's callback to get the length of the attribute's
   3340           *          current value stored in the database.
   3341           *
   3342           * @param   endpoint - application's endpoint
   3343           * @param   clusterId - cluster that attribute belongs to
   3344           * @param   attrId - attribute id
   3345           *
   3346           * @return  returns attribute length
   3347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3348          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3349          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3350            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3351            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   3352          
   3353            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV       A,R2
   \   000024   45..         ORL       A,?V1
   \   000026   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3354            {
   3355              // Only get the attribute length
   3356              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000028                ; Setup parameters for indirect call
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V4,R0
   \   00002E   89..         MOV       ?V5,R1
   \   000030   78..         MOV       R0,#?V4
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V4,A
   \   000038   F5..         MOV       ?V5,A
   \   00003A   78..         MOV       R0,#?V4
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7900         MOV       R1,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   FC           MOV       R4,A
   \   000043   EF           MOV       A,R7
   \   000044   FD           MOV       R5,A
   \   000045   AA..         MOV       R2,?V6
   \   000047   AB..         MOV       R3,?V7
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?CALL_IND
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   3357            }
   3358          
   3359            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000060   02....       LJMP      ?Subroutine8 & 0xFFFF
   3360          }
   3361          
   3362          /*********************************************************************
   3363           * @fn      zclReadAttrDataUsingCB
   3364           *
   3365           * @brief   Use application's callback to read the attribute's current
   3366           *          value stored in the database.
   3367           *
   3368           * @param   endpoint - application's endpoint
   3369           * @param   clusterId - cluster that attribute belongs to
   3370           * @param   attrId - attribute id
   3371           * @param   pAttrData - where to put attribute data
   3372           * @param   pDataLen - where to put attribute data length
   3373           *
   3374           * @return  Successful if data was read
   3375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3376          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3377                                                   uint8 *pAttrData, uint16 *pDataLen )
   3378          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3379            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   3380          
   3381            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_579:
   \   00001C   E5..         MOV       A,?V4
   \   00001E   45..         ORL       A,?V5
   \   000020   600A         JZ        ??zclReadAttrDataUsingCB_0
   3382            {
   3383              *pDataLen = 0; // Always initialize it to 0
   \   000022   85..82       MOV       DPL,?V4
   \   000025   85..83       MOV       DPH,?V5
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   3384            }
   3385          
   3386            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   00002C   EA           MOV       A,R2
   \   00002D   45..         ORL       A,?V1
   \   00002F   6027         JZ        ??zclReadAttrDataUsingCB_1
   3387            {
   3388              // Read the attribute value and its length
   3389              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000031                ; Setup parameters for indirect call
   \   000031   78..         MOV       R0,#?V4
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7412         MOV       A,#0x12
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7901         MOV       R1,#0x1
   \   000040   AC..         MOV       R4,?V2
   \   000042   AD..         MOV       R5,?V3
   \   000044   AA..         MOV       R2,?V6
   \   000046   AB..         MOV       R3,?V7
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   12....       LCALL     ?CALL_IND
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3390            }
   3391          
   3392            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   000058   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   00005A   02....       LJMP      ??Subroutine197_0 & 0xFFFF
   3393          }
   3394          
   3395          /*********************************************************************
   3396           * @fn      zclAuthorizeRead
   3397           *
   3398           * @brief   Use application's callback to authorize a Read operation
   3399           *          on a given attribute.
   3400           *
   3401           * @param   endpoint - application's endpoint
   3402           * @param   srcAddr - source Address
   3403           * @param   pAttr - pointer to attribute
   3404           *
   3405           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3406           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3407           */
   3408          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3409          {
   3410            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3411            {
   3412              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3413          
   3414              if ( pfnAuthorizeCB != NULL )
   3415              {
   3416                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3417              }
   3418            }
   3419          
   3420            return ( ZCL_STATUS_SUCCESS );
   3421          }
   3422          #endif // ZCL_READ
   3423          
   3424          #ifdef ZCL_WRITE
   3425          /*********************************************************************
   3426           * @fn      zclWriteAttrData
   3427           *
   3428           * @brief   Write the received data.
   3429           *
   3430           * @param   endpoint - application's endpoint
   3431           * @param   pAttr - where to write data to
   3432           * @param   pWriteRec - data to be written
   3433           *
   3434           * @return  Successful if data was written
   3435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3436          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3437                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3439            uint8 status;
   3440          
   3441            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   506F         JNC       ??zclWriteAttrData_0
   3442            {
   3443              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000017                ; Setup parameters for call to function zclAuthorizeWrite
   \   000017   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001A   E9           MOV       A,R1
   \   00001B   F5..         MOV       ?V3,A
   3444              if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   706A         JNZ       ??zclWriteAttrData_1
   \   00001F   740F         MOV       A,#0xf
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine167 & 0xFFFF
   3445              {
   3446                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \                     ??CrossCallReturnLabel_376:
   \   000027   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   00002A   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00002D   6013         JZ        ??zclWriteAttrData_2
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AC..         MOV       R4,?V0
   \   000031   AD..         MOV       R5,?V1
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F583         MOV       DPH,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   12....       LCALL     ?CALL_IND
   \   00003F   E9           MOV       A,R1
   \   000040   603F         JZ        ??zclWriteAttrData_3
   3447                {
   3448                  // Write the attribute value
   3449                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000042   E5..         MOV       A,?V0
   \   000044   2403         ADD       A,#0x3
   \   000046   F5..         MOV       ?V0,A
   \   000048   5002         JNC       ??zclWriteAttrData_4
   \   00004A   05..         INC       ?V1
   \                     ??zclWriteAttrData_4:
   \   00004C                ; Setup parameters for call to function zclGetAttrDataLength
   \   00004C   F582         MOV       DPL,A
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000061   8A..         MOV       ?V4,R2
   \   000063   8B..         MOV       ?V5,R3
   \   000065   AC..         MOV       R4,?V4
   \   000067   AD..         MOV       R5,?V5
   3450                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   A3           INC       DPTR
   \   000074   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000077   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007A   7403         MOV       A,#0x3
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   3451          
   3452                  status = ZCL_STATUS_SUCCESS;
   \   00007F   8008         SJMP      ??zclWriteAttrData_1
   3453                }
   3454                else
   3455                {
   3456                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000081   75..87       MOV       ?V3,#-0x79
   \   000084   8003         SJMP      ??zclWriteAttrData_1
   3457                }
   3458              }
   3459            }
   3460            else
   3461            {
   3462              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   000086   75..88       MOV       ?V3,#-0x78
   3463            }
   3464          
   3465            return ( status );
   \                     ??zclWriteAttrData_1:
   \   000089   A9..         MOV       R1,?V3
   \   00008B   02....       LJMP      ??Subroutine246_0 & 0xFFFF
   3466          }
   3467          
   3468          /*********************************************************************
   3469           * @fn      zclWriteAttrDataUsingCB
   3470           *
   3471           * @brief   Use application's callback to write the attribute's current
   3472           *          value stored in the database.
   3473           *
   3474           * @param   endpoint - application's endpoint
   3475           * @param   pAttr - where to write data to
   3476           * @param   pAttrData - data to be written
   3477           *
   3478           * @return  Successful if data was written
   3479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3480          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3481                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3482          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3483            uint8 status;
   3484          
   3485            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   504D         JNC       ??zclWriteAttrDataUsingCB_0
   3486            {
   3487              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3488              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   7048         JNZ       ??zclWriteAttrDataUsingCB_1
   3489              {
   3490                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V2
   \   000022   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000025   8A..         MOV       ?V0,R2
   \   000027   8B..         MOV       ?V1,R3
   3491                if ( pfnReadWriteCB != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   45..         ORL       A,?V1
   \   00002C   6034         JZ        ??zclWriteAttrDataUsingCB_2
   3492                {
   3493                  // Write the attribute value
   3494                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3495                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   00002E                ; Setup parameters for indirect call
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V4,A
   \   000031   F5..         MOV       ?V5,A
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7410         MOV       A,#0x10
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000040   7902         MOV       R1,#0x2
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   3496                }
   \                     ??CrossCallReturnLabel_520:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   12....       LCALL     ?CALL_IND
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   F9           MOV       R1,A
   \   000060   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3497                else
   3498                {
   3499                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000062   79C1         MOV       R1,#-0x3f
   \   000064   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3500                }
   3501              }
   3502            }
   3503            else
   3504            {
   3505              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   000066   7988         MOV       R1,#-0x78
   3506            }
   3507          
   3508            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   000068   02....       LJMP      ??Subroutine207_0 & 0xFFFF
   3509          }
   3510          
   3511          /*********************************************************************
   3512           * @fn      zclAuthorizeWrite
   3513           *
   3514           * @brief   Use application's callback to authorize a Write operation
   3515           *          on a given attribute.
   3516           *
   3517           * @param   endpoint - application's endpoint
   3518           * @param   srcAddr - source Address
   3519           * @param   pAttr - pointer to attribute
   3520           *
   3521           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3522           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3523           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3524          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3525          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3526            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   501C         JNC       ??zclAuthorizeWrite_0
   3527            {
   3528              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   3529          
   3530              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV       A,DPL
   \   000024   4583         ORL       A,DPH
   \   000026   600F         JZ        ??zclAuthorizeWrite_0
   3531              {
   3532                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7902         MOV       R1,#0x2
   \   00002A   EE           MOV       A,R6
   \   00002B   FC           MOV       R4,A
   \   00002C   EF           MOV       A,R7
   \   00002D   FD           MOV       R5,A
   \   00002E   AA..         MOV       R2,?V2
   \   000030   AB..         MOV       R3,?V3
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8002         SJMP      ??zclAuthorizeWrite_1
   3533              }
   3534            }
   3535          
   3536            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000039   02....       LJMP      ??Subroutine207_0 & 0xFFFF
   3537          }
   3538          #endif // ZCL_WRITE
   3539          
   3540          #ifdef ZCL_READ
   3541          /*********************************************************************
   3542           * @fn      zclParseInReadCmd
   3543           *
   3544           * @brief   Parse the "Profile" Read Commands
   3545           *
   3546           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3547           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3548           *
   3549           * @param   pCmd - pointer to incoming data to parse
   3550           *
   3551           * @return  pointer to the parsed command structure
   3552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3553          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3555            zclReadCmd_t *readCmd;
   3556            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine115 & 0xFFFF
   3557          
   3558            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_442:
   \   000008   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00000B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3559            if ( readCmd != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6048         JZ        ??zclParseInReadCmd_0
   3560            {
   3561              uint8 i;
   3562              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   00001B   C3           CLR       C
   \   00001C   13           RRC       A
   \   00001D   E8           MOV       A,R0
   \   00001E   13           RRC       A
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   F0           MOVX      @DPTR,A
   3563              for ( i = 0; i < readCmd->numAttr; i++ )
   \   000024   7C00         MOV       R4,#0x0
   \   000026   802D         SJMP      ??zclParseInReadCmd_1
   3564              {
   3565                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   C8           XCH       A,R0
   \   000034   F9           MOV       R1,A
   \   000035   E5..         MOV       A,?V0
   \   000037   28           ADD       A,R0
   \   000038   E4           CLR       A
   \   000039   39           ADDC      A,R1
   \   00003A   F5..         MOV       ?V1,A
   \   00003C   EC           MOV       A,R4
   \   00003D   25E0         ADD       A,0xE0 /* A   */
   \   00003F   F8           MOV       R0,A
   \   000040   E4           CLR       A
   \   000041   33           RLC       A
   \   000042   F9           MOV       R1,A
   \   000043   EA           MOV       A,R2
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   EB           MOV       A,R3
   \   000048   39           ADDC      A,R1
   \   000049   F583         MOV       DPH,A
   \   00004B   A3           INC       DPTR
   \   00004C   E5..         MOV       A,?V0
   \   00004E   12....       LCALL     ?Subroutine37 & 0xFFFF
   3566                pBuf += 2;
   3567              }
   \                     ??CrossCallReturnLabel_48:
   \   000051   5001         JNC       ??zclParseInReadCmd_3
   \   000053   0F           INC       R7
   \                     ??zclParseInReadCmd_3:
   \   000054   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   000055   12....       LCALL     ?Subroutine121 & 0xFFFF
   3568            }
   \                     ??CrossCallReturnLabel_438:
   \   000058   40CE         JC        ??zclParseInReadCmd_2
   3569          
   3570            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   00005A   02....       LJMP      ?Subroutine4 & 0xFFFF
   3571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine215_0
   \   000004                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine216_0
   \   000007                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   8582..       MOV       ?V0,DPL
   \   000008   8583..       MOV       ?V1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   2401         ADD       A,#0x1
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   3400         ADDC      A,#0x0
   \   000013   FB           MOV       R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   FE           MOV       R6,A
   \   000009   22           RET
   3572          
   3573          /*********************************************************************
   3574           * @fn      zclParseInReadRspCmd
   3575           *
   3576           * @brief   Parse the "Profile" Read Response Commands
   3577           *
   3578           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3579           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3580           *
   3581           * @param   pCmd - pointer to incoming data to parse
   3582           *
   3583           * @return  pointer to the parsed command structure
   3584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7404         MOV       A,#0x4
   \   000002   12....       LCALL     ?XSTACK_DISP0_8
   \   000005   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000008                REQUIRE ??Subroutine195_0
   \   000008                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3585          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3586          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine27 & 0xFFFF
   3587            zclReadRspCmd_t *readRspCmd;
   3588            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_28:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine13 & 0xFFFF
   3589            uint8 *dataPtr;
   3590            uint8 numAttr = 0;
   3591            uint8 hdrLen;
   3592            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_6:
   \   000018   803C         SJMP      ??CrossCallReturnLabel_262
   3593            uint16 attrDataLen;
   3594          
   3595            // find out the number of attributes and the length of attribute data
   3596            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3597            {
   3598              uint8 status;
   3599          
   3600              numAttr++;
   \                     ??zclParseInReadRspCmd_0:
   \   00001A   05..         INC       ?V3
   3601              pBuf += 2; // move pass attribute id
   3602          
   3603              status = *pBuf++;
   \   00001C   85..82       MOV       DPL,?V4
   \   00001F   85..83       MOV       DPH,?V5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   E5..         MOV       A,?V4
   \   000028   2403         ADD       A,#0x3
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   5002         JNC       ??zclParseInReadRspCmd_1
   \   00002E   05..         INC       ?V5
   3604              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_1:
   \   000030   E8           MOV       A,R0
   \   000031   7023         JNZ       ??CrossCallReturnLabel_262
   3605              {
   3606                uint8 dataType = *pBuf++;
   \   000033   85..82       MOV       DPL,?V4
   \   000036   85..83       MOV       DPH,?V5
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   A3           INC       DPTR
   \   00003C   8582..       MOV       ?V4,DPL
   \   00003F   8583..       MOV       ?V5,DPH
   3607          
   3608                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000042                ; Setup parameters for call to function zclGetAttrDataLength
   \   000042   AA..         MOV       R2,?V4
   \   000044   AB..         MOV       R3,?V5
   \   000046   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000049   12....       LCALL     ?Subroutine142 & 0xFFFF
   3609                pBuf += attrDataLen; // move pass attribute data
   3610          
   3611                // add padding if needed
   3612                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_252:
   \   00004C   5005         JNC       ??zclParseInReadRspCmd_2
   3613                {
   3614                  attrDataLen++;
   \   00004E   0E           INC       R6
   \   00004F   04           INC       A
   \   000050   7001         JNZ       ??zclParseInReadRspCmd_2
   \   000052   0F           INC       R7
   3615                }
   3616          
   3617                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   000053   12....       LCALL     ?Subroutine147 & 0xFFFF
   3618              }
   3619            }
   \                     ??CrossCallReturnLabel_262:
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00005E   40BA         JC        ??zclParseInReadRspCmd_0
   3620          
   3621            // calculate the length of the response header
   3622            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   000060   75F006       MOV       B,#0x6
   \   000063   E5..         MOV       A,?V3
   \   000065   A4           MUL       AB
   \   000066   04           INC       A
   \   000067   FE           MOV       R6,A
   3623          
   3624            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   25..         ADD       A,?V6
   \   00006A   FA           MOV       R2,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V7
   \   00006E   FB           MOV       R3,A
   \   00006F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000072   7404         MOV       A,#0x4
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   3625            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_457:
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000082   7003         JNZ       $+5
   \   000084   02....       LJMP      ??zclParseInReadRspCmd_3 & 0xFFFF
   3626            {
   3627              uint8 i;
   3628              pBuf = pCmd->pData;
   \   000087   12....       LCALL     ?Subroutine71 & 0xFFFF
   3629              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_121:
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?Subroutine36 & 0xFFFF
   3630          
   3631              readRspCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_45:
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine88 & 0xFFFF
   3632              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_159:
   \   00009C   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3633              {
   3634                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_5:
   \   00009F   E5..         MOV       A,?V6
   \   0000A1   75F006       MOV       B,#0x6
   \   0000A4   A4           MUL       AB
   \   0000A5   F8           MOV       R0,A
   \   0000A6   A9F0         MOV       R1,B
   \   0000A8   7404         MOV       A,#0x4
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine11 & 0xFFFF
   3635          
   3636                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3637                pBuf += 2;
   3638          
   3639                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_2:
   \   0000B0   F8           MOV       R0,A
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F9           MOV       R1,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   8982         MOV       DPL,R1
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   E8           MOV       A,R0
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   E5..         MOV       A,?V4
   \   0000C5   2403         ADD       A,#0x3
   \   0000C7   F5..         MOV       ?V4,A
   \   0000C9   5002         JNC       ??zclParseInReadRspCmd_6
   \   0000CB   05..         INC       ?V5
   3640                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_6:
   \   0000CD   E8           MOV       A,R0
   \   0000CE   7067         JNZ       ??CrossCallReturnLabel_478
   3641                {
   3642                  statusRec->dataType = *pBuf++;
   \   0000D0   85..82       MOV       DPL,?V4
   \   0000D3   85..83       MOV       DPH,?V5
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   0000DB   E9           MOV       A,R1
   \   0000DC   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000DF   8582..       MOV       ?V4,DPL
   \   0000E2   8583..       MOV       ?V5,DPH
   3643          
   3644                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   0000E5                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000E5   AA..         MOV       R2,?V4
   \   0000E7   AB..         MOV       R3,?V5
   \   0000E9   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000EC   8A..         MOV       ?V0,R2
   \   0000EE   8B..         MOV       ?V1,R3
   \   0000F0   AE..         MOV       R6,?V0
   \   0000F2   AF..         MOV       R7,?V1
   3645                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   85....       MOV       ?V0,?V4
   \   0000F7   85....       MOV       ?V1,?V5
   \   0000FA   75..00       MOV       ?V2,#0x0
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000102   EE           MOV       A,R6
   \   000103   FC           MOV       R4,A
   \   000104   EF           MOV       A,R7
   \   000105   FD           MOV       R5,A
   \   000106   7405         MOV       A,#0x5
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   00010E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000111   7403         MOV       A,#0x3
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   3646                  statusRec->data = dataPtr;
   \   000116   7402         MOV       A,#0x2
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00011E   A3           INC       DPTR
   \   00011F   12....       LCALL     ?Subroutine20 & 0xFFFF
   3647          
   3648                  pBuf += attrDataLen; // move pass attribute data
   3649          
   3650                  // advance attribute data pointer
   3651                  if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_18:
   \   000122   5005         JNC       ??zclParseInReadRspCmd_7
   3652                  {
   3653                    attrDataLen++;
   \   000124   0E           INC       R6
   \   000125   04           INC       A
   \   000126   7001         JNZ       ??zclParseInReadRspCmd_7
   \   000128   0F           INC       R7
   3654                  }
   3655          
   3656                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   000129   7402         MOV       A,#0x2
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   12....       LCALL     ?Subroutine131 & 0xFFFF
   3657                }
   3658              }
   \                     ??CrossCallReturnLabel_233:
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   000137   05..         INC       ?V6
   \                     ??zclParseInReadRspCmd_4:
   \   000139   E5..         MOV       A,?V6
   \   00013B   C3           CLR       C
   \   00013C   95..         SUBB      A,?V3
   \   00013E   5003         JNC       $+5
   \   000140   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3659            }
   3660          
   3661            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_3:
   \   000143   02....       LJMP      ?Subroutine1 & 0xFFFF
   3662          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine217_0
   \   000006                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   E5..         MOV       A,?V6
   \   000002   2E           ADD       A,R6
   \   000003   F5..         MOV       ?V6,A
   \   000005   E5..         MOV       A,?V7
   \   000007   3F           ADDC      A,R7
   \   000008   F5..         MOV       ?V7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   AE..         MOV       R6,?V0
   \   000006   AF..         MOV       R7,?V1
   \   000008   E5..         MOV       A,?V4
   \   00000A   2A           ADD       A,R2
   \   00000B   F5..         MOV       ?V4,A
   \   00000D   E5..         MOV       A,?V5
   \   00000F   3F           ADDC      A,R7
   \   000010   F5..         MOV       ?V5,A
   \   000012   EE           MOV       A,R6
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F9           MOV       R1,A
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   E5..         MOV       A,?V3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   75..00       MOV       ?V6,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000007   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   28           ADD       A,R0
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   39           ADDC      A,R1
   \   000010   F9           MOV       R1,A
   \   000011   C3           CLR       C
   \   000012   E5..         MOV       A,?V4
   \   000014   98           SUBB      A,R0
   \   000015   E5..         MOV       A,?V5
   \   000017   99           SUBB      A,R1
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine219_0
   \   000006                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   000006   E5..         MOV       A,?V4
   \   000008   2E           ADD       A,R6
   \   000009   F5..         MOV       ?V4,A
   \   00000B   E5..         MOV       A,?V5
   \   00000D   3F           ADDC      A,R7
   \   00000E   F5..         MOV       ?V5,A
   \   000010   EE           MOV       A,R6
   \   000011   A2E0         MOV       C,0xE0 /* A   */.0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E8           MOV       A,R0
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   E9           MOV       A,R1
   \   000013   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000016   F5..         MOV       ?V4,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V5,A
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   75..00       MOV       ?V6,#0x0
   \   000022   75..00       MOV       ?V7,#0x0
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   A882         MOV       R0,DPL
   \   000005   A983         MOV       R1,DPH
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   E8           MOV       A,R0
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   E9           MOV       A,R1
   \   000011   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FA           MOV       R2,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   EA           MOV       A,R2
   \   00001A   F8           MOV       R0,A
   \   00001B   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   00001E   E8           MOV       A,R0
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   E9           MOV       A,R1
   \   000022   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine248_0
   \   000006                ; // Fall through to label ??Subroutine248_0
   3663          #endif // ZCL_READ
   3664          
   3665          #ifdef ZCL_WRITE
   3666          /*********************************************************************
   3667           * @fn      zclParseInWriteCmd
   3668           *
   3669           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3670           *          Response Commands
   3671           *
   3672           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3673           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3674           *
   3675           * @param   pCmd - pointer to incoming data to parse
   3676           *
   3677           * @return  pointer to the parsed command structure
   3678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3679          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine27 & 0xFFFF
   3681            zclWriteCmd_t *writeCmd;
   3682            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_29:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine13 & 0xFFFF
   3683            uint16 attrDataLen;
   3684            uint8 *dataPtr;
   3685            uint8 numAttr = 0;
   3686            uint8 hdrLen;
   3687            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_7:
   \   000018   8029         SJMP      ??CrossCallReturnLabel_263
   3688          
   3689            // find out the number of attributes and the length of attribute data
   3690            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3691            {
   3692              uint8 dataType;
   3693          
   3694              numAttr++;
   \                     ??zclParseInWriteCmd_0:
   \   00001A   05..         INC       ?V3
   3695              pBuf += 2; // move pass attribute id
   3696          
   3697              dataType = *pBuf++;
   \   00001C   85..82       MOV       DPL,?V4
   \   00001F   85..83       MOV       DPH,?V5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   E5..         MOV       A,?V4
   \   000028   2403         ADD       A,#0x3
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   5002         JNC       ??zclParseInWriteCmd_1
   \   00002E   05..         INC       ?V5
   3698          
   3699              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_1:
   \   000030                ; Setup parameters for call to function zclGetAttrDataLength
   \   000030   FA           MOV       R2,A
   \   000031   AB..         MOV       R3,?V5
   \   000033   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000036   12....       LCALL     ?Subroutine142 & 0xFFFF
   3700              pBuf += attrDataLen; // move pass attribute data
   3701          
   3702              // add padding if needed
   3703              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_253:
   \   000039   5005         JNC       ??zclParseInWriteCmd_2
   3704              {
   3705                attrDataLen++;
   \   00003B   0E           INC       R6
   \   00003C   04           INC       A
   \   00003D   7001         JNZ       ??zclParseInWriteCmd_2
   \   00003F   0F           INC       R7
   3706              }
   3707          
   3708              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   000040   12....       LCALL     ?Subroutine147 & 0xFFFF
   3709            }
   \                     ??CrossCallReturnLabel_263:
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00004B   40CD         JC        ??zclParseInWriteCmd_0
   3710          
   3711            // calculate the length of the response header
   3712            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   00004D   75F005       MOV       B,#0x5
   \   000050   E5..         MOV       A,?V3
   \   000052   A4           MUL       AB
   \   000053   04           INC       A
   \   000054   FE           MOV       R6,A
   3713          
   3714            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000055                ; Setup parameters for call to function osal_mem_alloc
   \   000055   25..         ADD       A,?V6
   \   000057   FA           MOV       R2,A
   \   000058   E4           CLR       A
   \   000059   35..         ADDC      A,?V7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005F   7404         MOV       A,#0x4
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   3715            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_458:
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   00006F   7003         JNZ       $+5
   \   000071   02....       LJMP      ??zclParseInWriteCmd_3 & 0xFFFF
   3716            {
   3717              uint8 i;
   3718              pBuf = pCmd->pData;
   \   000074   12....       LCALL     ?Subroutine71 & 0xFFFF
   3719              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   \                     ??CrossCallReturnLabel_122:
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine36 & 0xFFFF
   3720          
   3721              writeCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_46:
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine88 & 0xFFFF
   3722              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_160:
   \   000089   8079         SJMP      ??zclParseInWriteCmd_4
   3723              {
   3724                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_5:
   \   00008B   E5..         MOV       A,?V6
   \   00008D   75F005       MOV       B,#0x5
   \   000090   A4           MUL       AB
   \   000091   F8           MOV       R0,A
   \   000092   A9F0         MOV       R1,B
   \   000094   7404         MOV       A,#0x4
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine11 & 0xFFFF
   3725          
   3726                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3727                pBuf += 2;
   3728                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_3:
   \   00009C   F9           MOV       R1,A
   \   00009D   85..82       MOV       DPL,?XSP + 0
   \   0000A0   85..83       MOV       DPH,?XSP + 1
   \   0000A3   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000A6   E9           MOV       A,R1
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   E5..         MOV       A,?V4
   \   0000AA   2403         ADD       A,#0x3
   \   0000AC   F5..         MOV       ?V4,A
   \   0000AE   5002         JNC       ??zclParseInWriteCmd_6
   \   0000B0   05..         INC       ?V5
   3729          
   3730                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_6:
   \   0000B2                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000B2   FA           MOV       R2,A
   \   0000B3   AB..         MOV       R3,?V5
   \   0000B5   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000B8   8A..         MOV       ?V0,R2
   \   0000BA   8B..         MOV       ?V1,R3
   \   0000BC   AE..         MOV       R6,?V0
   \   0000BE   AF..         MOV       R7,?V1
   3731                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000C0                ; Setup parameters for call to function osal_memcpy
   \   0000C0   85....       MOV       ?V0,?V4
   \   0000C3   85....       MOV       ?V1,?V5
   \   0000C6   75..00       MOV       ?V2,#0x0
   \   0000C9   78..         MOV       R0,#?V0
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CE   EE           MOV       A,R6
   \   0000CF   FC           MOV       R4,A
   \   0000D0   EF           MOV       A,R7
   \   0000D1   FD           MOV       R5,A
   \   0000D2   7405         MOV       A,#0x5
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0000DA   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000DD   7403         MOV       A,#0x3
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   3732                statusRec->attrData = dataPtr;
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000EA   12....       LCALL     ?Subroutine20 & 0xFFFF
   3733          
   3734                pBuf += attrDataLen; // move pass attribute data
   3735          
   3736                // advance attribute data pointer
   3737                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_19:
   \   0000ED   5005         JNC       ??zclParseInWriteCmd_7
   3738                {
   3739                  attrDataLen++;
   \   0000EF   0E           INC       R6
   \   0000F0   04           INC       A
   \   0000F1   7001         JNZ       ??zclParseInWriteCmd_7
   \   0000F3   0F           INC       R7
   3740                }
   3741          
   3742                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   0000F4   7402         MOV       A,#0x2
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL     ?Subroutine131 & 0xFFFF
   3743              }
   \                     ??CrossCallReturnLabel_234:
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000102   05..         INC       ?V6
   \                     ??zclParseInWriteCmd_4:
   \   000104   E5..         MOV       A,?V6
   \   000106   C3           CLR       C
   \   000107   95..         SUBB      A,?V3
   \   000109   4080         JC        ??zclParseInWriteCmd_5
   3744            }
   3745          
   3746            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_3:
   \   00010B   02....       LJMP      ?Subroutine1 & 0xFFFF
   3747          }
   3748          
   3749          /*********************************************************************
   3750           * @fn      zclParseInWriteRspCmd
   3751           *
   3752           * @brief   Parse the "Profile" Write Response Commands
   3753           *
   3754           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3755           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3756           *
   3757           * @param   pCmd - pointer to incoming data to parse
   3758           *
   3759           * @return  pointer to the parsed command structure
   3760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3761          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3762          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3763            zclWriteRspCmd_t *writeRspCmd;
   3764            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   F5..         MOV       ?V6,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V7,A
   \   00000E   85..82       MOV       DPL,?V6
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3765            uint8 i = 0;
   \                     ??CrossCallReturnLabel_441:
   \   000016   75..00       MOV       ?V2,#0x0
   3766          
   3767            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000019   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3768            if ( writeRspCmd != NULL )
   \   00001F   EA           MOV       A,R2
   \   000020   4B           ORL       A,R3
   \   000021   606F         JZ        ??zclParseInWriteRspCmd_0
   3769            {
   3770              if ( pCmd->dataLen == 1 )
   \   000023   85..82       MOV       DPL,?V0
   \   000026   85..83       MOV       DPH,?V1
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   000030   7040         JNZ       ??zclParseInWriteRspCmd_2
   3771              {
   3772                // special case when all writes were successfull
   3773                writeRspCmd->attrList[i++].status = *pBuf;
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   3774              }
   \                     ??CrossCallReturnLabel_492:
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   75..01       MOV       ?V2,#0x1
   \   00003D   804C         SJMP      ??zclParseInWriteRspCmd_3
   3775              else
   3776              {
   3777                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3778                {
   3779                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   00003F   E5..         MOV       A,?V2
   \   000041   75F003       MOV       B,#0x3
   \   000044   A4           MUL       AB
   \   000045   F8           MOV       R0,A
   \   000046   A9F0         MOV       R1,B
   \   000048   EA           MOV       A,R2
   \   000049   28           ADD       A,R0
   \   00004A   F8           MOV       R0,A
   \   00004B   EB           MOV       A,R3
   \   00004C   39           ADDC      A,R1
   \   00004D   F9           MOV       R1,A
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000055   12....       LCALL     ?Subroutine18 & 0xFFFF
   3780                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_13:
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V4,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FD           MOV       R5,A
   \   00005E   E5..         MOV       A,?V4
   \   000060   8882         MOV       DPL,R0
   \   000062   8983         MOV       DPH,R1
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000069   05..         INC       ?V2
   3781                  pBuf += 2;
   \   00006B   EE           MOV       A,R6
   \   00006C   2402         ADD       A,#0x2
   \   00006E   FE           MOV       R6,A
   \   00006F   5001         JNC       ??zclParseInWriteRspCmd_2
   \   000071   0F           INC       R7
   3782                }
   \                     ??zclParseInWriteRspCmd_2:
   \   000072   85..82       MOV       DPL,?V0
   \   000075   85..83       MOV       DPH,?V1
   \   000078   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   3783              }
   \                     ??CrossCallReturnLabel_561:
   \   00007B   85..82       MOV       DPL,?V6
   \   00007E   85..83       MOV       DPH,?V7
   \   000081   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000084   C3           CLR       C
   \   000085   EE           MOV       A,R6
   \   000086   98           SUBB      A,R0
   \   000087   EF           MOV       A,R7
   \   000088   99           SUBB      A,R1
   \   000089   40B4         JC        ??zclParseInWriteRspCmd_4
   3784          
   3785              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   00008B   8A82         MOV       DPL,R2
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   E5..         MOV       A,?V2
   \   000091   F0           MOVX      @DPTR,A
   3786            }
   3787          
   3788            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   000092   02....       LJMP      ??Subroutine197_0 & 0xFFFF
   3789          }
   3790          #endif // ZCL_WRITE
   3791          
   3792          #ifdef ZCL_REPORTING_DEVICE
   3793          /*********************************************************************
   3794           * @fn      zclParseInConfigReportCmd
   3795           *
   3796           * @brief   Parse the "Profile" Configure Reporting Command
   3797           *
   3798           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3799           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3800           *
   3801           * @param   pCmd - pointer to incoming data to parse
   3802           *
   3803           * @return  pointer to the parsed command structure
   3804           */
   3805          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   3806          {
   3807            zclCfgReportCmd_t *cfgReportCmd;
   3808            uint8 *pBuf = pCmd->pData;
   3809            uint8 *dataPtr;
   3810            uint8 numAttr = 0;
   3811            uint8 dataType;
   3812            uint8 hdrLen;
   3813            uint16 dataLen = 0;
   3814            uint8 reportChangeLen; // length of Reportable Change field
   3815          
   3816            // Calculate the length of the Request command
   3817            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3818            {
   3819              uint8 direction;
   3820          
   3821              numAttr++;
   3822              direction = *pBuf++;
   3823              pBuf += 2; // move pass the attribute ID
   3824          
   3825              // Is there a Reportable Change field?
   3826              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3827              {
   3828                dataType = *pBuf++;
   3829                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3830          
   3831                // For attributes of 'discrete' data types this field is omitted
   3832                if ( zclAnalogDataType( dataType ) )
   3833                {
   3834                  reportChangeLen = zclGetDataTypeLength( dataType );
   3835                  pBuf += reportChangeLen;
   3836          
   3837                  // add padding if needed
   3838                  if ( PADDING_NEEDED( reportChangeLen ) )
   3839                  {
   3840                    reportChangeLen++;
   3841                  }
   3842          
   3843                  dataLen += reportChangeLen;
   3844                }
   3845                else
   3846                {
   3847                  pBuf++; // move past reportable change field
   3848                }
   3849              }
   3850              else
   3851              {
   3852                pBuf += 2; // move pass the Timeout Period
   3853              }
   3854            } // while loop
   3855          
   3856            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   3857          
   3858            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3859            if ( cfgReportCmd != NULL )
   3860            {
   3861              uint8 i;
   3862              pBuf = pCmd->pData;
   3863              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   3864          
   3865              cfgReportCmd->numAttr = numAttr;
   3866              for ( i = 0; i < numAttr; i++ )
   3867              {
   3868                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3869          
   3870                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3871          
   3872                reportRec->direction = *pBuf++;
   3873                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3874                pBuf += 2;
   3875                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3876                {
   3877                  // Attribute to be reported
   3878                  reportRec->dataType = *pBuf++;
   3879                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3880                  pBuf += 2;
   3881                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3882                  pBuf += 2;
   3883          
   3884                  // For attributes of 'discrete' data types this field is omitted
   3885                  if ( zclAnalogDataType( reportRec->dataType ) )
   3886                  {
   3887                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3888                    reportRec->reportableChange = dataPtr;
   3889          
   3890                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3891                    pBuf += reportChangeLen;
   3892          
   3893                    // advance attribute data pointer
   3894                    if ( PADDING_NEEDED( reportChangeLen ) )
   3895                    {
   3896                      reportChangeLen++;
   3897                    }
   3898          
   3899                    dataPtr += reportChangeLen;
   3900                  }
   3901                }
   3902                else
   3903                {
   3904                  // Attribute reports to be received
   3905                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   3906                  pBuf += 2;
   3907                }
   3908              } // while loop
   3909            }
   3910          
   3911            return ( (void *)cfgReportCmd );
   3912          }
   3913          #endif
   3914          
   3915          /*********************************************************************
   3916           * @fn      zclParseInConfigReportRspCmd
   3917           *
   3918           * @brief   Parse the "Profile" Configure Reporting Response Command
   3919           *
   3920           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3921           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3922           *
   3923           * @param   pCmd - pointer to incoming data to parse
   3924           *
   3925           * @return  pointer to the parsed command structure
   3926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3927          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInConfigReportRspCmd:
   3928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3929            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3930            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine98 & 0xFFFF
   3931            uint8 numAttr;
   3932          
   3933            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   \                     ??CrossCallReturnLabel_173:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V1,A
   \   00000E   7402         MOV       A,#0x2
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?US_SHR
   \   000015   E5..         MOV       A,?V0
   \   000017   F5..         MOV       ?V0,A
   3934          
   3935            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3936                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   F5..         MOV       ?V2,A
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   7402         MOV       A,#0x2
   \   000020   78..         MOV       R0,#?V2
   \   000022   12....       LCALL     ?S_SHL
   \   000025   E5..         MOV       A,?V2
   \   000027   2401         ADD       A,#0x1
   \   000029   FA           MOV       R2,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V3
   \   00002D   FB           MOV       R3,A
   \   00002E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3937            if ( cfgReportRspCmd != NULL )
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   6058         JZ        ??zclParseInConfigReportRspCmd_0
   3938            {
   3939              uint8 i;
   3940              cfgReportRspCmd->numAttr = numAttr;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   E5..         MOV       A,?V0
   \   00003B   F0           MOVX      @DPTR,A
   3941              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   8048         SJMP      ??zclParseInConfigReportRspCmd_1
   3942              {
   3943                cfgReportRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInConfigReportRspCmd_2:
   \   000040   EC           MOV       A,R4
   \   000041   F5..         MOV       ?V0,A
   \   000043   75..00       MOV       ?V1,#0x0
   \   000046   7402         MOV       A,#0x2
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?S_SHL
   \   00004D   EA           MOV       A,R2
   \   00004E   25..         ADD       A,?V0
   \   000050   F8           MOV       R0,A
   \   000051   EB           MOV       A,R3
   \   000052   35..         ADDC      A,?V1
   \   000054   F9           MOV       R1,A
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   00005C   12....       LCALL     ?Subroutine30 & 0xFFFF
   3944                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   \                     ??CrossCallReturnLabel_357:
   \   00005F   8882         MOV       DPL,R0
   \   000061   8983         MOV       DPH,R1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   F0           MOVX      @DPTR,A
   \   000066   EE           MOV       A,R6
   \   000067   2402         ADD       A,#0x2
   \   000069   FE           MOV       R6,A
   \   00006A   5001         JNC       ??zclParseInConfigReportRspCmd_3
   \   00006C   0F           INC       R7
   3945                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInConfigReportRspCmd_3:
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V2,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F5..         MOV       ?V1,A
   \   000078   E5..         MOV       A,?V2
   \   00007A   8882         MOV       DPL,R0
   \   00007C   8983         MOV       DPH,R1
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   12....       LCALL     ?Subroutine37 & 0xFFFF
   3946                pBuf += 2;
   3947              }
   \                     ??CrossCallReturnLabel_49:
   \   000084   5001         JNC       ??zclParseInConfigReportRspCmd_4
   \   000086   0F           INC       R7
   \                     ??zclParseInConfigReportRspCmd_4:
   \   000087   0C           INC       R4
   \                     ??zclParseInConfigReportRspCmd_1:
   \   000088   12....       LCALL     ?Subroutine121 & 0xFFFF
   3948            }
   \                     ??CrossCallReturnLabel_439:
   \   00008B   40B3         JC        ??zclParseInConfigReportRspCmd_2
   3949          
   3950            return ( (void *)cfgReportRspCmd );
   \                     ??zclParseInConfigReportRspCmd_0:
   \   00008D   02....       LJMP      ?Subroutine4 & 0xFFFF
   3951          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET
   3952          
   3953          #ifdef ZCL_REPORTING_DEVICE
   3954          /*********************************************************************
   3955           * @fn      zclParseInReadReportCfgCmd
   3956           *
   3957           * @brief   Parse the "Profile" Read Reporting Configuration Command
   3958           *
   3959           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3960           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3961           *
   3962           * @param   pCmd - pointer to incoming data to parse
   3963           *
   3964           * @return  pointer to the parsed command structure
   3965           */
   3966          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   3967          {
   3968            zclReadReportCfgCmd_t *readReportCfgCmd;
   3969            uint8 *pBuf = pCmd->pData;
   3970            uint8 numAttr;
   3971          
   3972            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   3973          
   3974            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   3975                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   3976            if ( readReportCfgCmd != NULL )
   3977            {
   3978              uint8 i;
   3979              readReportCfgCmd->numAttr = numAttr;
   3980              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   3981              {
   3982                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   3983                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3984                pBuf += 2;
   3985              }
   3986            }
   3987          
   3988            return ( (void *)readReportCfgCmd );
   3989          }
   3990          #endif
   3991          
   3992          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3993          /*********************************************************************
   3994           * @fn      zclParseInReadReportCfgRspCmd
   3995           *
   3996           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   3997           *
   3998           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3999           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4000           *
   4001           * @param   pCmd - pointer to incoming data to parse
   4002           *
   4003           * @return  pointer to the parsed command structure
   4004           */
   4005          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   4006          {
   4007            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4008            uint8 reportChangeLen;
   4009            uint8 *pBuf = pCmd->pData;
   4010            uint8 *dataPtr;
   4011            uint8 numAttr = 0;
   4012            uint8 hdrLen;
   4013            uint16 dataLen = 0;
   4014          
   4015            // Calculate the length of the response command
   4016            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4017            {
   4018              uint8 status;
   4019              uint8 direction;
   4020          
   4021              numAttr++;
   4022              status = *pBuf++;
   4023              direction = *pBuf++;
   4024              pBuf += 2; // move pass the attribute ID
   4025          
   4026              if ( status == ZCL_STATUS_SUCCESS )
   4027              {
   4028                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4029                {
   4030                  uint8 dataType = *pBuf++;
   4031                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4032          
   4033                  // For attributes of 'discrete' data types this field is omitted
   4034                  if ( zclAnalogDataType( dataType ) )
   4035                  {
   4036                    reportChangeLen = zclGetDataTypeLength( dataType );
   4037                    pBuf += reportChangeLen;
   4038          
   4039                    // add padding if needed
   4040                    if ( PADDING_NEEDED( reportChangeLen ) )
   4041                    {
   4042                      reportChangeLen++;
   4043                    }
   4044          
   4045                    dataLen += reportChangeLen;
   4046                  }
   4047                }
   4048                else
   4049                {
   4050                  pBuf += 2; // move pass the Timeout field
   4051                }
   4052              }
   4053            } // while loop
   4054          
   4055            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   4056          
   4057            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4058            if ( readReportCfgRspCmd != NULL )
   4059            {
   4060              uint8 i;
   4061              pBuf = pCmd->pData;
   4062              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   4063          
   4064              readReportCfgRspCmd->numAttr = numAttr;
   4065              for ( i = 0; i < numAttr; i++ )
   4066              {
   4067                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4068          
   4069                reportRspRec->status = *pBuf++;
   4070                reportRspRec->direction = *pBuf++;
   4071                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4072                pBuf += 2;
   4073          
   4074                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4075                {
   4076                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4077                  {
   4078                    reportRspRec->dataType = *pBuf++;
   4079                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4080                    pBuf += 2;
   4081                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4082                    pBuf += 2;
   4083          
   4084                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4085                    {
   4086                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4087                      reportRspRec->reportableChange = dataPtr;
   4088          
   4089                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4090                      pBuf += reportChangeLen;
   4091          
   4092                      // advance attribute data pointer
   4093                      if ( PADDING_NEEDED( reportChangeLen ) )
   4094                      {
   4095                        reportChangeLen++;
   4096                      }
   4097          
   4098                      dataPtr += reportChangeLen;
   4099                    }
   4100                  }
   4101                  else
   4102                  {
   4103                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4104                    pBuf += 2;
   4105                  }
   4106                }
   4107              }
   4108            }
   4109          
   4110            return ( (void *)readReportCfgRspCmd );
   4111          }
   4112          #endif
   4113          
   4114          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4115          /*********************************************************************
   4116           * @fn      zclParseInReportCmd
   4117           *
   4118           * @brief   Parse the "Profile" Report Command
   4119           *
   4120           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4121           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4122           *
   4123           * @param   pCmd - pointer to incoming data to parse
   4124           *
   4125           * @return  pointer to the parsed command structure
   4126           */
   4127          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   4128          {
   4129            zclReportCmd_t *reportCmd;
   4130            uint8 *pBuf = pCmd->pData;
   4131            uint16 attrDataLen;
   4132            uint8 *dataPtr;
   4133            uint8 numAttr = 0;
   4134            uint8 hdrLen;
   4135            uint16 dataLen = 0;
   4136          
   4137            // find out the number of attributes and the length of attribute data
   4138            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4139            {
   4140              uint8 dataType;
   4141          
   4142              numAttr++;
   4143              pBuf += 2; // move pass attribute id
   4144          
   4145              dataType = *pBuf++;
   4146          
   4147              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   4148              pBuf += attrDataLen; // move pass attribute data
   4149          
   4150              // add padding if needed
   4151              if ( PADDING_NEEDED( attrDataLen ) )
   4152              {
   4153                attrDataLen++;
   4154              }
   4155          
   4156              dataLen += attrDataLen;
   4157            }
   4158          
   4159            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   4160          
   4161            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4162            if (reportCmd != NULL )
   4163            {
   4164              uint8 i;
   4165              pBuf = pCmd->pData;
   4166              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   4167          
   4168              reportCmd->numAttr = numAttr;
   4169              for ( i = 0; i < numAttr; i++ )
   4170              {
   4171                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   4172          
   4173                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4174                pBuf += 2;
   4175                reportRec->dataType = *pBuf++;
   4176          
   4177                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   4178                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   4179                reportRec->attrData = dataPtr;
   4180          
   4181                pBuf += attrDataLen; // move pass attribute data
   4182          
   4183                // advance attribute data pointer
   4184                if ( PADDING_NEEDED( attrDataLen ) )
   4185                {
   4186                  attrDataLen++;
   4187                }
   4188          
   4189                dataPtr += attrDataLen;
   4190              }
   4191            }
   4192          
   4193            return ( (void *)reportCmd );
   4194          }
   4195          #endif
   4196          
   4197          /*********************************************************************
   4198           * @fn      zclParseInDefaultRspCmd
   4199           *
   4200           * @brief   Parse the "Profile" Default Response Command
   4201           *
   4202           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4203           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4204           *
   4205           * @param   pCmd - pointer to incoming data to parse
   4206           *
   4207           * @return  pointer to the parsed command structure
   4208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4209          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4210          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4211            zclDefaultRspCmd_t *defaultRspCmd;
   4212            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine114 & 0xFFFF
   4213          
   4214            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_211:
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4215            if ( defaultRspCmd != NULL )
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   6003         JZ        ??CrossCallReturnLabel_26
   4216            {
   4217              defaultRspCmd->commandID = *pBuf++;
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
   4218              defaultRspCmd->statusCode = *pBuf;
   4219            }
   4220          
   4221            return ( (void *)defaultRspCmd );
   \                     ??CrossCallReturnLabel_26:
   \   000012   02....       LJMP      ??Subroutine202_0 & 0xFFFF
   4222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   7A02         MOV       R2,#0x2
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET
   4223          
   4224          #ifdef ZCL_DISCOVER
   4225          /*********************************************************************
   4226           * @fn      zclParseInDiscAttrsCmd
   4227           *
   4228           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4229           *
   4230           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4231           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4232           *
   4233           * @param   pCmd - pointer to incoming data to parse
   4234           *
   4235           * @return  pointer to the parsed command structure
   4236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4237          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsCmd:
   4238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4239            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4240            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine115 & 0xFFFF
   4241          
   4242            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   \                     ??CrossCallReturnLabel_443:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A03         MOV       R2,#0x3
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4243            if ( pDiscoverCmd != NULL )
   \   00000F   EA           MOV       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   601A         JZ        ??zclParseInDiscAttrsCmd_0
   4244            {
   4245              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ?Subroutine179 & 0xFFFF
   4246              pBuf += 2;
   4247              pDiscoverCmd->maxAttrIDs = *pBuf;
   4248            }
   \                     ??CrossCallReturnLabel_297:
   \   00001A   F9           MOV       R1,A
   \   00001B   EC           MOV       A,R4
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   E9           MOV       A,R1
   \   000023   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
   4249          
   4250            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscAttrsCmd_0:
   \   00002D   02....       LJMP      ??Subroutine202_0 & 0xFFFF
   4251          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   4252          
   4253          /*********************************************************************
   4254           * @fn      zclParseInDiscAttrsRspCmd
   4255           *
   4256           * @brief   Parse the "Profile" Discovery Response Commands
   4257           *
   4258           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4259           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4260           *
   4261           * @param   pCmd - pointer to incoming data to parse
   4262           *
   4263           * @return  pointer to the parsed command structure
   4264           */
   4265          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4266          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsRspCmd:
   4267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4268            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4269            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine91 & 0xFFFF
   4270            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   \                     ??CrossCallReturnLabel_165:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   34FF         ADDC      A,#-0x1
   \   00000D   F9           MOV       R1,A
   \   00000E   7A03         MOV       R2,#0x3
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ?US_DIV_MOD
   \   000015   E8           MOV       A,R0
   \   000016   F5..         MOV       ?V0,A
   4271          
   4272            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4273                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   00001B   39           ADDC      A,R1
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4274          
   4275            if ( pDiscoverRspCmd != NULL )
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   6036         JZ        ??zclParseInDiscAttrsRspCmd_0
   4276            {
   4277              uint8 i;
   4278          
   4279              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000024   12....       LCALL     ?Subroutine17 & 0xFFFF
   4280              pDiscoverRspCmd->numAttr = numAttr;
   4281          
   4282              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_10:
   \   000027   7C00         MOV       R4,#0x0
   \   000029   8029         SJMP      ??zclParseInDiscAttrsRspCmd_1
   4283              {
   4284                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsRspCmd_2:
   \   00002B   EC           MOV       A,R4
   \   00002C   75F003       MOV       B,#0x3
   \   00002F   A4           MUL       AB
   \   000030   F8           MOV       R0,A
   \   000031   A9F0         MOV       R1,B
   \   000033   EA           MOV       A,R2
   \   000034   28           ADD       A,R0
   \   000035   F8           MOV       R0,A
   \   000036   EB           MOV       A,R3
   \   000037   39           ADDC      A,R1
   \   000038   F9           MOV       R1,A
   \   000039   12....       LCALL     ?Subroutine128 & 0xFFFF
   4285                pBuf += 2;
   4286                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4287              }
   \                     ??CrossCallReturnLabel_229:
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   EE           MOV       A,R6
   \   00004D   2403         ADD       A,#0x3
   \   00004F   FE           MOV       R6,A
   \   000050   5001         JNC       ??zclParseInDiscAttrsRspCmd_3
   \   000052   0F           INC       R7
   \                     ??zclParseInDiscAttrsRspCmd_3:
   \   000053   0C           INC       R4
   \                     ??zclParseInDiscAttrsRspCmd_1:
   \   000054   EC           MOV       A,R4
   \   000055   C3           CLR       C
   \   000056   95..         SUBB      A,?V0
   \   000058   40D1         JC        ??zclParseInDiscAttrsRspCmd_2
   4288            }
   4289          
   4290            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsRspCmd_0:
   \   00005A   02....       LJMP      ??Subroutine207_0 & 0xFFFF
   4291          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V3
   \   000006                REQUIRE ??Subroutine223_0
   \   000006                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B   E5..         MOV       A,?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   24FF         ADD       A,#-0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   E5..         MOV       A,?V0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   A9F0         MOV       R1,B
   \   000006                REQUIRE ??Subroutine247_0
   \   000006                ; // Fall through to label ??Subroutine247_0
   4292          
   4293          /*********************************************************************
   4294           * @fn      zclParseInDiscCmdsCmd
   4295           *
   4296           * @brief   Parse the "Profile" Discovery Commands
   4297           *
   4298           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4299           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4300           *
   4301           * @param   pCmd - pointer to incoming data to parse
   4302           *
   4303           * @return  pointer to the parsed command structure
   4304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4305          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsCmd:
   4306          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4307            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4308            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine114 & 0xFFFF
   4309          
   4310            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   \                     ??CrossCallReturnLabel_212:
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4311            if ( pDiscoverCmd != NULL )
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   6003         JZ        ??CrossCallReturnLabel_27
   4312            {
   4313              pDiscoverCmd->startCmdID = *pBuf++;
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
   4314              pDiscoverCmd->maxCmdID = *pBuf++;
   4315            }
   4316          
   4317            return ( (void *)pDiscoverCmd );
   \                     ??CrossCallReturnLabel_27:
   \   000012   02....       LJMP      ??Subroutine202_0 & 0xFFFF
   4318          }
   4319          
   4320          /*********************************************************************
   4321           * @fn      zclParseInDiscCmdsRspCmd
   4322           *
   4323           * @brief   Parse the Discover Commands Response Command
   4324           *
   4325           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4326           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4327           *
   4328           * @param   pCmd - pointer to incoming data to parse
   4329           *
   4330           * @return  pointer to the parsed command structure
   4331           */
   4332          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4333          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsRspCmd:
   4334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4335            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4336            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine98 & 0xFFFF
   4337            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   \                     ??CrossCallReturnLabel_174:
   \   000008   14           DEC       A
   \   000009   F5..         MOV       ?V0,A
   4338          
   4339              // allocate memory for size of structure plus variable array
   4340            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4341                              ( numCmds * sizeof(uint8) ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   2405         ADD       A,#0x5
   \   00000D   FA           MOV       R2,A
   \   00000E   E4           CLR       A
   \   00000F   3400         ADDC      A,#0x0
   \   000011   FB           MOV       R3,A
   \   000012   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4342            if ( pDiscoverRspCmd != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   603A         JZ        ??zclParseInDiscCmdsRspCmd_0
   4343            {
   4344              uint8 i;
   4345              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000019   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00001C   12....       LCALL     ?Subroutine18 & 0xFFFF
   4346              pDiscoverRspCmd->numCmd = numCmds;
   \                     ??CrossCallReturnLabel_14:
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E5..         MOV       A,?V0
   \   000027   F0           MOVX      @DPTR,A
   4347          
   4348              for ( i = 0; i < numCmds; i++ )
   \   000028   7800         MOV       R0,#0x0
   \   00002A   8021         SJMP      ??zclParseInDiscCmdsRspCmd_1
   4349              {
   4350                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   \                     ??zclParseInDiscCmdsRspCmd_2:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   E8           MOV       A,R0
   \   000034   FC           MOV       R4,A
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   2C           ADD       A,R4
   \   00003E   F9           MOV       R1,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   3400         ADDC      A,#0x0
   \   000043   8982         MOV       DPL,R1
   \   000045   F583         MOV       DPH,A
   \   000047   D0E0         POP       A
   \   000049   12....       LCALL     ?Subroutine18 & 0xFFFF
   4351              }
   \                     ??CrossCallReturnLabel_15:
   \   00004C   08           INC       R0
   \                     ??zclParseInDiscCmdsRspCmd_1:
   \   00004D   E8           MOV       A,R0
   \   00004E   C3           CLR       C
   \   00004F   95..         SUBB      A,?V0
   \   000051   40D9         JC        ??zclParseInDiscCmdsRspCmd_2
   4352            }
   4353          
   4354            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscCmdsRspCmd_0:
   \   000053   02....       LJMP      ?Subroutine4 & 0xFFFF
   4355          }
   4356          
   4357          /*********************************************************************
   4358           * @fn      zclParseInDiscAttrsExtRspCmd
   4359           *
   4360           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4361           *
   4362           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4363           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4364           *
   4365           * @param   pCmd - pointer to incoming data to parse
   4366           *
   4367           * @return  pointer to the parsed command structure
   4368           */
   4369          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4370          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsExtRspCmd:
   4371          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4372            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4373            uint8 i;
   4374            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine91 & 0xFFFF
   4375            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   \                     ??CrossCallReturnLabel_166:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   34FF         ADDC      A,#-0x1
   \   00000E   F5..         MOV       ?V1,A
   \   000010   7402         MOV       A,#0x2
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?US_SHR
   \   000017   E5..         MOV       A,?V0
   \   000019   F5..         MOV       ?V0,A
   4376          
   4377            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4378                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   E5..         MOV       A,?V2
   \   000029   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   00002C   35..         ADDC      A,?V3
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4379          
   4380            if ( pDiscoverRspCmd != NULL )
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   6048         JZ        ??zclParseInDiscAttrsExtRspCmd_0
   4381            {
   4382              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000036   12....       LCALL     ?Subroutine17 & 0xFFFF
   4383              pDiscoverRspCmd->numAttr = numAttrs;
   4384          
   4385              for ( i = 0; i < numAttrs; i++ )
   \                     ??CrossCallReturnLabel_11:
   \   000039   7900         MOV       R1,#0x0
   \   00003B   803B         SJMP      ??zclParseInDiscAttrsExtRspCmd_1
   4386              {
   4387                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsExtRspCmd_2:
   \   00003D   E9           MOV       A,R1
   \   00003E   F5..         MOV       ?V2,A
   \   000040   75..00       MOV       ?V3,#0x0
   \   000043   7402         MOV       A,#0x2
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?S_SHL
   \   00004A   EA           MOV       A,R2
   \   00004B   25..         ADD       A,?V2
   \   00004D   FC           MOV       R4,A
   \   00004E   EB           MOV       A,R3
   \   00004F   35..         ADDC      A,?V3
   \   000051   FD           MOV       R5,A
   \   000052   12....       LCALL     ?Subroutine128 & 0xFFFF
   4388                pBuf += 2;
   4389                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4390                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   4391              }
   \                     ??CrossCallReturnLabel_230:
   \   000055   8C82         MOV       DPL,R4
   \   000057   8D83         MOV       DPH,R5
   \   000059   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   00005C   8C82         MOV       DPL,R4
   \   00005E   8D83         MOV       DPH,R5
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000067   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   EE           MOV       A,R6
   \   000071   2404         ADD       A,#0x4
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??zclParseInDiscAttrsExtRspCmd_3
   \   000076   0F           INC       R7
   \                     ??zclParseInDiscAttrsExtRspCmd_3:
   \   000077   09           INC       R1
   \                     ??zclParseInDiscAttrsExtRspCmd_1:
   \   000078   E9           MOV       A,R1
   \   000079   C3           CLR       C
   \   00007A   95..         SUBB      A,?V0
   \   00007C   40BF         JC        ??zclParseInDiscAttrsExtRspCmd_2
   4392            }
   4393          
   4394            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsExtRspCmd_0:
   \   00007E   02....       LJMP      ??Subroutine207_0 & 0xFFFF
   4395          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   4396          #endif // ZCL_DISCOVER
   4397          
   4398          #ifdef ZCL_READ
   4399          /*********************************************************************
   4400           * @fn      zclProcessInReadCmd
   4401           *
   4402           * @brief   Process the "Profile" Read Command
   4403           *
   4404           * @param   pInMsg - incoming message to process
   4405           *
   4406           * @return  TRUE if command processed. FALSE, otherwise.
   4407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine212_0
   \   000004                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine220_0
   \   000002                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4408          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4409          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine118 & 0xFFFF
   4410            zclReadCmd_t *readCmd;
   4411            zclReadRspCmd_t *readRspCmd;
   4412            zclAttrRec_t attrRec;
   4413            uint16 len;
   4414            uint8 i;
   4415            uint8 attrFound;
   4416          
   4417            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_557:
   \   00000D   7404         MOV       A,#0x4
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine36 & 0xFFFF
   4418          
   4419            // calculate the length of the response status record
   4420            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4421          
   4422            readRspCmd = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_47:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   00001B   75F006       MOV       B,#0x6
   \   00001E   A4           MUL       AB
   \   00001F   A9F0         MOV       R1,B
   \   000021   2401         ADD       A,#0x1
   \   000023   FA           MOV       R2,A
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV       ?V6,R2
   \   00002C   8B..         MOV       ?V7,R3
   4423            if ( readRspCmd == NULL )
   \   00002E   EA           MOV       A,R2
   \   00002F   45..         ORL       A,?V7
   \   000031   7005         JNZ       ??zclProcessInReadCmd_0
   4424            {
   4425              return FALSE; // EMBEDDED RETURN
   \   000033   7900         MOV       R1,#0x0
   \   000035   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4426            }
   4427          
   4428            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   000038   7404         MOV       A,#0x4
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   F0           MOVX      @DPTR,A
   4429            for ( i = 0; i < readCmd->numAttr; i++ )
   \   000045   75..00       MOV       ?V0,#0x0
   \   000048   800D         SJMP      ??zclProcessInReadCmd_2
   4430            {
   4431              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4432          
   4433              statusRec->attrID = readCmd->attrID[i];
   4434              
   4435              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4436              
   4437              //Validate the attribute is found and the access control
   4438              if ( ( attrFound == TRUE ) && 
   4439                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4440                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4441              {
   4442                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4443                {
   4444                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4445                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4446                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4447                  {
   4448                    statusRec->data = attrRec.attr.dataPtr;
   4449                    statusRec->dataType = attrRec.attr.dataType;
   4450                  }
   4451                }
   4452                else
   4453                {
   4454                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4455                }
   4456              }
   4457              else
   4458              {
   4459                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   4460              }
   \                     ??CrossCallReturnLabel_587:
   \   000052   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   000054   F0           MOVX      @DPTR,A
   \                     ??zclProcessInReadCmd_5:
   \   000055   05..         INC       ?V0
   \                     ??zclProcessInReadCmd_2:
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   00005F   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000062   4003         JC        $+5
   \   000064   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   000067   A8..         MOV       R0,?V0
   \   000069   E8           MOV       A,R0
   \   00006A   75F006       MOV       B,#0x6
   \   00006D   A4           MUL       AB
   \   00006E   FA           MOV       R2,A
   \   00006F   ABF0         MOV       R3,B
   \   000071   E5..         MOV       A,?V6
   \   000073   2A           ADD       A,R2
   \   000074   F582         MOV       DPL,A
   \   000076   E5..         MOV       A,?V7
   \   000078   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00007B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   00007E   E8           MOV       A,R0
   \   00007F   28           ADD       A,R0
   \   000080   F8           MOV       R0,A
   \   000081   E4           CLR       A
   \   000082   33           RLC       A
   \   000083   F9           MOV       R1,A
   \   000084   7404         MOV       A,#0x4
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00008C   FC           MOV       R4,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FD           MOV       R5,A
   \   000090   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000093   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000096   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000099   7402         MOV       A,#0x2
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   E8           MOV       A,R0
   \   00009F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   0000A2   F5..         MOV       ?V2,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F5..         MOV       ?V3,A
   \   0000A8                ; Setup parameters for call to function zclFindAttrRec
   \   0000A8   7406         MOV       A,#0x6
   \   0000AA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AD   88..         MOV       ?V4,R0
   \   0000AF   89..         MOV       ?V5,R1
   \   0000B1   78..         MOV       R0,#?V4
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B6   8A82         MOV       DPL,R2
   \   0000B8   8B83         MOV       DPH,R3
   \   0000BA   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000BD   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   0000C0   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000C3   7402         MOV       A,#0x2
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   E9           MOV       A,R1
   \   0000C9   6401         XRL       A,#0x1
   \   0000CB   6003         JZ        $+5
   \   0000CD   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000D8   401E         JC        ??zclProcessInReadCmd_7
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   0000E3   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E5   92F0         MOV       B.0,C
   \   0000E7   740B         MOV       A,#0xb
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000EF   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   0000F2   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   0000F3   4003         JC        $+5
   \   0000F5   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   0000F8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000FA   5075         JNC       ??zclProcessInReadCmd_9
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000103   E8           MOV       A,R0
   \   000104   2406         ADD       A,#0x6
   \   000106   F5..         MOV       ?V4,A
   \   000108   E4           CLR       A
   \   000109   39           ADDC      A,R1
   \   00010A   F5..         MOV       ?V5,A
   \   00010C   740B         MOV       A,#0xb
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   A2E4         MOV       C,0xE0 /* A   */.4
   \   000114   5021         JNC       ??zclProcessInReadCmd_10
   \   000116                ; Setup parameters for call to function zclGetAuthorizeCB
   \   000116   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000119   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   8B83         MOV       DPH,R3
   \   000120   E582         MOV       A,DPL
   \   000122   4583         ORL       A,DPH
   \   000124   6011         JZ        ??zclProcessInReadCmd_10
   \   000126                ; Setup parameters for indirect call
   \   000126   7901         MOV       R1,#0x1
   \   000128   7406         MOV       A,#0x6
   \   00012A   12....       LCALL     ?XSTACK_DISP102_8
   \   00012D   AA..         MOV       R2,?V4
   \   00012F   AB..         MOV       R3,?V5
   \   000131   12....       LCALL     ?CALL_IND
   \   000134   E9           MOV       A,R1
   \   000135   8002         SJMP      ??zclProcessInReadCmd_11
   \                     ??zclProcessInReadCmd_10:
   \   000137   7400         MOV       A,#0x0
   4461            }
   \                     ??zclProcessInReadCmd_11:
   \   000139   C0E0         PUSH      A
   \   00013B   7402         MOV       A,#0x2
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000143   D0E0         POP       A
   \   000145   F0           MOVX      @DPTR,A
   \   000146   7402         MOV       A,#0x2
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   00014E   6003         JZ        $+5
   \   000150   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000153   740C         MOV       A,#0xc
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00015B   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00015E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000161   740A         MOV       A,#0xa
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   E0           MOVX      A,@DPTR
   \   000167   C0E0         PUSH      A
   \   000169   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00016C   D0E0         POP       A
   \   00016E   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000179   748F         MOV       A,#-0x71
   \   00017B   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4462          
   4463            // Build and send Read Response command
   4464            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4465                             readRspCmd, !pInMsg->hdr.fc.direction,
   4466                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   00017E   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000181                ; Setup parameters for call to function zcl_SendReadRsp
   \   000181   8E82         MOV       DPL,R6
   \   000183   8F83         MOV       DPH,R7
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000191   75..01       MOV       ?V0,#0x1
   \   000194   78..         MOV       R0,#?V0
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000199   8E82         MOV       DPL,R6
   \   00019B   8F83         MOV       DPH,R7
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0001A2   F5..         MOV       ?V0,A
   \   0001A4   78..         MOV       R0,#?V0
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A9   78..         MOV       R0,#?V6
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AE   85..82       MOV       DPL,?V2
   \   0001B1   85..83       MOV       DPH,?V3
   \   0001B4   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   0001B7   E5..         MOV       A,?V2
   \   0001B9   2406         ADD       A,#0x6
   \   0001BB   FA           MOV       R2,A
   \   0001BC   E4           CLR       A
   \   0001BD   35..         ADDC      A,?V3
   \   0001BF   FB           MOV       R3,A
   \   0001C0   E5..         MOV       A,?V2
   \   0001C2   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   0001C5   35..         ADDC      A,?V3
   \   0001C7   F583         MOV       DPH,A
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   F9           MOV       R1,A
   \   0001CB   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   0001CE   7405         MOV       A,#0x5
   \   0001D0   12....       LCALL     ?DEALLOC_XSTACK8
   4467            zcl_mem_free( readRspCmd );
   \   0001D3                ; Setup parameters for call to function osal_mem_free
   \   0001D3   AA..         MOV       R2,?V6
   \   0001D5   AB..         MOV       R3,?V7
   \   0001D7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4468          
   4469            return TRUE;
   \   0001DA   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   0001DC   740E         MOV       A,#0xe
   \   0001DE   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   4470          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2402         ADD       A,#0x2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine232_0
   \   000004                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003                REQUIRE ??Subroutine233_0
   \   000003                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine237_0
   \   000006                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   240C         ADD       A,#0xc
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000009   E5..         MOV       A,?V2
   \   00000B   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   00000E   35..         ADDC      A,?V3
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET
   4471          #endif // ZCL_READ
   4472          
   4473          #ifdef ZCL_WRITE
   4474          /*********************************************************************
   4475           * @fn      processInWriteCmd
   4476           *
   4477           * @brief   Process the "Profile" Write and Write No Response Commands
   4478           *
   4479           * @param   pInMsg - incoming message to process
   4480           *
   4481           * @return  TRUE if command processed. FALSE, otherwise.
   4482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4483          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   4485            zclWriteCmd_t *writeCmd;
   4486            zclWriteRspCmd_t *writeRspCmd;
   4487            uint8 sendRsp = FALSE;
   \                     ??CrossCallReturnLabel_465:
   \   00000D   C2..         CLR       ?VB.0
   4488            uint8 j = 0;
   \   00000F   12....       LCALL     ?Subroutine69 & 0xFFFF
   4489            uint8 i;
   4490          
   4491            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_119:
   \   000012   7404         MOV       A,#0x4
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine15 & 0xFFFF
   4492            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_543:
   \   00001A   C8           XCH       A,R0
   \   00001B   2407         ADD       A,#0x7
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   38           ADDC      A,R0
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6402         XRL       A,#0x2
   \   000026   701B         JNZ       ??zclProcessInWriteCmd_0
   4493            {
   4494              // We need to send a response back - allocate space for it
   4495              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4496                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   7404         MOV       A,#0x4
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V6,R2
   \   000035   8B..         MOV       ?V7,R3
   4497              if ( writeRspCmd == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   45..         ORL       A,?V7
   \   00003A   7005         JNZ       ??zclProcessInWriteCmd_1
   4498              {
   4499                return FALSE; // EMBEDDED RETURN
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4500              }
   4501          
   4502              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   000041   D2..         SETB      ?VB.0
   4503            }
   4504          
   4505            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   000043   7F00         MOV       R7,#0x0
   \   000045   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000048   7406         MOV       A,#0x6
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000050   8011         SJMP      ??zclProcessInWriteCmd_3
   4506            {
   4507              zclAttrRec_t attrRec;
   4508              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4509          
   4510              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4511                                   statusRec->attrID, &attrRec ) )
   4512              {
   4513                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4514                {
   4515                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4516                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4517                  break;
   4518                }
   4519                if ( statusRec->dataType == attrRec.attr.dataType )
   4520                {
   4521                  uint8 status;
   4522          
   4523                  // Write the new attribute value
   4524                  if ( attrRec.attr.dataPtr != NULL )
   4525                  {
   4526                    //Handle special case for Identify
   4527                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4528                    {
   4529                      uint16 identifyTime; 
   4530                            
   4531                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4532                                  
   4533                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4534                      
   4535                      status = ZCL_STATUS_SUCCESS;
   4536                    }          
   4537                    else
   4538                    {                
   4539                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4540                                                 &attrRec, statusRec );
   4541                    }
   4542                  }
   4543                  else // Use CB
   4544                  {
   4545                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4546                                                      &attrRec, statusRec->attrData );
   4547                  }
   4548          
   4549                  // If successful, a write attribute status record shall NOT be generated
   4550                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4551                  {
   4552                    // Attribute is read only - move on to the next write attribute record
   4553                    writeRspCmd->attrList[j].status = status;
   4554                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4555                  }
   4556                }
   4557                else
   4558                {
   4559                  // Attribute data type is incorrect - move on to the next write attribute record
   4560                  if ( sendRsp )
   4561                  {
   4562                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4563                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4564                  }
   4565                }
   4566              }
   4567              else
   4568              {
   4569                // Attribute is not supported - move on to the next write attribute record
   4570                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   000052   A2..         MOV       C,?VB.0
   \   000054   500C         JNC       ??CrossCallReturnLabel_8
   4571                {
   4572                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000056   85..82       MOV       DPL,?V4
   \   000059   85..83       MOV       DPH,?V5
   \   00005C   A3           INC       DPTR
   \   00005D   7486         MOV       A,#-0x7a
   4573                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4574                }
   4575              }
   \                     ??zclProcessInWriteCmd_5:
   \   00005F   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000062   0F           INC       R7
   \                     ??zclProcessInWriteCmd_3:
   \   000063   7404         MOV       A,#0x4
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00006B   4003         JC        $+5
   \   00006D   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   000070   EF           MOV       A,R7
   \   000071   75F005       MOV       B,#0x5
   \   000074   A4           MUL       AB
   \   000075   F8           MOV       R0,A
   \   000076   A9F0         MOV       R1,B
   \   000078   7404         MOV       A,#0x4
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000080   8582..       MOV       ?V2,DPL
   \   000083   8583..       MOV       ?V3,DPH
   \   000086   EE           MOV       A,R6
   \   000087   75F003       MOV       B,#0x3
   \   00008A   A4           MUL       AB
   \   00008B   F8           MOV       R0,A
   \   00008C   A9F0         MOV       R1,B
   \   00008E   E5..         MOV       A,?V6
   \   000090   28           ADD       A,R0
   \   000091   F5..         MOV       ?V4,A
   \   000093   E5..         MOV       A,?V7
   \   000095   39           ADDC      A,R1
   \   000096   F5..         MOV       ?V5,A
   \   000098   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00009B   7402         MOV       A,#0x2
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   0000A3                ; Setup parameters for call to function zclFindAttrRec
   \   0000A3   7408         MOV       A,#0x8
   \   0000A5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A8   88..         MOV       ?V0,R0
   \   0000AA   89..         MOV       ?V1,R1
   \   0000AC   78..         MOV       R0,#?V0
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   85..82       MOV       DPL,?V2
   \   0000B4   85..83       MOV       DPH,?V3
   \   0000B7   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   0000C0   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   0000C3   7404         MOV       A,#0x4
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000CB   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV       A,R1
   \   0000D4   7003         JNZ       $+5
   \   0000D6   02....       LJMP      ??zclProcessInWriteCmd_4 & 0xFFFF
   \   0000D9   7406         MOV       A,#0x6
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0000E1   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E3   92F0         MOV       B.0,C
   \   0000E5   740D         MOV       A,#0xd
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000ED   20F001       JB        B.0,??zclProcessInWriteCmd_6
   \   0000F0   B3           CPL       C
   \                     ??zclProcessInWriteCmd_6:
   \   0000F1   4062         JC        ??zclProcessInWriteCmd_7
   \   0000F3   85..82       MOV       DPL,?V4
   \   0000F6   85..83       MOV       DPH,?V5
   \   0000F9   A3           INC       DPTR
   \   0000FA   7486         MOV       A,#-0x7a
   \   0000FC   12....       LCALL     ?Subroutine14 & 0xFFFF
   4576            } // for loop
   4577          
   4578            if ( sendRsp )
   \                     ??CrossCallReturnLabel_9:
   \   0000FF   A2..         MOV       C,?VB.0
   \   000101   504B         JNC       ??zclProcessInWriteCmd_8
   4579            {
   4580              writeRspCmd->numAttr = j;
   \   000103   EE           MOV       A,R6
   \   000104   85..82       MOV       DPL,?V6
   \   000107   85..83       MOV       DPH,?V7
   \   00010A   F0           MOVX      @DPTR,A
   4581              if ( writeRspCmd->numAttr == 0 )
   \   00010B   700B         JNZ       ??zclProcessInWriteCmd_9
   4582              {
   4583                // Since all records were written successful, include a single status record
   4584                // in the resonse command with the status field set to SUCCESS and the
   4585                // attribute ID field omitted.
   4586                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00010D   A3           INC       DPTR
   \   00010E   E4           CLR       A
   \   00010F   F0           MOVX      @DPTR,A
   4587                writeRspCmd->numAttr = 1;
   \   000110   85..82       MOV       DPL,?V6
   \   000113   85..83       MOV       DPH,?V7
   \   000116   04           INC       A
   \   000117   F0           MOVX      @DPTR,A
   4588              }
   4589          
   4590              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4591                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4592                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_9:
   \   000118   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00011B   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000121   75..01       MOV       ?V0,#0x1
   \   000124   78..         MOV       R0,#?V0
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000129   7408         MOV       A,#0x8
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000131   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000137   78..         MOV       R0,#?V6
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013C   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00013F   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000142   7405         MOV       A,#0x5
   \   000144   12....       LCALL     ?DEALLOC_XSTACK8
   4593              zcl_mem_free( writeRspCmd );
   \   000147                ; Setup parameters for call to function osal_mem_free
   \   000147   AA..         MOV       R2,?V6
   \   000149   AB..         MOV       R3,?V7
   \   00014B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4594            }
   4595          
   4596            return TRUE;
   \                     ??zclProcessInWriteCmd_8:
   \   00014E   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000150   7410         MOV       A,#0x10
   \   000152   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   \                     ??zclProcessInWriteCmd_7:
   \   000155   85..82       MOV       DPL,?V2
   \   000158   85..83       MOV       DPH,?V3
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F8           MOV       R0,A
   \   00015F   740C         MOV       A,#0xc
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   E0           MOVX      A,@DPTR
   \   000165   68           XRL       A,R0
   \   000166   6003         JZ        $+5
   \   000168   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   \   00016B   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   00016E   F5..         MOV       ?V0,A
   \   000170   A3           INC       DPTR
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F5..         MOV       ?V1,A
   \   000174   740E         MOV       A,#0xe
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00017C   6065         JZ        ??zclProcessInWriteCmd_11
   \   00017E   85..82       MOV       DPL,?V0
   \   000181   85..83       MOV       DPH,?V1
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   E0           MOVX      A,@DPTR
   \   000189   6403         XRL       A,#0x3
   \   00018B   7002         JNZ       ??zclProcessInWriteCmd_12
   \   00018D   A3           INC       DPTR
   \   00018E   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_12:
   \   00018F   7040         JNZ       ??zclProcessInWriteCmd_13
   \   000191   85..82       MOV       DPL,?V2
   \   000194   85..83       MOV       DPH,?V3
   \   000197   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00019A   7035         JNZ       ??zclProcessInWriteCmd_13
   \   00019C                ; Setup parameters for call to function osal_memcpy
   \   00019C   85..82       MOV       DPL,?V2
   \   00019F   85..83       MOV       DPH,?V3
   \   0001A2   A3           INC       DPTR
   \   0001A3   A3           INC       DPTR
   \   0001A4   A3           INC       DPTR
   \   0001A5   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AB   7C02         MOV       R4,#0x2
   \   0001AD   7D00         MOV       R5,#0x0
   \   0001AF   7405         MOV       A,#0x5
   \   0001B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B7   7403         MOV       A,#0x3
   \   0001B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BC                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   0001BC   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   0001BF   F8           MOV       R0,A
   \   0001C0   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0001C3   7402         MOV       A,#0x2
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0001CB   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   0001CE   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \                     ??zclProcessInWriteCmd_13:
   \   0001D1                ; Setup parameters for call to function zclWriteAttrData
   \   0001D1   78..         MOV       R0,#?V2
   \   0001D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D6   740A         MOV       A,#0xa
   \   0001D8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DB   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   0001DE   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   0001E1   8017         SJMP      ??zclProcessInWriteCmd_14
   \                     ??zclProcessInWriteCmd_11:
   \   0001E3                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0001E3   85..82       MOV       DPL,?V2
   \   0001E6   85..83       MOV       DPH,?V3
   \   0001E9   A3           INC       DPTR
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001EF   740A         MOV       A,#0xa
   \   0001F1   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F4   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   0001F7   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteCmd_14:
   \   0001FA   7402         MOV       A,#0x2
   \   0001FC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FF   E9           MOV       A,R1
   \   000200   A2..         MOV       C,?VB.0
   \   000202   4003         JC        $+5
   \   000204   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \   000207   7003         JNZ       $+5
   \   000209   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \   00020C   85..82       MOV       DPL,?V4
   \   00020F   85..83       MOV       DPH,?V5
   \   000212   A3           INC       DPTR
   \   000213   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_10:
   \   000216   A2..         MOV       C,?VB.0
   \   000218   4003         JC        $+5
   \   00021A   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \   00021D   85..82       MOV       DPL,?V4
   \   000220   85..83       MOV       DPH,?V5
   \   000223   A3           INC       DPTR
   \   000224   748D         MOV       A,#-0x73
   \   000226   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   4597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E5..         MOV       A,?V0
   \   000002   2406         ADD       A,#0x6
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   FB           MOV       R3,A
   \   000009                REQUIRE ??Subroutine228_0
   \   000009                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000005   35..         ADDC      A,?V1
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine229_0
   \   000006                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   13           RRC       A
   \   000006   541F         ANL       A,#0x1f
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine230_0
   \   000004                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   85..83       MOV       DPH,?V5
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E8           MOV       A,R0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   E9           MOV       A,R1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   0E           INC       R6
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000009                REQUIRE ??Subroutine234_0
   \   000009                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   7E00         MOV       R6,#0x0
   \   000002   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000005   C8           XCH       A,R0
   \   000006   240C         ADD       A,#0xc
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   38           ADDC      A,R0
   \   00000C   F583         MOV       DPH,A
   \   00000E   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   75F003       MOV       B,#0x3
   \   000006   A4           MUL       AB
   \   000007   A9F0         MOV       R1,B
   \   000009   2401         ADD       A,#0x1
   \   00000B   FA           MOV       R2,A
   \   00000C   E4           CLR       A
   \   00000D   39           ADDC      A,R1
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   F8           MOV       R0,A
   \   000004   EF           MOV       A,R7
   \   000005   C3           CLR       C
   \   000006   98           SUBB      A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine238_0
   \   000006                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000003   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   FE           MOV       R6,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000004                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000004                ; Setup parameters for call to function zcl_SendDiscoverAttrsRspCmd
   \   000004                ; Setup parameters for call to function zcl_SendDiscoverAttrsExtRsp
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   C8           XCH       A,R0
   \   00000D   2406         ADD       A,#0x6
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   38           ADDC      A,R0
   \   000013   F583         MOV       DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000007   EE           MOV       A,R6
   \   000008   2406         ADD       A,#0x6
   \   00000A   FA           MOV       R2,A
   \   00000B   E4           CLR       A
   \   00000C   3F           ADDC      A,R7
   \   00000D   FB           MOV       R3,A
   \   00000E   EE           MOV       A,R6
   \   00000F   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000012   3F           ADDC      A,R7
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   22           RET
   4598          
   4599          /*********************************************************************
   4600           * @fn      zclRevertWriteUndividedCmd
   4601           *
   4602           * @brief   Revert the "Profile" Write Undevided Command
   4603           *
   4604           * @param   pInMsg - incoming message to process
   4605           * @param   curWriteRec - old data
   4606           * @param   numAttr - number of attributes to be reverted
   4607           *
   4608           * @return  none
   4609           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4610          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4611                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4612          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine39 & 0xFFFF
   4613            uint8 i;
   4614          
   4615            for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_349:
   \   000019   75..00       MOV       ?V0,#0x0
   \   00001C   802F         SJMP      ??zclRevertWriteUndividedCmd_0
   4616            {
   4617              zclAttrRec_t attrRec;
   4618              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4619          
   4620              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4621                                    statusRec->attrID, &attrRec ) )
   4622              {
   4623                break; // should never happen
   4624              }
   4625          
   4626              if ( attrRec.attr.dataPtr != NULL )
   4627              {
   4628                // Just copy the old data back - no need to validate the data
   4629                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4630                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4631              }
   4632              else // Use CB
   4633              {
   4634                // Write the old data back
   4635                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4636                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001E   12....       LCALL     ?Subroutine93 & 0xFFFF
   4637              }
   \                     ??CrossCallReturnLabel_542:
   \   000021   FE           MOV       R6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FF           MOV       R7,A
   \   000025                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7406         MOV       A,#0x6
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   EE           MOV       A,R6
   \   000034   2406         ADD       A,#0x6
   \   000036   FA           MOV       R2,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   EE           MOV       A,R6
   \   00003B   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00003E   3F           ADDC      A,R7
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   00004B   05..         INC       ?V0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   00004D   741B         MOV       A,#0x1b
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000055   C3           CLR       C
   \   000056   E5..         MOV       A,?V0
   \   000058   98           SUBB      A,R0
   \   000059   E4           CLR       A
   \   00005A   99           SUBB      A,R1
   \   00005B   4003         JC        $+5
   \   00005D   02....       LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
   \   000060   E5..         MOV       A,?V0
   \   000062   75F005       MOV       B,#0x5
   \   000065   A4           MUL       AB
   \   000066   F8           MOV       R0,A
   \   000067   A9F0         MOV       R1,B
   \   000069   7402         MOV       A,#0x2
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   28           ADD       A,R0
   \   000070   FE           MOV       R6,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   39           ADDC      A,R1
   \   000074   FF           MOV       R7,A
   \   000075   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000078   88..         MOV       ?V2,R0
   \   00007A   89..         MOV       ?V3,R1
   \   00007C                ; Setup parameters for call to function zclFindAttrRec
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP100_8
   \   000081   88..         MOV       ?V4,R0
   \   000083   89..         MOV       ?V5,R1
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000091   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000094   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000097   7402         MOV       A,#0x2
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C   E9           MOV       A,R1
   \   00009D   604F         JZ        ??zclRevertWriteUndividedCmd_3
   \   00009F   EE           MOV       A,R6
   \   0000A0   2403         ADD       A,#0x3
   \   0000A2   FE           MOV       R6,A
   \   0000A3   5001         JNC       ??zclRevertWriteUndividedCmd_4
   \   0000A5   0F           INC       R7
   \                     ??zclRevertWriteUndividedCmd_4:
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   0000AD   740A         MOV       A,#0xa
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   0000B5   E5..         MOV       A,?V2
   \   0000B7   45..         ORL       A,?V3
   \   0000B9   7003         JNZ       $+5
   \   0000BB   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000BE                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000BE   7408         MOV       A,#0x8
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F9           MOV       R1,A
   \   0000C5   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000C8   8A..         MOV       ?V4,R2
   \   0000CA   8B..         MOV       ?V5,R3
   \   0000CC   AC..         MOV       R4,?V4
   \   0000CE   AD..         MOV       R5,?V5
   \   0000D0                ; Setup parameters for call to function osal_memcpy
   \   0000D0   8E82         MOV       DPL,R6
   \   0000D2   8F83         MOV       DPH,R7
   \   0000D4   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   4638            } // for loop
   \                     ??CrossCallReturnLabel_580:
   \   0000D7   75..00       MOV       ?V6,#0x0
   \   0000DA   78..         MOV       R0,#?V4
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DF   AA..         MOV       R2,?V2
   \   0000E1   AB..         MOV       R3,?V3
   \   0000E3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E6   7403         MOV       A,#0x3
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EB   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4639          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000EE   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740C         MOV       A,#0xc
   \   000002                REQUIRE ??Subroutine245_0
   \   000002                ; // Fall through to label ??Subroutine245_0
   4640          
   4641          /*********************************************************************
   4642           * @fn      zclProcessInWriteUndividedCmd
   4643           *
   4644           * @brief   Process the "Profile" Write Undivided Command
   4645           *
   4646           * @param   pInMsg - incoming message to process
   4647           *
   4648           * @return  TRUE if command processed. FALSE, otherwise.
   4649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F583         MOV       DPH,A
   \   000002   8882         MOV       DPL,R0
   \   000004                REQUIRE ??Subroutine235_0
   \   000004                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4650          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   4652            zclWriteCmd_t *writeCmd;
   4653            zclWriteRspCmd_t *writeRspCmd;
   4654            zclAttrRec_t attrRec;
   4655            uint16 dataLen;
   4656            uint16 curLen = 0;
   \                     ??CrossCallReturnLabel_466:
   \   00000D   7406         MOV       A,#0x6
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
   4657            uint8 j = 0;
   \   000016   12....       LCALL     ?Subroutine69 & 0xFFFF
   4658            uint8 i;
   4659          
   4660            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_120:
   \   000019   740A         MOV       A,#0xa
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   4661          
   4662            // Allocate space for Write Response Command
   4663            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4664                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_482:
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   740A         MOV       A,#0xa
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000029   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E   8B..         MOV       ?V1,R3
   4665            if ( writeRspCmd == NULL )
   \   000030   EA           MOV       A,R2
   \   000031   45..         ORL       A,?V1
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4666            {
   4667              return FALSE; // EMBEDDED RETURN
   4668            }
   4669          
   4670            // If any attribute cannot be written, no attribute values are changed. Hence,
   4671            // make sure all the attributes are supported and writable
   4672            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   7F00         MOV       R7,#0x0
   \   00003A   8041         SJMP      ??zclProcessInWriteUndividedCmd_1
   4673            {
   4674              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4675          
   4676              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4677                                    statusRec->attrID, &attrRec ) )
   4678              {
   4679                // Attribute is not supported - stop here
   4680                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4681                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4682                break;
   4683              }
   4684          
   4685              if ( statusRec->dataType != attrRec.attr.dataType )
   4686              {
   4687                // Attribute data type is incorrect - stope here
   4688                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4689                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4690                break;
   4691              }
   4692          
   4693              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4694              {
   4695                // Attribute is not writable - stop here
   4696                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4697                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4698                break;
   4699              }
   4700          
   4701              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4702              {
   4703                // Not authorized to write - stop here
   4704                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4705                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4706                break;
   4707              }
   4708          
   4709              // Attribute Data length
   4710              if ( attrRec.attr.dataPtr != NULL )
   4711              {
   4712                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4713              }
   4714              else // Use CB
   4715              {
   4716                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4717                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   00003C   12....       LCALL     ?Subroutine79 & 0xFFFF
   4718              }
   \                     ??CrossCallReturnLabel_140:
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000048   8882         MOV       DPL,R0
   \   00004A   8983         MOV       DPH,R1
   \   00004C   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   00004F   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000052   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine27 & 0xFFFF
   4719          
   4720              // add padding if needed
   4721              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_30:
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E0           MOVX      A,@DPTR
   \   000061   A2E0         MOV       C,0xE0 /* A   */.0
   \   000063   5003         JNC       ??CrossCallReturnLabel_256
   4722              {
   4723                dataLen++;
   \   000065   12....       LCALL     ?Subroutine144 & 0xFFFF
   4724              }
   4725          
   4726              curLen += dataLen;
   \                     ??CrossCallReturnLabel_256:
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000070   7406         MOV       A,#0x6
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   28           ADD       A,R0
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   39           ADDC      A,R1
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00007D   740A         MOV       A,#0xa
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000085   5066         JNC       ??zclProcessInWriteUndividedCmd_4
   \   000087   EF           MOV       A,R7
   \   000088   75F005       MOV       B,#0x5
   \   00008B   A4           MUL       AB
   \   00008C   F8           MOV       R0,A
   \   00008D   A9F0         MOV       R1,B
   \   00008F   740A         MOV       A,#0xa
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000097   8582..       MOV       ?V4,DPL
   \   00009A   8583..       MOV       ?V5,DPH
   \   00009D   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   0000A0   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000A3                ; Setup parameters for call to function zclFindAttrRec
   \   0000A3   740C         MOV       A,#0xc
   \   0000A5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A8   88..         MOV       ?V2,R0
   \   0000AA   89..         MOV       ?V3,R1
   \   0000AC   78..         MOV       R0,#?V2
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   85..82       MOV       DPL,?V4
   \   0000B4   85..83       MOV       DPH,?V5
   \   0000B7   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   0000BA   85..82       MOV       DPL,?V6
   \   0000BD   85..83       MOV       DPH,?V7
   \   0000C0   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   0000C3   E5..         MOV       A,?V6
   \   0000C5   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000C8   35..         ADDC      A,?V7
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D1   7402         MOV       A,#0x2
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D6   E9           MOV       A,R1
   \   0000D7   7054         JNZ       ??zclProcessInWriteUndividedCmd_5
   \   0000D9   85..82       MOV       DPL,?V0
   \   0000DC   85..83       MOV       DPH,?V1
   \   0000DF   A3           INC       DPTR
   \   0000E0   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000E2   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0000E5   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000E8   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   0000EB   7E01         MOV       R6,#0x1
   4727            } // for loop
   4728          
   4729            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000ED   EE           MOV       A,R6
   \   0000EE   85..82       MOV       DPL,?V0
   \   0000F1   85..83       MOV       DPH,?V1
   \   0000F4   F0           MOVX      @DPTR,A
   4730            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000F5   6003         JZ        $+5
   \   0000F7   02....       LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
   4731            {
   4732              uint8 *curDataPtr;
   4733              zclWriteRec_t *curWriteRec;
   4734          
   4735              // calculate the length of the current data header
   4736              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   0000FA   75F005       MOV       B,#0x5
   \   0000FD   A4           MUL       AB
   \   0000FE   FF           MOV       R7,A
   4737          
   4738              // Allocate space to keep a copy of the current data
   4739              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   0000FF                ; Setup parameters for call to function osal_mem_alloc
   \   0000FF   7406         MOV       A,#0x6
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   E0           MOVX      A,@DPTR
   \   000105   2F           ADD       A,R7
   \   000106   FA           MOV       R2,A
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   3400         ADDC      A,#0x0
   \   00010B   FB           MOV       R3,A
   \   00010C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010F   7408         MOV       A,#0x8
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   4740              if ( curWriteRec == NULL )
   \                     ??CrossCallReturnLabel_459:
   \   000117   7408         MOV       A,#0x8
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00011F   7062         JNZ       ??zclProcessInWriteUndividedCmd_8
   4741              {
   4742                zcl_mem_free(writeRspCmd );
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4743                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000128   7900         MOV       R1,#0x0
   \   00012A   02....       LJMP      ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
   4744              }
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   00012D   7410         MOV       A,#0x10
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F9           MOV       R1,A
   \   000134   85..82       MOV       DPL,?V4
   \   000137   85..83       MOV       DPH,?V5
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   69           XRL       A,R1
   \   00013E   600B         JZ        ??zclProcessInWriteUndividedCmd_10
   \   000140   85..82       MOV       DPL,?V0
   \   000143   85..83       MOV       DPH,?V1
   \   000146   A3           INC       DPTR
   \   000147   748D         MOV       A,#-0x73
   \   000149   8097         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   00014B   7411         MOV       A,#0x11
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   E0           MOVX      A,@DPTR
   \   000151   A2E1         MOV       C,0xE0 /* A   */.1
   \   000153   400B         JC        ??zclProcessInWriteUndividedCmd_11
   \   000155   85..82       MOV       DPL,?V0
   \   000158   85..83       MOV       DPH,?V1
   \   00015B   A3           INC       DPTR
   \   00015C   7488         MOV       A,#-0x78
   \   00015E   8082         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000160   A2E5         MOV       C,0xE0 /* A   */.5
   \   000162   500C         JNC       ??zclProcessInWriteUndividedCmd_12
   \   000164   85..82       MOV       DPL,?V0
   \   000167   85..83       MOV       DPH,?V1
   \   00016A   A3           INC       DPTR
   \   00016B   747E         MOV       A,#0x7e
   \   00016D   02....       LJMP      ??zclProcessInWriteUndividedCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   000170   7412         MOV       A,#0x12
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000178   7003         JNZ       $+5
   \   00017A   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   00017D                ; Setup parameters for call to function zclGetAttrDataLength
   \   00017D   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000180   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4745          
   4746              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000183   7408         MOV       A,#0x8
   \   000185   12....       LCALL     ?XSTACK_DISP0_8
   \   000188   E0           MOVX      A,@DPTR
   \   000189   2F           ADD       A,R7
   \   00018A   F5..         MOV       ?V6,A
   \   00018C   A3           INC       DPTR
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   3400         ADDC      A,#0x0
   \   000190   F5..         MOV       ?V7,A
   4747          
   4748              // Write the new data over
   4749              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000192   7F00         MOV       R7,#0x0
   \   000194   8020         SJMP      ??zclProcessInWriteUndividedCmd_13
   4750              {
   4751                uint8 status;
   4752                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4753                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4754          
   4755                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4756                                      statusRec->attrID, &attrRec ) )
   4757                {
   4758                  break; // should never happen
   4759                }
   4760          
   4761                // Keep a copy of the current data before before writing the new data over
   4762                curStatusRec->attrID = statusRec->attrID;
   4763                curStatusRec->attrData = curDataPtr;
   4764          
   4765                if ( attrRec.attr.dataPtr != NULL )
   4766                {
   4767                  // Read the current value
   4768                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4769          
   4770                  // Write the new attribute value
   4771                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4772                                             &attrRec, statusRec );
   4773                }
   4774                else // Use CBs
   4775                {
   4776                  // Read the current value
   4777                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4778                                          statusRec->attrID, curDataPtr, &dataLen );
   4779                  // Write the new attribute value
   4780                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4781                                                    &attrRec, statusRec->attrData );
   4782                }
   4783          
   4784                // If successful, a write attribute status record shall NOT be generated
   4785                if ( status != ZCL_STATUS_SUCCESS )
   4786                {
   4787                  writeRspCmd->attrList[j].status = status;
   4788                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4789          
   4790                  // Since this write failed, we need to revert all the pervious writes
   4791                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4792                  break;
   4793                }
   4794          
   4795                // add padding if needed
   4796                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000196   7402         MOV       A,#0x2
   \   000198   12....       LCALL     ?XSTACK_DISP0_8
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00019E   5003         JNC       ??CrossCallReturnLabel_257
   4797                {
   4798                  dataLen++;
   \   0001A0   12....       LCALL     ?Subroutine144 & 0xFFFF
   4799                }
   4800          
   4801                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_257:
   \   0001A3   7402         MOV       A,#0x2
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   0001AB   E5..         MOV       A,?V6
   \   0001AD   28           ADD       A,R0
   \   0001AE   F5..         MOV       ?V6,A
   \   0001B0   E5..         MOV       A,?V7
   \   0001B2   39           ADDC      A,R1
   \   0001B3   F5..         MOV       ?V7,A
   \   0001B5   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0001B6   740A         MOV       A,#0xa
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0001BE   4003         JC        $+5
   \   0001C0   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0001C3   EF           MOV       A,R7
   \   0001C4   75F005       MOV       B,#0x5
   \   0001C7   A4           MUL       AB
   \   0001C8   F8           MOV       R0,A
   \   0001C9   A9F0         MOV       R1,B
   \   0001CB   740A         MOV       A,#0xa
   \   0001CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0001D3   AA82         MOV       R2,DPL
   \   0001D5   AB83         MOV       R3,DPH
   \   0001D7   7404         MOV       A,#0x4
   \   0001D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   0001DF   7408         MOV       A,#0x8
   \   0001E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E4   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0001E7   7406         MOV       A,#0x6
   \   0001E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EC   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   0001EF   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   0001F2                ; Setup parameters for call to function zclFindAttrRec
   \   0001F2   740C         MOV       A,#0xc
   \   0001F4   12....       LCALL     ?XSTACK_DISP100_8
   \   0001F7   88..         MOV       ?V2,R0
   \   0001F9   89..         MOV       ?V3,R1
   \   0001FB   78..         MOV       R0,#?V2
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000200   7406         MOV       A,#0x6
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000208   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   00020B   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00020E   7402         MOV       A,#0x2
   \   000210   12....       LCALL     ?DEALLOC_XSTACK8
   \   000213   E9           MOV       A,R1
   \   000214   7003         JNZ       $+5
   \   000216   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   000219   7404         MOV       A,#0x4
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000221   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000224   7406         MOV       A,#0x6
   \   000226   12....       LCALL     ?XSTACK_DISP0_8
   \   000229   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   00022C   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   00022F   7406         MOV       A,#0x6
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000237   E5..         MOV       A,?V6
   \   000239   F0           MOVX      @DPTR,A
   \   00023A   A3           INC       DPTR
   \   00023B   E5..         MOV       A,?V7
   \   00023D   F0           MOVX      @DPTR,A
   \   00023E   7412         MOV       A,#0x12
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000246   6035         JZ        ??zclProcessInWriteUndividedCmd_16
   \   000248                ; Setup parameters for call to function zclReadAttrData
   \   000248   7402         MOV       A,#0x2
   \   00024A   12....       LCALL     ?XSTACK_DISP100_8
   \   00024D   88..         MOV       ?V2,R0
   \   00024F   89..         MOV       ?V3,R1
   \   000251   78..         MOV       R0,#?V2
   \   000253   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000256   740E         MOV       A,#0xe
   \   000258   12....       LCALL     ?XSTACK_DISP102_8
   \   00025B   AA..         MOV       R2,?V6
   \   00025D   AB..         MOV       R3,?V7
   \   00025F   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000262   7402         MOV       A,#0x2
   \   000264   12....       LCALL     ?DEALLOC_XSTACK8
   \   000267   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00026A   12....       LCALL     ?XSTACK_DISP0_8
   \   00026D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000270   740E         MOV       A,#0xe
   \   000272   12....       LCALL     ?XSTACK_DISP102_8
   \   000275   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000278   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   00027B   804A         SJMP      ??zclProcessInWriteUndividedCmd_17
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   00027D   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000280   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000283                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000283   7402         MOV       A,#0x2
   \   000285   12....       LCALL     ?XSTACK_DISP100_8
   \   000288   88..         MOV       ?V2,R0
   \   00028A   89..         MOV       ?V3,R1
   \   00028C   78..         MOV       R0,#?V2
   \   00028E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000291   85....       MOV       ?V2,?V6
   \   000294   85....       MOV       ?V3,?V7
   \   000297   78..         MOV       R0,#?V2
   \   000299   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00029C   7408         MOV       A,#0x8
   \   00029E   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A1   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0002A4   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   0002A7   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0002AA   7404         MOV       A,#0x4
   \   0002AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002AF   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0002B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B5   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0002B8   A3           INC       DPTR
   \   0002B9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002BC   740E         MOV       A,#0xe
   \   0002BE   12....       LCALL     ?XSTACK_DISP102_8
   \   0002C1   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   0002C4   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   0002C7   7402         MOV       A,#0x2
   \   0002C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002CC   E9           MOV       A,R1
   \   0002CD   FA           MOV       R2,A
   \   0002CE   EA           MOV       A,R2
   \   0002CF   7003         JNZ       $+5
   \   0002D1   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   0002D4   EE           MOV       A,R6
   \   0002D5   75F003       MOV       B,#0x3
   \   0002D8   A4           MUL       AB
   \   0002D9   F8           MOV       R0,A
   \   0002DA   A9F0         MOV       R1,B
   \   0002DC   E5..         MOV       A,?V0
   \   0002DE   28           ADD       A,R0
   \   0002DF   F8           MOV       R0,A
   \   0002E0   E5..         MOV       A,?V1
   \   0002E2   39           ADDC      A,R1
   \   0002E3   F9           MOV       R1,A
   \   0002E4   EA           MOV       A,R2
   \   0002E5   8882         MOV       DPL,R0
   \   0002E7   8983         MOV       DPH,R1
   \   0002E9   A3           INC       DPTR
   \   0002EA   F0           MOVX      @DPTR,A
   \   0002EB   7404         MOV       A,#0x4
   \   0002ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F0   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   0002F3   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0002F6   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   0002F9   0E           INC       R6
   \   0002FA                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   0002FA   EF           MOV       A,R7
   \   0002FB   F5..         MOV       ?V2,A
   \   0002FD   75..00       MOV       ?V3,#0x0
   \   000300   78..         MOV       R0,#?V2
   \   000302   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000305   740A         MOV       A,#0xa
   \   000307   12....       LCALL     ?XSTACK_DISP0_8
   \   00030A   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   00030D   7402         MOV       A,#0x2
   \   00030F   12....       LCALL     ?XSTACK_DISP0_8
   \   000312   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000315   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   000318   7402         MOV       A,#0x2
   \   00031A   12....       LCALL     ?DEALLOC_XSTACK8
   4802              } // for loop
   4803          
   4804              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   00031D   EE           MOV       A,R6
   \   00031E   85..82       MOV       DPL,?V0
   \   000321   85..83       MOV       DPH,?V1
   \   000324   F0           MOVX      @DPTR,A
   4805              if ( writeRspCmd->numAttr  == 0 )
   \   000325   700B         JNZ       ??zclProcessInWriteUndividedCmd_18
   4806              {
   4807                // Since all records were written successful, include a single status record
   4808                // in the resonse command with the status field set to SUCCESS and the
   4809                // attribute ID field omitted.
   4810                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000327   A3           INC       DPTR
   \   000328   E4           CLR       A
   \   000329   F0           MOVX      @DPTR,A
   4811                writeRspCmd->numAttr = 1;
   \   00032A   85..82       MOV       DPL,?V0
   \   00032D   85..83       MOV       DPH,?V1
   \   000330   04           INC       A
   \   000331   F0           MOVX      @DPTR,A
   4812              }
   4813          
   4814              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   000332                ; Setup parameters for call to function osal_mem_free
   \   000332   7408         MOV       A,#0x8
   \   000334   12....       LCALL     ?XSTACK_DISP0_8
   \   000337   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   4815            }
   \                     ??CrossCallReturnLabel_407:
   \   00033A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4816          
   4817            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4818                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4819                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   00033D   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000340   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000343   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000346   75..01       MOV       ?V2,#0x1
   \   000349   78..         MOV       R0,#?V2
   \   00034B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00034E   7402         MOV       A,#0x2
   \   000350   12....       LCALL     ?XSTACK_DISP0_8
   \   000353   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000356   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000359   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00035C   78..         MOV       R0,#?V0
   \   00035E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000361   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000364   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000367   7405         MOV       A,#0x5
   \   000369   12....       LCALL     ?DEALLOC_XSTACK8
   4820            zcl_mem_free( writeRspCmd );
   \   00036C                ; Setup parameters for call to function osal_mem_free
   \   00036C   AA..         MOV       R2,?V0
   \   00036E   AB..         MOV       R3,?V1
   \   000370   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4821          
   4822            return TRUE;
   \   000373   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   000375   7414         MOV       A,#0x14
   \   000377   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   4823          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   2401         ADD       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E8           MOV       A,R0
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   FB           MOV       R3,A
   \   000007                REQUIRE ??Subroutine236_0
   \   000007                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   000003                ; Setup parameters for call to function zclWriteAttrData
   \   000003                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   000009   E5..         MOV       A,?V4
   \   00000B   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   00000E   35..         ADDC      A,?V5
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET
   4824          #endif // ZCL_WRITE
   4825          
   4826          #ifdef ZCL_DISCOVER
   4827          /*********************************************************************
   4828           * @fn      zclProcessInDiscAttrs
   4829           *
   4830           * @brief   Process the "Profile" Discover Attributes Commands
   4831           *
   4832           * @param   pInMsg - incoming message to process
   4833           *
   4834           * @return  TRUE if command processed. FALSE, otherwise.
   4835           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4836          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscAttrs:
   4837          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine182 & 0xFFFF
   4838            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4839            zclAttrRec_t attrRec;
   4840            uint16 attrID;
   4841            uint8 numAttrs;
   4842            uint8 i;
   4843          
   4844            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_302:
   \   00000D   12....       LCALL     ?Subroutine85 & 0xFFFF
   4845          
   4846            // Find out the number of attributes supported within the specified range
   4847            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   \                     ??CrossCallReturnLabel_154:
   \   000010   75..00       MOV       ?V0,#0x0
   \   000013   85..82       MOV       DPL,?V6
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00001B   E8           MOV       A,R0
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   E9           MOV       A,R1
   \   00001F   8010         SJMP      ??zclProcessInDiscAttrs_0
   \                     ??zclProcessInDiscAttrs_1:
   \   000021   05..         INC       ?V0
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2401         ADD       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrs_0:
   \   000031   F0           MOVX      @DPTR,A
   \   000032   85..82       MOV       DPL,?V6
   \   000035   85..83       MOV       DPH,?V7
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   00003D   5036         JNC       ??zclProcessInDiscAttrs_2
   4848            {
   4849              // finds the next attribute on this endpoint/cluster after the range.
   4850              // attributes must be in numerical order in the list.
   4851              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \   00003F   12....       LCALL     ?Subroutine123 & 0xFFFF
   4852              {
   4853                break;
   4854              }
   4855            }
   \                     ??CrossCallReturnLabel_556:
   \   000042                ; Setup parameters for call to function zclFindNextAttrRec
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP100_8
   \   000047   88..         MOV       ?V4,R0
   \   000049   89..         MOV       ?V5,R1
   \   00004B   78..         MOV       R0,#?V4
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP100_8
   \   000055   88..         MOV       ?V4,R0
   \   000057   89..         MOV       ?V5,R1
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000067   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00006A   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   70AC         JNZ       ??zclProcessInDiscAttrs_1
   4856          
   4857            numAttrs = i;  // store range of attributes in buffer
   4858          
   4859              // Process message for either attributes or extended attributes
   4860            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   \                     ??zclProcessInDiscAttrs_2:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F8           MOV       R0,A
   \   000082   740C         MOV       A,#0xc
   \   000084   68           XRL       A,R0
   \   000085   700F         JNZ       ??zclProcessInDiscAttrs_3
   4861            {
   4862              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   000087                ; Setup parameters for call to function zclProcessInDiscAttrsCmd
   \   000087   A9..         MOV       R1,?V0
   \   000089   AC..         MOV       R4,?V6
   \   00008B   AD..         MOV       R5,?V7
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??zclProcessInDiscAttrsCmd::?relay`; Banked call to: zclProcessInDiscAttrsCmd
   \   000094   8012         SJMP      ??zclProcessInDiscAttrs_4
   4863            }
   4864            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   \                     ??zclProcessInDiscAttrs_3:
   \   000096   7415         MOV       A,#0x15
   \   000098   68           XRL       A,R0
   \   000099   700D         JNZ       ??zclProcessInDiscAttrs_4
   4865            {
   4866              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   00009B                ; Setup parameters for call to function zclProcessInDiscAttrsExtCmd
   \   00009B   A9..         MOV       R1,?V0
   \   00009D   AC..         MOV       R4,?V6
   \   00009F   AD..         MOV       R5,?V7
   \   0000A1   EE           MOV       A,R6
   \   0000A2   FA           MOV       R2,A
   \   0000A3   EF           MOV       A,R7
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??zclProcessInDiscAttrsExtCmd::?relay`; Banked call to: zclProcessInDiscAttrsExtCmd
   4867            }
   4868          
   4869            return TRUE;
   \                     ??zclProcessInDiscAttrs_4:
   \   0000A8   7901         MOV       R1,#0x1
   \   0000AA   740A         MOV       A,#0xa
   \   0000AC   02....       LJMP      ??Subroutine196_0 & 0xFFFF
   4870          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000003   5401         ANL       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   FC           MOV       R4,A
   \   000001                REQUIRE ??Subroutine243_0
   \   000001                ; // Fall through to label ??Subroutine243_0
   4871          
   4872          /*********************************************************************
   4873           * @fn      zclProcessInDiscAttrsCmd
   4874           *
   4875           * @brief   Process the Discover Attributes Command
   4876           *
   4877           * @param   pInMsg - incoming message to process
   4878           *
   4879           * @param   pDiscoverCmd - structure from requesting command
   4880           *
   4881           * @param   attrLenBuf - describes the amount of attributes to be processed
   4882           *
   4883           * @return  none
   4884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4885          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsCmd:
   4886          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine23 & 0xFFFF
   4887            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4888            uint8 discComplete = TRUE;
   4889            zclAttrRec_t attrRec;
   4890            uint16 attrID;
   4891            uint8 i;
   4892          
   4893            // Allocate space for the response command
   4894            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4895                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   \                     ??CrossCallReturnLabel_22:
   \   00000D   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   000010   39           ADDC      A,R1
   \   000011   FB           MOV       R3,A
   \   000012   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000015   8A..         MOV       ?V0,R2
   \   000017   8B..         MOV       ?V1,R3
   4896            if ( pDiscoverRsp == NULL )
   \   000019   EA           MOV       A,R2
   \   00001A   45..         ORL       A,?V1
   \   00001C   7003         JNZ       $+5
   \   00001E   02....       LJMP      ??zclProcessInDiscAttrsCmd_0 & 0xFFFF
   4897            {
   4898              return; // EMBEDDED RETURN
   4899            }
   4900          
   4901            if ( numAttrs != 0 )
   \   000021   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00002A   E5..         MOV       A,?V6
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zclProcessInDiscAttrsCmd_1 & 0xFFFF
   4902            {
   4903              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000031   7F00         MOV       R7,#0x0
   \   000033   85..82       MOV       DPL,?V4
   \   000036   85..83       MOV       DPH,?V5
   \   000039   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   4904              {
   4905                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_484:
   \   000044   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000047   12....       LCALL     ?XSTACK_DISP100_8
   \   00004A   88..         MOV       ?V2,R0
   \   00004C   89..         MOV       ?V3,R1
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP100_8
   \   000058   88..         MOV       ?V2,R0
   \   00005A   89..         MOV       ?V3,R1
   \   00005C   78..         MOV       R0,#?V2
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   7408         MOV       A,#0x8
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000069   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   6029         JZ        ??zclProcessInDiscAttrsCmd_2
   4906                {
   4907                  break; // should not happen, as numAttrs already calculated
   4908                }
   4909          
   4910                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   \   000074   EF           MOV       A,R7
   \   000075   75F003       MOV       B,#0x3
   \   000078   A4           MUL       AB
   \   000079   F8           MOV       R0,A
   \   00007A   A9F0         MOV       R1,B
   \   00007C   E5..         MOV       A,?V0
   \   00007E   28           ADD       A,R0
   \   00007F   F8           MOV       R0,A
   \   000080   E5..         MOV       A,?V1
   \   000082   39           ADDC      A,R1
   \   000083   F9           MOV       R1,A
   \   000084   7408         MOV       A,#0x8
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?Subroutine34 & 0xFFFF
   4911                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   4912              }
   \                     ??CrossCallReturnLabel_656:
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000092   0F           INC       R7
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00009B   40A7         JC        ??CrossCallReturnLabel_484
   4913          
   4914              // Are there more attributes to be discovered?
   4915              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsCmd_2:
   \   00009D   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000A0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A3   88..         MOV       ?V4,R0
   \   0000A5   89..         MOV       ?V5,R1
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B1   88..         MOV       ?V4,R0
   \   0000B3   89..         MOV       ?V5,R1
   \   0000B5   78..         MOV       R0,#?V4
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   7408         MOV       A,#0x8
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   0000C2   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   0000C5   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV       A,R1
   \   0000CE   6002         JZ        ??zclProcessInDiscAttrsCmd_1
   4916              {
   4917                discComplete = FALSE;
   \   0000D0   7E00         MOV       R6,#0x0
   4918              }
   4919            }
   4920          
   4921            pDiscoverRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsCmd_1:
   \   0000D2   12....       LCALL     ?Subroutine10 & 0xFFFF
   4922            pDiscoverRsp->numAttr = numAttrs;
   4923          
   4924            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4925                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4926                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_0:
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D8   75..01       MOV       ?V2,#0x1
   \   0000DB   78..         MOV       R0,#?V2
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E0   7406         MOV       A,#0x6
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000F3   12....       LCALL     `??zcl_SendDiscoverAttrsRspCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsRspCmd
   \   0000F6   7405         MOV       A,#0x5
   \   0000F8   12....       LCALL     ?DEALLOC_XSTACK8
   4927            zcl_mem_free( pDiscoverRsp );
   \   0000FB                ; Setup parameters for call to function osal_mem_free
   \   0000FB   AA..         MOV       R2,?V0
   \   0000FD   AB..         MOV       R3,?V1
   \   0000FF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4928          
   4929            return;
   \                     ??zclProcessInDiscAttrsCmd_0:
   \   000102                REQUIRE ?Subroutine9
   \   000102                ; // Fall through to label ?Subroutine9
   4930          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   740E         MOV       A,#0xe
   \   000002   02....       LJMP      ??Subroutine245_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000003                REQUIRE ??Subroutine239_0
   \   000003                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000003                REQUIRE ??Subroutine240_0
   \   000003                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   5401         ANL       A,#0x1
   \   000005   FC           MOV       R4,A
   \   000006                REQUIRE ??Subroutine241_0
   \   000006                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003                REQUIRE ??Subroutine244_0
   \   000003                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V3,A
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009   7406         MOV       A,#0x6
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003   7406         MOV       A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EF           MOV       A,R7
   \   000009   C3           CLR       C
   \   00000A   95..         SUBB      A,?V6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
   \   00000F   7E01         MOV       R6,#0x1
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   E9           MOV       A,R1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV       A,R6
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E5..         MOV       A,?V6
   \   00000B   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00000E   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V2,A
   \   000014   78..         MOV       R0,#?V2
   \   000016   22           RET
   4931          
   4932          /*********************************************************************
   4933           * @fn      zclProcessInDiscAttrsExtCmd
   4934           *
   4935           * @brief   Process the Discover Attributes Extended Command
   4936           *
   4937           * @param   pInMsg - incoming message to process
   4938           *
   4939           * @param   pDiscoverCmd - structure from requesting command
   4940           *
   4941           * @param   attrLenBuf - describes the amount of attributes to be processed
   4942           *
   4943           * @return  none
   4944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4945          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsExtCmd:
   4946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine23 & 0xFFFF
   4947            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4948            uint8 discComplete = TRUE;
   4949            zclAttrRec_t attrRec;
   4950            uint16 attrID;
   4951            uint8 i;
   4952          
   4953              // Allocate space for the response command
   4954            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   4955                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   \                     ??CrossCallReturnLabel_23:
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   75..00       MOV       ?V1,#0x0
   \   000012   7402         MOV       A,#0x2
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?S_SHL
   \   000019   E5..         MOV       A,?V0
   \   00001B   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   00001E   35..         ADDC      A,?V1
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   4956            if ( pDiscoverExtRsp == NULL )
   \   000028   EA           MOV       A,R2
   \   000029   45..         ORL       A,?V1
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_0 & 0xFFFF
   4957            {
   4958              return; // EMBEDDED RETURN
   4959            }
   4960          
   4961          
   4962            if ( numAttrs != 0 )
   \   000030   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000039   E5..         MOV       A,?V6
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_1 & 0xFFFF
   4963            {
   4964              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000040   7F00         MOV       R7,#0x0
   \   000042   85..82       MOV       DPL,?V4
   \   000045   85..83       MOV       DPH,?V5
   \   000048   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   4965              {
   4966                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_486:
   \   000053   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000056   12....       LCALL     ?XSTACK_DISP100_8
   \   000059   88..         MOV       ?V2,R0
   \   00005B   89..         MOV       ?V3,R1
   \   00005D   78..         MOV       R0,#?V2
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP100_8
   \   000067   88..         MOV       ?V2,R0
   \   000069   89..         MOV       ?V3,R1
   \   00006B   78..         MOV       R0,#?V2
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7408         MOV       A,#0x8
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000078   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   E9           MOV       A,R1
   \   000081   6042         JZ        ??zclProcessInDiscAttrsExtCmd_2
   4967                {
   4968                  break; // Should not happen, as numAttrs already calculated
   4969                }
   4970          
   4971                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   \   000083   EF           MOV       A,R7
   \   000084   F5..         MOV       ?V2,A
   \   000086   75..00       MOV       ?V3,#0x0
   \   000089   7402         MOV       A,#0x2
   \   00008B   78..         MOV       R0,#?V2
   \   00008D   12....       LCALL     ?S_SHL
   \   000090   E5..         MOV       A,?V0
   \   000092   25..         ADD       A,?V2
   \   000094   F8           MOV       R0,A
   \   000095   E5..         MOV       A,?V1
   \   000097   35..         ADDC      A,?V3
   \   000099   F9           MOV       R1,A
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine34 & 0xFFFF
   4972                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_657:
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL     ?Subroutine110 & 0xFFFF
   4973                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   \                     ??CrossCallReturnLabel_204:
   \   0000A8   740B         MOV       A,#0xb
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   5407         ANL       A,#0x7
   \   0000B0   8882         MOV       DPL,R0
   \   0000B2   8983         MOV       DPH,R1
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   F0           MOVX      @DPTR,A
   4974              }
   \   0000BA   0F           INC       R7
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000C3   408E         JC        ??CrossCallReturnLabel_486
   4975          
   4976              // Are there more attributes to be discovered?
   4977              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsExtCmd_2:
   \   0000C5   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000C8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000CB   88..         MOV       ?V4,R0
   \   0000CD   89..         MOV       ?V5,R1
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7404         MOV       A,#0x4
   \   0000D6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D9   88..         MOV       ?V4,R0
   \   0000DB   89..         MOV       ?V5,R1
   \   0000DD   78..         MOV       R0,#?V4
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E2   7408         MOV       A,#0x8
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   0000EA   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   0000ED   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000F0   7404         MOV       A,#0x4
   \   0000F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV       A,R1
   \   0000F6   6002         JZ        ??zclProcessInDiscAttrsExtCmd_1
   4978              {
   4979                discComplete = FALSE;
   \   0000F8   7E00         MOV       R6,#0x0
   4980              }
   4981            }
   4982          
   4983            pDiscoverExtRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsExtCmd_1:
   \   0000FA   12....       LCALL     ?Subroutine10 & 0xFFFF
   4984            pDiscoverExtRsp->numAttr = numAttrs;
   4985          
   4986            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4987                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   4988                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_1:
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   75..01       MOV       ?V2,#0x1
   \   000103   78..         MOV       R0,#?V2
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   7406         MOV       A,#0x6
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000113   78..         MOV       R0,#?V0
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000118   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00011B   12....       LCALL     `??zcl_SendDiscoverAttrsExtRsp::?relay`; Banked call to: zcl_SendDiscoverAttrsExtRsp
   \   00011E   7405         MOV       A,#0x5
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   4989          
   4990            zcl_mem_free( pDiscoverExtRsp );
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   AA..         MOV       R2,?V0
   \   000125   AB..         MOV       R3,?V1
   \   000127   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4991          
   4992            return;
   \                     ??zclProcessInDiscAttrsExtCmd_0:
   \   00012A   02....       LJMP      ?Subroutine9 & 0xFFFF
   4993          }
   4994          
   4995          /*********************************************************************
   4996           * @fn      zclProcessInDiscCmd
   4997           *
   4998           * @brief   Process the "Profile" Discover Command
   4999           *
   5000           * @param   pInMsg - incoming message to process
   5001           *
   5002           * @return  TRUE if command processed. FALSE, otherwise.
   5003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000009   FD           MOV       R5,A
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016                REQUIRE ??Subroutine242_0
   \   000016                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5004          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscCmd:
   5005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine118 & 0xFFFF
   5006            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5007            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5008            ZStatus_t status;
   5009            zclCommandRec_t cmdRec;
   5010            uint8 cmdID;
   5011            uint8 i;
   5012            uint8 j;
   5013          
   5014            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_558:
   \   00000D   7401         MOV       A,#0x1
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   5015          
   5016            // Find out the number of commands supported within the specified range
   5017            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   \                     ??CrossCallReturnLabel_487:
   \   000015   75..00       MOV       ?V0,#0x0
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000020   800A         SJMP      ??zclProcessInDiscCmd_0
   \                     ??zclProcessInDiscCmd_1:
   \   000022   05..         INC       ?V0
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   04           INC       A
   \                     ??zclProcessInDiscCmd_0:
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   7401         MOV       A,#0x1
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_680:
   \   000039   502B         JNC       ??zclProcessInDiscCmd_2
   5018            {
   5019              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \   00003B   12....       LCALL     ?Subroutine122 & 0xFFFF
   5020              {
   5021                break;  // Command not supported
   5022              }
   5023            }
   \                     ??CrossCallReturnLabel_219:
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V4,R0
   \   000043   89..         MOV       ?V5,R1
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP100_8
   \   00004F   88..         MOV       ?V4,R0
   \   000051   89..         MOV       ?V5,R1
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   00005B   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   E9           MOV       A,R1
   \   000064   70BC         JNZ       ??zclProcessInDiscCmd_1
   5024          
   5025            // Allocate space for the response command
   5026            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   \                     ??zclProcessInDiscCmd_2:
   \   000066                ; Setup parameters for call to function osal_mem_alloc
   \   000066   AA..         MOV       R2,?V0
   \   000068   7B00         MOV       R3,#0x0
   \   00006A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006D   8A..         MOV       ?V2,R2
   \   00006F   8B..         MOV       ?V3,R3
   \   000071   A8..         MOV       R0,?V2
   \   000073   A9..         MOV       R1,?V3
   \   000075   7406         MOV       A,#0x6
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   5027          
   5028            if ( cmdRsp.pCmdID == NULL )
   \                     ??CrossCallReturnLabel_488:
   \   00007D   E8           MOV       A,R0
   \   00007E   49           ORL       A,R1
   \   00007F   7003         JNZ       $+5
   \   000081   02....       LJMP      ??zclProcessInDiscCmd_3 & 0xFFFF
   5029            {
   5030              return FALSE; // EMBEDDED RETURN
   5031            }
   5032          
   5033            if ( i != 0 )
   \   000084   E5..         MOV       A,?V0
   \   000086   6066         JZ        ??zclProcessInDiscCmd_4
   5034            {
   5035              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   \   000088   75..00       MOV       ?V6,#0x0
   \   00008B   7401         MOV       A,#0x1
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000093   F0           MOVX      @DPTR,A
   5036              {
   5037                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_5:
   \   000094   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000097   12....       LCALL     ?XSTACK_DISP100_8
   \   00009A   88..         MOV       ?V4,R0
   \   00009C   89..         MOV       ?V5,R1
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   7402         MOV       A,#0x2
   \   0000A5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A8   88..         MOV       ?V4,R0
   \   0000AA   89..         MOV       ?V5,R1
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   0000B4   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   0000B7   7404         MOV       A,#0x4
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   602F         JZ        ??zclProcessInDiscCmd_4
   5038                {
   5039                  break; // Attribute not supported
   5040                }
   5041          
   5042                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   \   0000BF   740A         MOV       A,#0xa
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   C0E0         PUSH      A
   \   0000C7   A8..         MOV       R0,?V6
   \   0000C9   7406         MOV       A,#0x6
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   28           ADD       A,R0
   \   0000D0   FA           MOV       R2,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   3400         ADDC      A,#0x0
   \   0000D5   8A82         MOV       DPL,R2
   \   0000D7   F583         MOV       DPH,A
   \   0000D9   D0E0         POP       A
   \   0000DB   F0           MOVX      @DPTR,A
   5043              }
   \   0000DC   05..         INC       ?V6
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   04           INC       A
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7   E5..         MOV       A,?V6
   \   0000E9   C3           CLR       C
   \   0000EA   95..         SUBB      A,?V0
   \   0000EC   40A6         JC        ??zclProcessInDiscCmd_5
   5044            }
   5045          
   5046            // Are there more commands to be discovered?
   5047            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_4:
   \   0000EE   8E82         MOV       DPL,R6
   \   0000F0   8F83         MOV       DPH,R7
   \   0000F2   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   0000F5                ; Setup parameters for call to function zclFindNextCmdRec
   \   0000F5   7408         MOV       A,#0x8
   \   0000F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FA   88..         MOV       ?V2,R0
   \   0000FC   89..         MOV       ?V3,R1
   \   0000FE   78..         MOV       R0,#?V2
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   7402         MOV       A,#0x2
   \   000105   12....       LCALL     ?XSTACK_DISP100_8
   \   000108   88..         MOV       ?V2,R0
   \   00010A   89..         MOV       ?V3,R1
   \   00010C   78..         MOV       R0,#?V2
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   00011A   FD           MOV       R5,A
   \   00011B   8E82         MOV       DPL,R6
   \   00011D   8F83         MOV       DPH,R7
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   FC           MOV       R4,A
   \   000128   85..82       MOV       DPL,?V0
   \   00012B   85..83       MOV       DPH,?V1
   \   00012E   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000131   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000134   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   000137   7404         MOV       A,#0x4
   \   000139   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013C   E9           MOV       A,R1
   \   00013D   6008         JZ        ??zclProcessInDiscCmd_6
   5048            {
   5049              cmdRsp.discComplete = FALSE;
   \   00013F   7403         MOV       A,#0x3
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   E4           CLR       A
   \   000145   8007         SJMP      ??zclProcessInDiscCmd_7
   5050            }
   5051            else
   5052            {
   5053              cmdRsp.discComplete = TRUE;
   \                     ??zclProcessInDiscCmd_6:
   \   000147   7403         MOV       A,#0x3
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   7401         MOV       A,#0x1
   5054            }
   \                     ??zclProcessInDiscCmd_7:
   \   00014E   12....       LCALL     ?Subroutine47 & 0xFFFF
   5055          
   5056            // pass the command requested
   5057            cmdRsp.cmdType = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_62:
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   C0E0         PUSH      A
   \   000158   7404         MOV       A,#0x4
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   D0E0         POP       A
   \   00015F   F0           MOVX      @DPTR,A
   5058          
   5059            // store number of commands returned
   5060            cmdRsp.numCmd = j;
   \   000160   7405         MOV       A,#0x5
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   E5..         MOV       A,?V6
   \   000167   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   5061          
   5062            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5063                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5064                                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_686:
   \   00016A   F5..         MOV       ?V0,A
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   F5..         MOV       ?V1,A
   \   000170                ; Setup parameters for call to function zcl_SendDiscoverCmdsRspCmd
   \   000170   8E82         MOV       DPL,R6
   \   000172   8F83         MOV       DPH,R7
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000180   75..01       MOV       ?V2,#0x1
   \   000183   78..         MOV       R0,#?V2
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000188   8E82         MOV       DPL,R6
   \   00018A   8F83         MOV       DPH,R7
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000194   7406         MOV       A,#0x6
   \   000196   12....       LCALL     ?XSTACK_DISP100_8
   \   000199   88..         MOV       ?V2,R0
   \   00019B   89..         MOV       ?V3,R1
   \   00019D   78..         MOV       R0,#?V2
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A2   85..82       MOV       DPL,?V0
   \   0001A5   85..83       MOV       DPH,?V1
   \   0001A8   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   0001AB   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   0001AE   12....       LCALL     `??zcl_SendDiscoverCmdsRspCmd::?relay`; Banked call to: zcl_SendDiscoverCmdsRspCmd
   \   0001B1   7405         MOV       A,#0x5
   \   0001B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B6   E9           MOV       A,R1
   \   0001B7   FE           MOV       R6,A
   5065          
   5066            zcl_mem_free( cmdRsp.pCmdID );
   \   0001B8                ; Setup parameters for call to function osal_mem_free
   \   0001B8   7406         MOV       A,#0x6
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   0001C0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5067          
   5068            if ( status == ZSuccess )
   \   0001C3   EE           MOV       A,R6
   \   0001C4   7004         JNZ       ??zclProcessInDiscCmd_3
   5069            {
   5070              return TRUE;
   \   0001C6   7901         MOV       R1,#0x1
   \   0001C8   8002         SJMP      ??zclProcessInDiscCmd_8
   5071            }
   5072            else
   5073            {
   5074              return FALSE;
   \                     ??zclProcessInDiscCmd_3:
   \   0001CA   7900         MOV       R1,#0x0
   5075            }
   \                     ??zclProcessInDiscCmd_8:
   \   0001CC   02....       LJMP      ?Subroutine6 & 0xFFFF
   5076          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B                ; Setup parameters for call to function zclFindNextCmdRec
   \   00000B                ; Setup parameters for call to function zclFindNextCmdRec
   \   00000B   7408         MOV       A,#0x8
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsgExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsgExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_addExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_addExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_HandleExternal::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_HandleExternal

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getRawAFMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getParsedTransSeqNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getParsedTransSeqNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerPlugin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerCmdList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerCmdList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerAttrList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerClusterOptionList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerValidateAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_DeviceOperational::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReadRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExtRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExtRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ProcessMessageMSG::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclBuildHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAuthorizeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAuthorizeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSetSecurityOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSerializeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetDataTypeLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLengthUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLengthUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclAuthorizeWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAuthorizeWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInConfigReportRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInConfigReportRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsExtRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsExtRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclRevertWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRevertWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsExtCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsExtCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscCmd
   5077          
   5078          #endif // ZCL_DISCOVER
   5079          
   5080          
   5081          /*********************************************************************
   5082          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     36   zclBuildHdr
      2     52   zclFindAttrRec
        0     14   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      2     14   zclFindCmdRec
        0     12   -> zclFindCmdRecsList
      2     14   zclFindCmdRecsList
      0     49   zclFindNextAttrRec
        0     16   -> zclFindAttrRecsList
      1     45   zclFindNextCmdRec
        0     14   -> zclFindCmdRecsList
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     40   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     47   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0      9   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      1     49   zclParseHdr
        0     12   -> osal_memset
      1     12   zclParseInConfigReportRspCmd
        0     12   -> osal_mem_alloc
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     10   zclParseInDiscAttrsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsExtRspCmd
        0     14   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsRspCmd
        0     14   -> osal_mem_alloc
      1     10   zclParseInDiscCmdsCmd
        0     10   -> osal_mem_alloc
      1     12   zclParseInDiscCmdsRspCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      0     30   zclProcessInDiscAttrs
        0     30   -> zclFindNextAttrRec
        0     26   -> zclProcessInDiscAttrsCmd
        0     26   -> zclProcessInDiscAttrsExtCmd
      1     60   zclProcessInDiscAttrsCmd
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     33   -> zclFindNextAttrRec
        0     34   -> zcl_SendDiscoverAttrsRspCmd
      1     60   zclProcessInDiscAttrsExtCmd
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     33   -> zclFindNextAttrRec
        0     34   -> zcl_SendDiscoverAttrsExtRsp
      1     32   zclProcessInDiscCmd
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     31   -> zclFindNextCmdRec
        0     32   -> zcl_SendDiscoverCmdsRspCmd
      1     35   zclProcessInReadCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     32   -> zclFindAttrRec
        0     30   -> zclGetAuthorizeCB
        0     35   -> zcl_SendReadRsp
      1     37   zclProcessInWriteCmd
        0     32   -> bdb_ZclIdentifyCmdInd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     34   -> zclFindAttrRec
        0     34   -> zclWriteAttrData
        0     34   -> zclWriteAttrDataUsingCB
        0     37   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     55   zclReadAttrData
        0     17   -> osal_memcpy
        0     14   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     68   zclRevertWriteUndividedCmd
        0     30   -> osal_memcpy
        0     29   -> zclFindAttrRec
        0     27   -> zclGetAttrDataLength
        0     29   -> zclWriteAttrDataUsingCB
      1     41   zclSerializeData
        0     19   -> osal_buffer_uint32
        0     18   -> osal_memcpy
      0     47   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      0     62   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     62   zcl_ProcessMessageMSG
        0     37   -> afFindEndPointDesc
        0     37   -> osal_mem_free
        0     37   -> zclGetClusterOption
        0     37   -> zclParseHdr
        0     37   -> zclSetSecurityOption
        0     39   -> zcl_DeviceOperational
        0     44   -> zcl_SendDefaultRspCmd
      0     30   zcl_ReadAttrData
        0     24   -> zclFindAttrRec
        0     24   -> zclReadAttrData
        0     26   -> zclReadAttrDataUsingCB
      1     69   zcl_SendCommand
        0     36   -> AF_DataRequest
        0     27   -> afFindEndPointDesc
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> osal_memset
        0     27   -> zclBuildHdr
        0     27   -> zclGetClusterOption
        0     29   -> zcl_DeviceOperational
      1     67   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     32   zcl_SendDiscoverAttrsCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     27   -> zcl_SendCommand
      1     29   zcl_SendDiscoverAttrsExt
        0     24   -> zcl_SendCommand
      1     66   zcl_SendDiscoverAttrsExtRsp
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     66   zcl_SendDiscoverAttrsRspCmd
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     33   zcl_SendDiscoverCmdsCmd
        0     27   -> zcl_SendCommand
      1     63   zcl_SendDiscoverCmdsRspCmd
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     35   zcl_SendRead
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     30   -> zcl_SendCommand
      1     68   zcl_SendReadRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclGetAttrDataLengthUsingCB
        0     26   -> zclReadAttrDataUsingCB
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     38   zcl_SendWriteRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> zclGetAttrDataLength
        0     21   -> zclSerializeData
        0     32   -> zcl_SendCommand
      1     71   zcl_SendWriteRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     30   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0     29   zcl_event_loop
        0     18   -> bdb_getZCLFrameCounter
        0     18   -> gp_GetHeadNotificationMsg
        0     18   -> gp_GetPHeadNotification
        0     18   -> gp_NotificationMsgClean
        0     21   -> osal_memcpy
        0     18   -> osal_msg_deallocate
        0     18   -> osal_msg_receive
        0     18   -> osal_msg_send
        0     21   -> osal_revmemcpy
        0     22   -> osal_start_timerEx
        0     18   -> zcl_ProcessMessageMSG
        0     29   -> zcl_SendCommand
        0     18   -> zcl_getExternalFoundationHandler
      2     18   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerCmdList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine190_0
       6  ??Subroutine191_0
       6  ??Subroutine192_0
       6  ??Subroutine193_0
       5  ??Subroutine194_0
       2  ??Subroutine195_0
       3  ??Subroutine196_0
       5  ??Subroutine197_0
       8  ??Subroutine198_0
       6  ??Subroutine199_0
       7  ??Subroutine200_0
       5  ??Subroutine201_0
       5  ??Subroutine202_0
      10  ??Subroutine203_0
       6  ??Subroutine204_0
       9  ??Subroutine205_0
       6  ??Subroutine206_0
       5  ??Subroutine207_0
       1  ??Subroutine208_0
       2  ??Subroutine209_0
       1  ??Subroutine210_0
       4  ??Subroutine211_0
       6  ??Subroutine212_0
       2  ??Subroutine213_0
       6  ??Subroutine214_0
       6  ??Subroutine215_0
       6  ??Subroutine216_0
       5  ??Subroutine217_0
       4  ??Subroutine218_0
       9  ??Subroutine219_0
       1  ??Subroutine220_0
       5  ??Subroutine221_0
       4  ??Subroutine222_0
       5  ??Subroutine223_0
       6  ??Subroutine224_0
       2  ??Subroutine225_0
       4  ??Subroutine226_0
       6  ??Subroutine227_0
      12  ??Subroutine228_0
       4  ??Subroutine229_0
       5  ??Subroutine230_0
       5  ??Subroutine231_0
       8  ??Subroutine232_0
       4  ??Subroutine233_0
       6  ??Subroutine234_0
       8  ??Subroutine235_0
      10  ??Subroutine236_0
       4  ??Subroutine237_0
       4  ??Subroutine238_0
       4  ??Subroutine239_0
       8  ??Subroutine240_0
      21  ??Subroutine241_0
       1  ??Subroutine242_0
      21  ??Subroutine243_0
       6  ??Subroutine244_0
       3  ??Subroutine245_0
       5  ??Subroutine246_0
       5  ??Subroutine247_0
       5  ??Subroutine248_0
       7  ??Subroutine249_0
       5  ??Subroutine250_0
       7  ?Subroutine0
       8  ?Subroutine1
      23  ?Subroutine10
      10  ?Subroutine100
      10  ?Subroutine101
      10  ?Subroutine102
       6  ?Subroutine103
       6  ?Subroutine104
       8  ?Subroutine105
       6  ?Subroutine106
      12  ?Subroutine107
      14  ?Subroutine108
       6  ?Subroutine109
      40  ?Subroutine11
       8  ?Subroutine110
      11  ?Subroutine111
       4  ?Subroutine112
      11  ?Subroutine113
      17  ?Subroutine114
       7  ?Subroutine115
       4  ?Subroutine116
       4  ?Subroutine117
       3  ?Subroutine118
       8  ?Subroutine119
      12  ?Subroutine12
       2  ?Subroutine120
       4  ?Subroutine121
      14  ?Subroutine122
       4  ?Subroutine123
       4  ?Subroutine124
       2  ?Subroutine125
       5  ?Subroutine126
       5  ?Subroutine127
      14  ?Subroutine128
       4  ?Subroutine129
      38  ?Subroutine13
      21  ?Subroutine130
      10  ?Subroutine131
       8  ?Subroutine132
      14  ?Subroutine133
      12  ?Subroutine134
       6  ?Subroutine135
      12  ?Subroutine136
       9  ?Subroutine137
       7  ?Subroutine138
       4  ?Subroutine139
      25  ?Subroutine14
       9  ?Subroutine140
       9  ?Subroutine141
      22  ?Subroutine142
      21  ?Subroutine143
       9  ?Subroutine144
       2  ?Subroutine145
      10  ?Subroutine146
      11  ?Subroutine147
      20  ?Subroutine148
       5  ?Subroutine149
       4  ?Subroutine15
       2  ?Subroutine150
       5  ?Subroutine151
       6  ?Subroutine152
       8  ?Subroutine153
      11  ?Subroutine154
       6  ?Subroutine155
       6  ?Subroutine156
      12  ?Subroutine157
      22  ?Subroutine158
       6  ?Subroutine159
      10  ?Subroutine16
      10  ?Subroutine160
      10  ?Subroutine161
       9  ?Subroutine162
       4  ?Subroutine163
       9  ?Subroutine164
       6  ?Subroutine165
      13  ?Subroutine166
       8  ?Subroutine167
      12  ?Subroutine168
       4  ?Subroutine169
      15  ?Subroutine17
      19  ?Subroutine170
       6  ?Subroutine171
       4  ?Subroutine172
       8  ?Subroutine173
      16  ?Subroutine174
       7  ?Subroutine175
       7  ?Subroutine176
       4  ?Subroutine177
       6  ?Subroutine178
       5  ?Subroutine179
       4  ?Subroutine18
       9  ?Subroutine180
       6  ?Subroutine181
      14  ?Subroutine182
       6  ?Subroutine183
       8  ?Subroutine184
       9  ?Subroutine185
       6  ?Subroutine186
       4  ?Subroutine187
       7  ?Subroutine188
       9  ?Subroutine189
      17  ?Subroutine19
       3  ?Subroutine2
      20  ?Subroutine20
       3  ?Subroutine21
      11  ?Subroutine22
      19  ?Subroutine23
      10  ?Subroutine24
       6  ?Subroutine25
      12  ?Subroutine26
       6  ?Subroutine27
       8  ?Subroutine28
       7  ?Subroutine29
       3  ?Subroutine3
       1  ?Subroutine30
      12  ?Subroutine31
      13  ?Subroutine32
       6  ?Subroutine33
       3  ?Subroutine34
       6  ?Subroutine35
       8  ?Subroutine36
      10  ?Subroutine37
       8  ?Subroutine38
       1  ?Subroutine39
       5  ?Subroutine4
       7  ?Subroutine40
      11  ?Subroutine41
       7  ?Subroutine42
       8  ?Subroutine43
       2  ?Subroutine44
       1  ?Subroutine45
      20  ?Subroutine46
       5  ?Subroutine47
       7  ?Subroutine48
       4  ?Subroutine49
       3  ?Subroutine5
      22  ?Subroutine50
       3  ?Subroutine51
      24  ?Subroutine52
       5  ?Subroutine53
       6  ?Subroutine54
       6  ?Subroutine55
      25  ?Subroutine56
       3  ?Subroutine57
       7  ?Subroutine58
       6  ?Subroutine59
       2  ?Subroutine6
      12  ?Subroutine60
       8  ?Subroutine61
       4  ?Subroutine62
      18  ?Subroutine63
      16  ?Subroutine64
       9  ?Subroutine65
       6  ?Subroutine66
       4  ?Subroutine67
      13  ?Subroutine68
      18  ?Subroutine69
       7  ?Subroutine7
       3  ?Subroutine70
       6  ?Subroutine71
       6  ?Subroutine72
       4  ?Subroutine73
      12  ?Subroutine74
       4  ?Subroutine75
       9  ?Subroutine76
       4  ?Subroutine77
       6  ?Subroutine78
       4  ?Subroutine79
       5  ?Subroutine8
      10  ?Subroutine80
       6  ?Subroutine81
       6  ?Subroutine82
       6  ?Subroutine83
       1  ?Subroutine84
       8  ?Subroutine85
       9  ?Subroutine86
       4  ?Subroutine87
      10  ?Subroutine88
      14  ?Subroutine89
       5  ?Subroutine9
       6  ?Subroutine90
       6  ?Subroutine91
       7  ?Subroutine92
       6  ?Subroutine93
       6  ?Subroutine94
       4  ?Subroutine95
      10  ?Subroutine96
       1  ?Subroutine97
       4  ?Subroutine98
       6  ?Subroutine99
       4  __Constant_32
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  gpCmdList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      60  zclAuthorizeWrite
       6  zclAuthorizeWrite::?relay
      98  zclBuildHdr
       6  zclBuildHdr::?relay
      92  zclCmdTable
     129  zclFindAttrRec
       6  zclFindAttrRec::?relay
      37  zclFindAttrRecsList
       6  zclFindAttrRecsList::?relay
     102  zclFindClusterOption
       6  zclFindClusterOption::?relay
     118  zclFindCmdRec
       6  zclFindCmdRec::?relay
      37  zclFindCmdRecsList
       6  zclFindCmdRecsList::?relay
     207  zclFindNextAttrRec
       6  zclFindNextAttrRec::?relay
     269  zclFindNextCmdRec
       6  zclFindNextCmdRec::?relay
      63  zclGetAttrDataLength
       6  zclGetAttrDataLength::?relay
      99  zclGetAttrDataLengthUsingCB
       6  zclGetAttrDataLengthUsingCB::?relay
      30  zclGetAuthorizeCB
       6  zclGetAuthorizeCB::?relay
      28  zclGetClusterOption
       6  zclGetClusterOption::?relay
     166  zclGetDataTypeLength
       6  zclGetDataTypeLength::?relay
      30  zclGetReadWriteCB
       6  zclGetReadWriteCB::?relay
     226  zclParseHdr
       6  zclParseHdr::?relay
     144  zclParseInConfigReportRspCmd
       6  zclParseInConfigReportRspCmd::?relay
      21  zclParseInDefaultRspCmd
       6  zclParseInDefaultRspCmd::?relay
      48  zclParseInDiscAttrsCmd
       6  zclParseInDiscAttrsCmd::?relay
     129  zclParseInDiscAttrsExtRspCmd
       6  zclParseInDiscAttrsExtRspCmd::?relay
      93  zclParseInDiscAttrsRspCmd
       6  zclParseInDiscAttrsRspCmd::?relay
      21  zclParseInDiscCmdsCmd
       6  zclParseInDiscCmdsCmd::?relay
      86  zclParseInDiscCmdsRspCmd
       6  zclParseInDiscCmdsRspCmd::?relay
      93  zclParseInReadCmd
       6  zclParseInReadCmd::?relay
     326  zclParseInReadRspCmd
       6  zclParseInReadRspCmd::?relay
     270  zclParseInWriteCmd
       6  zclParseInWriteCmd::?relay
     149  zclParseInWriteRspCmd
       6  zclParseInWriteRspCmd::?relay
     175  zclProcessInDiscAttrs
       6  zclProcessInDiscAttrs::?relay
     258  zclProcessInDiscAttrsCmd
       6  zclProcessInDiscAttrsCmd::?relay
     301  zclProcessInDiscAttrsExtCmd
       6  zclProcessInDiscAttrsExtCmd::?relay
     463  zclProcessInDiscCmd
       6  zclProcessInDiscCmd::?relay
     481  zclProcessInReadCmd
       6  zclProcessInReadCmd::?relay
     553  zclProcessInWriteCmd
       6  zclProcessInWriteCmd::?relay
     890  zclProcessInWriteUndividedCmd
       6  zclProcessInWriteUndividedCmd::?relay
      92  zclReadAttrData
       6  zclReadAttrData::?relay
      93  zclReadAttrDataUsingCB
       6  zclReadAttrDataUsingCB::?relay
     241  zclRevertWriteUndividedCmd
       6  zclRevertWriteUndividedCmd::?relay
     371  zclSerializeData
       6  zclSerializeData::?relay
      45  zclSetSecurityOption
       6  zclSetSecurityOption::?relay
     142  zclWriteAttrData
       6  zclWriteAttrData::?relay
     107  zclWriteAttrDataUsingCB
       6  zclWriteAttrDataUsingCB::?relay
     123  zcl_DeviceOperational
       6  zcl_DeviceOperational::?relay
     182  zcl_HandleExternal
       6  zcl_HandleExternal::?relay
       1  zcl_InSeqNum
      12  zcl_Init
       6  zcl_Init::?relay
    1047  zcl_ProcessMessageMSG
       6  zcl_ProcessMessageMSG::?relay
     131  zcl_ReadAttrData
       6  zcl_ReadAttrData::?relay
     494  zcl_SendCommand
       6  zcl_SendCommand::?relay
     118  zcl_SendDefaultRspCmd
       6  zcl_SendDefaultRspCmd::?relay
     178  zcl_SendDiscoverAttrsCmd
       6  zcl_SendDiscoverAttrsCmd::?relay
     130  zcl_SendDiscoverAttrsExt
       6  zcl_SendDiscoverAttrsExt::?relay
     285  zcl_SendDiscoverAttrsExtRsp
       6  zcl_SendDiscoverAttrsExtRsp::?relay
     247  zcl_SendDiscoverAttrsRspCmd
       6  zcl_SendDiscoverAttrsRspCmd::?relay
     225  zcl_SendDiscoverCmdsCmd
       6  zcl_SendDiscoverCmdsCmd::?relay
     325  zcl_SendDiscoverCmdsRspCmd
       6  zcl_SendDiscoverCmdsRspCmd::?relay
     240  zcl_SendRead
       6  zcl_SendRead::?relay
     465  zcl_SendReadRsp
       6  zcl_SendReadRsp::?relay
     292  zcl_SendWriteRequest
       6  zcl_SendWriteRequest::?relay
     268  zcl_SendWriteRsp
       6  zcl_SendWriteRsp::?relay
       1  zcl_TaskID
       1  zcl_TransID
       2  zcl_ValidateAttrDataCB
     140  zcl_addExternalFoundationHandler
       6  zcl_addExternalFoundationHandler::?relay
     392  zcl_event_loop
       6  zcl_event_loop::?relay
      60  zcl_getExternalFoundationHandler
       6  zcl_getExternalFoundationHandler::?relay
       9  zcl_getParsedTransSeqNum
       6  zcl_getParsedTransSeqNum::?relay
      12  zcl_getRawAFMsg
       6  zcl_getRawAFMsg::?relay
      87  zcl_registerAttrList
       6  zcl_registerAttrList::?relay
      73  zcl_registerClusterOptionList
       6  zcl_registerClusterOptionList::?relay
      73  zcl_registerCmdList
       6  zcl_registerCmdList::?relay
      10  zcl_registerForMsg
       6  zcl_registerForMsg::?relay
       8  zcl_registerForMsgExt
       6  zcl_registerForMsgExt::?relay
     101  zcl_registerPlugin
       6  zcl_registerPlugin::?relay
      48  zcl_registerReadWriteCB
       6  zcl_registerReadWriteCB::?relay
      15  zcl_registerValidateAttrData
       6  zcl_registerValidateAttrData::?relay

 
 15 086 bytes in segment BANKED_CODE
    426 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      4 bytes in segment XDATA_ROM_C
     18 bytes in segment XDATA_Z
 
    518 bytes of CODE     memory
      0 bytes of CONST    memory (+ 4 bytes shared)
 15 086 bytes of HUGECODE memory
     18 bytes of XDATA    memory

Errors: none
Warnings: none
