###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               26/Sep/2023  15:48:31
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\fuzzing-coordinator\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW160B.tmp
#        (D:\fuzzing-coordinator\Components\stack\af\AF.c -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_POLL_CONTROL -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D HAL_LCD=FALSE
#        -D ZCL_ON_OFF -D INT_HEAP_LEN=3000 -D HAL_UART_DMA_RX_MAX=128 -D
#        HAL_UART_DMA_TX_MAX=128 -lC
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

D:\fuzzing-coordinator\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #include <stdio.h>
     54          
     55          #if defined ( MT_AF_CB_FUNC )
     56            #include "MT_AF.h"
     57          #endif
     58          
     59          #if defined ( INTER_PAN )
     60            #include "stub_aps.h"
     61          #endif
     62          
     63          #include "bdb.h" 
     64          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
     65            #include "bdb_tlCommissioning.h"
     66          #endif
     67          
     68          /*********************************************************************
     69           * MACROS
     70           */
     71          
     72          /*********************************************************************
     73           * @fn      afSend
     74           *
     75           * @brief   Helper macro for V1 API to invoke V2 API.
     76           *
     77           * input parameters
     78           *
     79           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     80           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     81           * @param   cID - A valid cluster ID as specified by the Profile.
     82           * @param   len - Number of bytes of data pointed to by next param.
     83           * @param  *buf - A pointer to the data bytes to send.
     84           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     85           * @param  *transID - A pointer to a byte which can be modified and which will
     86           *                    be used as the transaction sequence number of the msg.
     87           *
     88           * output parameters
     89           *
     90           * @param  *transID - Incremented by one if the return value is success.
     91           *
     92           * @return  afStatus_t - See previous definition of afStatus_... types.
     93           */
     94          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     95                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     96                                    (cID), (len), (buf), (transID), (options), (radius) )
     97          
     98          /*********************************************************************
     99           * GLOBAL VARIABLES
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103          
    104          /*********************************************************************
    105           * LOCAL FUNCTIONS
    106           */
    107          
    108          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    109                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    110                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    111          
    112          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    113          
    114          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    115          
    116          /*********************************************************************
    117           * PUBLIC FUNCTIONS
    118           */
    119          
    120          /*********************************************************************
    121           * @fn      afInit
    122           *
    123           * @brief   Initialization function for the AF.
    124           *
    125           * @param   none
    126           *
    127           * @return  none
    128          void afInit( void )
    129          {
    130          }
    131           */
    132          
    133          /*********************************************************************
    134           * @fn      afRegisterExtended
    135           *
    136           * @brief   Register an Application's EndPoint description.
    137           *
    138           * @param   epDesc - pointer to the Application's endpoint descriptor.
    139           * @param   descFn - pointer to descriptor callback function
    140           * @param   applFn - pointer to the Application callback function
    141           *
    142           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    143           *
    144           * @return  Pointer to epList_t on success, NULL otherwise.
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    148            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV       R2,#0xb
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A   AF..         MOV       R7,?V1
    149          
    150            if (ep != NULL)
   \   00001C   EE           MOV       A,R6
   \   00001D   4F           ORL       A,R7
   \   00001E   6070         JZ        ??afRegisterExtended_0
    151            {
    152              ep->nextDesc = epList;
   \   000020   90....       MOV       DPTR,#epList
   \   000023   12....       LCALL     ?Subroutine14 & 0xFFFF
    153              epList = ep;
   \                     ??CrossCallReturnLabel_15:
   \   000026   90....       MOV       DPTR,#epList
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EF           MOV       A,R7
   \   00002D   F0           MOVX      @DPTR,A
    154              ep->epDesc = epDesc;
   \   00002E   EE           MOV       A,R6
   \   00002F   2402         ADD       A,#0x2
   \   000031   F5..         MOV       ?V0,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   F5..         MOV       ?V1,A
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   F583         MOV       DPH,A
   \   00003C   E5..         MOV       A,?V4
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V5
   \   000042   12....       LCALL     ?Subroutine27 & 0xFFFF
    155              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_43:
   \   000045   E5..         MOV       A,?V2
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E5..         MOV       A,?V3
   \   00004B   12....       LCALL     ?Subroutine27 & 0xFFFF
    156              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_44:
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   7432         MOV       A,#0x32
   \   000052   12....       LCALL     ?Subroutine26 & 0xFFFF
    157              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_41:
   \   000055   7401         MOV       A,#0x1
   \   000057   12....       LCALL     ?Subroutine26 & 0xFFFF
    158              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_42:
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
    159              ep->pfnApplCB = applFn;
   \   00005C   740E         MOV       A,#0xe
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    160              
    161            #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    162              //Make sure we add at least one application endpoint
    163              if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
    164              {
    165                bdb_HeadEpDescriptorList = epList;
   \                     ??CrossCallReturnLabel_73:
   \   00006C   90....       MOV       DPTR,#epList
   \   00006F   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000072   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000075   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    166                ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
   \                     ??CrossCallReturnLabel_74:
   \   000078                ; Setup parameters for call to function bdb_zclFindingBindingEpType
   \   000078   85..82       MOV       DPL,?V0
   \   00007B   85..83       MOV       DPH,?V1
   \   00007E   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    167              }
    168          
    169            #endif
    170          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    171              // find the first empty entry in the device info table
    172              for ( uint8 i = 0; i < 5; i++ )
    173              {
    174                if ( touchLinkSubDevicesTbl[i] == NULL )
    175                {
    176                  touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
    177                  if ( touchLinkSubDevicesTbl[i] != NULL )
    178                  {
    179                    touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
    180                    touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
    181                    touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
    182                    touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
    183                    break;
    184                  }
    185                }
    186              }
    187          #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
    188            }
   \                     ??CrossCallReturnLabel_102:
   \   000081   12....       LCALL     `??bdb_zclFindingBindingEpType::?relay`; Banked call to: bdb_zclFindingBindingEpType
   \   000084   85..82       MOV       DPL,?V0
   \   000087   85..83       MOV       DPH,?V1
   \   00008A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00008D   A3           INC       DPTR
   \   00008E   E9           MOV       A,R1
   \   00008F   F0           MOVX      @DPTR,A
    189           
    190            return ep;
   \                     ??afRegisterExtended_0:
   \   000090   EE           MOV       A,R6
   \   000091   FA           MOV       R2,A
   \   000092   EF           MOV       A,R7
   \   000093   FB           MOV       R3,A
   \   000094                REQUIRE ?Subroutine0
   \   000094                ; // Fall through to label ?Subroutine0
    191          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine39_0
   \   000002                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    192          
    193          /*********************************************************************
    194           * @fn      afRegister
    195           *
    196           * @brief   Register an Application's EndPoint description.
    197           *
    198           * @param   epDesc - pointer to the Application's endpoint descriptor.
    199           *
    200           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    201           *
    202           * @return  afStatus_SUCCESS - Registered
    203           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    204           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    208            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV       ?V1,R3
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V1
   \   000017   6004         JZ        ??afRegister_0
    209            {
    210              return afStatus_INVALID_PARAMETER;
   \   000019   7902         MOV       R1,#0x2
   \   00001B   8027         SJMP      ??afRegister_1
    211            }
    212          
    213            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   E4           CLR       A
   \   00001E   F5..         MOV       ?V0,A
   \   000020   F5..         MOV       ?V1,A
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   \   000037   8B..         MOV       ?V1,R3
   \   000039   EA           MOV       A,R2
   \   00003A   45..         ORL       A,?V1
   \   00003C   7004         JNZ       ??afRegister_2
   \   00003E   7910         MOV       R1,#0x10
   \   000040   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   000042   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   000044   02....       LJMP      ?Subroutine1 & 0xFFFF
    214          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    215          
    216          /*********************************************************************
    217           * @fn      afDelete
    218           *
    219           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    220           *
    221           * @param   EndPoint - Application Endpoint to delete
    222           *
    223           * @return  afStatus_SUCCESS - endpoint deleted
    224           *          afStatus_INVALID_PARAMETER - endpoint not found
    225           *          afStatus_FAILED - endpoint list empty
    226           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    228          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    229            epList_t *epCurrent;
    230            epList_t *epPrevious;
    231          
    232            if ( epList != NULL )
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000D   6035         JZ        ??afDelete_0
    233            {
    234              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV       DPTR,#epList
   \   000012   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    235          
    236              // first element of the list matches
    237              if ( epCurrent->epDesc->endPoint == EndPoint )
   \                     ??CrossCallReturnLabel_103:
   \   000015   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000018   7009         JNZ       ??afDelete_1
    238              {
    239                epList = epCurrent->nextDesc;
   \   00001A   90....       MOV       DPTR,#epList
   \   00001D   8015         SJMP      ??afDelete_2
    240                osal_mem_free( epCurrent );
    241          
    242                return ( afStatus_SUCCESS );
    243              }
    244              else
    245              {
    246                // search the list
    247                for ( epCurrent = epPrevious->nextDesc;
    248                      epCurrent != NULL;
    249                      epCurrent = epCurrent->nextDesc )
    250                {
    251                  if ( epCurrent->epDesc->endPoint == EndPoint )
    252                  {
    253                    epPrevious->nextDesc = epCurrent->nextDesc;
    254                    osal_mem_free( epCurrent );
    255          
    256                    // delete the entry and free the memory
    257                    return ( afStatus_SUCCESS );
    258                  }
    259                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   00001F   EA           MOV       A,R2
   \   000020   F8           MOV       R0,A
   \   000021   EB           MOV       A,R3
   \   000022   F9           MOV       R1,A
   \                     ??afDelete_1:
   \   000023   EC           MOV       A,R4
   \   000024   FA           MOV       R2,A
   \   000025   ED           MOV       A,R5
   \   000026   FB           MOV       R3,A
   \   000027   EA           MOV       A,R2
   \   000028   4B           ORL       A,R3
   \   000029   6015         JZ        ??afDelete_4
   \   00002B   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00002E   70EF         JNZ       ??afDelete_3
   \   000030   8882         MOV       DPL,R0
   \   000032   8983         MOV       DPH,R1
   \                     ??afDelete_2:
   \   000034   EC           MOV       A,R4
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   ED           MOV       A,R5
   \   000038   F0           MOVX      @DPTR,A
   \   000039                ; Setup parameters for call to function osal_mem_free
   \   000039   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   8006         SJMP      ??afDelete_5
    260                }
    261              }
    262          
    263              // no endpoint found
    264              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000040   7902         MOV       R1,#0x2
   \   000042   8002         SJMP      ??afDelete_5
    265            }
    266            else
    267            {
    268              // epList is empty
    269              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000044   7901         MOV       R1,#0x1
    270            }
   \                     ??afDelete_5:
   \   000046                REQUIRE ?Subroutine2
   \   000046                ; // Fall through to label ?Subroutine2
    271          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FF           MOV       R7,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F583         MOV       DPH,A
   \   000013   8F82         MOV       DPL,R7
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6E           XRL       A,R6
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    272          
    273          /*********************************************************************
    274           * @fn          afDataConfirm
    275           *
    276           * @brief       This function will generate the Data Confirm back to
    277           *              the application.
    278           *
    279           * @param       endPoint - confirm end point
    280           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    281           * @param       status - status of APSDE_DATA_REQUEST
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
   \   000009   8B..         MOV       ?V0,R3
    287            endPointDesc_t *epDesc;
    288            afDataConfirm_t *msgPtr;
    289          
    290            // Find the endpoint description
    291            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
    292            if ( epDesc == NULL )
   \   000012   EA           MOV       A,R2
   \   000013   45..         ORL       A,?V5
   \   000015   6033         JZ        ??afDataConfirm_0
    293              return;
    294          
    295            // Determine the incoming command type
    296            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   7A04         MOV       R2,#0x4
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    297            if ( msgPtr )
   \   00001E   EA           MOV       A,R2
   \   00001F   4B           ORL       A,R3
   \   000020   6028         JZ        ??afDataConfirm_0
    298            {
    299              // Build the Data Confirm message
    300              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   74FD         MOV       A,#-0x3
   \   000028   F0           MOVX      @DPTR,A
    301              msgPtr->hdr.status = status;
   \   000029   A3           INC       DPTR
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
    302              msgPtr->endpoint = endPoint;
   \   00002D   EE           MOV       A,R6
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   F0           MOVX      @DPTR,A
    303              msgPtr->transID = transID;
   \   000035   EF           MOV       A,R7
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   F0           MOVX      @DPTR,A
    304          
    305          #if defined ( MT_AF_CB_FUNC )
    306              /* If MT has subscribed for this callback, don't send as a message. */
    307              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    308              {
    309                /* Send callback if it's subscribed */
    310                MT_AfDataConfirm ((void *)msgPtr);
    311                /* Release the memory. */
    312                osal_msg_deallocate( (void *)msgPtr );
    313              }
    314              else
    315          #endif
    316              {
    317                /* send message through task message */
    318                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00003E                ; Setup parameters for call to function osal_msg_send
   \   00003E   85..82       MOV       DPL,?V4
   \   000041   85..83       MOV       DPH,?V5
   \   000044   12....       LCALL     ?Subroutine7 & 0xFFFF
    319              }
    320            }
   \                     ??CrossCallReturnLabel_61:
   \   000047   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    321          }
   \                     ??afDataConfirm_0:
   \   00004A   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine38_0
   \   000002                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
    322          
    323          /*********************************************************************
    324           * @fn          afReflectError
    325           *
    326           * @brief       This function will generate the Reflect Error message to
    327           *              the application.
    328           *
    329           * @param       srcEP - Source Endpoint
    330           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    331           * @param       dstAddr - intended destination
    332           * @param       dstEP - Destination Endpoint
    333           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    334           * @param       status - status of APSDE_DATA_REQUEST
    335           *
    336           * @return      none
    337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    339                               uint8 transID, ZStatus_t status )
    340          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8C..         MOV       ?V6,R4
   \   000009   8D..         MOV       ?V7,R5
   \   00000B   8B..         MOV       ?V1,R3
    341            endPointDesc_t *epDesc;
    342            afReflectError_t *msgPtr;
    343          
    344            // Find the endpoint description
    345            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AE..         MOV       R6,?V2
   \   000016   AF..         MOV       R7,?V3
    346            if ( epDesc == NULL )
   \   000018   EE           MOV       A,R6
   \   000019   4F           ORL       A,R7
   \   00001A   604E         JZ        ??afReflectError_0
    347              return;
    348          
    349            // Determine the incoming command type
    350            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7A07         MOV       R2,#0x7
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    351            if ( msgPtr )
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   6043         JZ        ??afReflectError_0
    352            {
    353              // Build the Data Confirm message
    354              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   74FE         MOV       A,#-0x2
   \   00002D   F0           MOVX      @DPTR,A
    355              msgPtr->hdr.status = status;
   \   00002E   7411         MOV       A,#0x11
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   F0           MOVX      @DPTR,A
    356              msgPtr->endpoint = dstEP;
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V1
   \   000042   F0           MOVX      @DPTR,A
    357              msgPtr->transID = transID;
   \   000043   7410         MOV       A,#0x10
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E0           MOVX      A,@DPTR
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine28 & 0xFFFF
    358              msgPtr->dstAddrMode = dstAddrMode;
   \                     ??CrossCallReturnLabel_45:
   \   000053   E5..         MOV       A,?V0
   \   000055   12....       LCALL     ?Subroutine28 & 0xFFFF
    359              msgPtr->dstAddr = dstAddr;
   \                     ??CrossCallReturnLabel_46:
   \   000058   A3           INC       DPTR
   \   000059   E5..         MOV       A,?V6
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E5..         MOV       A,?V7
   \   00005F   F0           MOVX      @DPTR,A
    360          
    361          #if defined ( MT_AF_CB_FUNC )
    362              /* If MT has subscribed for this callback, don't send as a message. */
    363              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    364              {
    365                /* Send callback if it's subscribed */
    366                MT_AfReflectError( (void *)msgPtr );
    367                /* Release the memory. */
    368                osal_msg_deallocate( (void *)msgPtr );
    369              }
    370              else
    371          #endif
    372              {
    373                /* send message through task message */
    374                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000060                ; Setup parameters for call to function osal_msg_send
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   12....       LCALL     ?Subroutine7 & 0xFFFF
    375              }
    376            }
   \                     ??CrossCallReturnLabel_62:
   \   000067   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    377          }
   \                     ??afReflectError_0:
   \   00006A   02....       LJMP      ??Subroutine41_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    378          
    379          /*********************************************************************
    380           * @fn          afIncomingData
    381           *
    382           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    383           *
    384           * @param       aff  - pointer to APS frame format
    385           * @param       SrcAddress  - Source address
    386           * @param       SrcPanId  - Source PAN ID
    387           * @param       sig - incoming message's link quality
    388           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    389           * @param       SecurityUse - Security enable/disable
    390           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    391           * @param       radius - incoming messages received radius
    392           *
    393           * @return      none
    394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    396                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    397                               uint32 timestamp, uint8 radius )
    398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7409         MOV       A,#0x9
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7406         MOV       A,#0x6
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E9           MOV       A,R1
   \   000024   F0           MOVX      @DPTR,A
    399            endPointDesc_t *epDesc = NULL;
    400            epList_t *pList = epList;
   \   000025   90....       MOV       DPTR,#epList
   \   000028   12....       LCALL     ?Subroutine13 & 0xFFFF
    401          #if !defined ( APS_NO_GROUPS )
    402            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_13:
   \   00002B   75..FE       MOV       ?V6,#-0x2
    403          #endif
    404          
    405            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2402         ADD       A,#0x2
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   3400         ADDC      A,#0x0
   \   00003B   F9           MOV       R1,A
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2404         ADD       A,#0x4
   \   00004C   F8           MOV       R0,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   3400         ADDC      A,#0x0
   \   000051   F9           MOV       R1,A
   \   000052   7407         MOV       A,#0x7
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000062   702B         JNZ       ??afIncomingData_0
    406            {
    407          #if !defined ( APS_NO_GROUPS )
    408              // Find the first endpoint for this group
    409              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000064                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000064   79FE         MOV       R1,#-0x2
   \   000066   7407         MOV       A,#0x7
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00006E   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000071   E9           MOV       A,R1
   \   000072   F5..         MOV       ?V6,A
    410              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000074   74FE         MOV       A,#-0x2
   \   000076   65..         XRL       A,?V6
   \   000078   7003         JNZ       $+5
   \   00007A   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    411                return;   // No endpoint found
    412          
    413              epDesc = afFindEndPointDesc( grpEp );
   \   00007D                ; Setup parameters for call to function afFindEndPointDesc
   \   00007D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000080   8A..         MOV       ?V0,R2
   \   000082   8B..         MOV       ?V1,R3
   \   000084   AE..         MOV       R6,?V0
   \   000086   AF..         MOV       R7,?V1
    414              if ( epDesc == NULL )
   \   000088   EE           MOV       A,R6
   \   000089   4F           ORL       A,R7
   \   00008A   7046         JNZ       ??afIncomingData_2
    415                return;   // Endpoint descriptor not found
   \   00008C   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    416          
    417              pList = afFindEndPointDescList( epDesc->endPoint );
    418          #else
    419              return; // Not supported
    420          #endif
    421            }
    422            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00008F   7404         MOV       A,#0x4
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000097   74FF         MOV       A,#-0x1
   \   000099   69           XRL       A,R1
   \   00009A   7023         JNZ       ??afIncomingData_3
    423            {
    424              // Set the list
    425              if ( pList != NULL )
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A5   7003         JNZ       $+5
   \   0000A7   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    426              {
    427                epDesc = pList->epDesc;
   \   0000AA   85..82       MOV       DPL,?XSP + 0
   \   0000AD   85..83       MOV       DPH,?XSP + 1
   \   0000B0   12....       LCALL     ?Subroutine19 & 0xFFFF
    428              }
    429            }
   \                     ??CrossCallReturnLabel_30:
   \   0000B3   741F         MOV       A,#0x1f
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?L_MOV_X
   \   0000BD   802C         SJMP      ??CrossCallReturnLabel_31
    430            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000BF                ; Setup parameters for call to function afFindEndPointDesc
   \   0000BF   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000C2   8A..         MOV       ?V0,R2
   \   0000C4   8B..         MOV       ?V1,R3
   \   0000C6   A8..         MOV       R0,?V0
   \   0000C8   A9..         MOV       R1,?V1
   \   0000CA   E8           MOV       A,R0
   \   0000CB   FE           MOV       R6,A
   \   0000CC   E9           MOV       A,R1
   \   0000CD   FF           MOV       R7,A
   \   0000CE   E8           MOV       A,R0
   \   0000CF   49           ORL       A,R1
   \   0000D0   60E1         JZ        ??CrossCallReturnLabel_30
    431            {
    432              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000D2                ; Setup parameters for call to function afFindEndPointDescList
   \   0000D2   8E82         MOV       DPL,R6
   \   0000D4   8F83         MOV       DPH,R7
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000DB   85..82       MOV       DPL,?XSP + 0
   \   0000DE   85..83       MOV       DPH,?XSP + 1
   \   0000E1   EA           MOV       A,R2
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   EB           MOV       A,R3
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   80CB         SJMP      ??CrossCallReturnLabel_30
    433            }
    434          
    435            while ( epDesc )
    436            {
    437              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    438          
    439              if ( pList->pfnDescCB )
    440              {
    441                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    442                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    443                if ( pID )
    444                {
    445                  epProfileID = *pID;
    446                  osal_mem_free( pID );
    447                }
    448              }
    449              else if ( epDesc->simpleDesc )
    450              {
    451                epProfileID = epDesc->simpleDesc->AppProfId;
    452              }
    453          
    454              // First part of verification is to make sure that:
    455              // the local Endpoint ProfileID matches the received ProfileID OR
    456              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    457              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    458              /**
    459               * JC NOTES: Here we temporally remove the first check, as some devices (e.g., Philips Hue) do not strictly follow the rule that "an endpoint can only support one profile".
    460              */
    461          
    462              //if ( (aff->ProfileID == epProfileID) ||
    463              //     ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    464              //     ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    465              if ((epDesc->endPoint != ZDO_EP) && (aff->ProfileID >=0) ||
                                                                         ^
Warning[Pe186]: pointless comparison of unsigned integer with zero

      uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
             ^
"D:\fuzzing-coordinator\Components\stack\af\AF.c",437  Warning[Pe550]: variable
          "epProfileID" was set but never used
    466                ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    467                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    468              {
    469                // Save original endpoint
    470                uint8 endpoint = aff->DstEndPoint;
    471          
    472                // overwrite with descriptor's endpoint
    473                aff->DstEndPoint = epDesc->endPoint;
    474          
    475                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    476                                   nwkSeqNum, SecurityUse, timestamp, radius );
    477          
    478                // Restore with original endpoint
    479                aff->DstEndPoint = endpoint;
    480              }
    481          
    482              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    483              {
    484          #if !defined ( APS_NO_GROUPS )
    485                // Find the next endpoint for this group
    486                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    487                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    488                  return;   // No endpoint found
    489          
    490                epDesc = afFindEndPointDesc( grpEp );
    491                if ( epDesc == NULL )
    492                  return;   // Endpoint descriptor not found
    493          
    494                pList = afFindEndPointDescList( epDesc->endPoint );
    495          #else
    496                return;
    497          #endif
    498              }
    499              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    500              {
    501                pList = pList->nextDesc;
    502                if ( pList )
    503                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   0000E8   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000EB   EE           MOV       A,R6
   \   0000EC   4F           ORL       A,R7
   \   0000ED   7003         JNZ       $+5
   \   0000EF   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000F2   8014         SJMP      ??afIncomingData_5
   \                     ??afIncomingData_6:
   \   0000F4                ; Setup parameters for call to function afFindEndPointDescList
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000FD   85..82       MOV       DPL,?XSP + 0
   \   000100   85..83       MOV       DPH,?XSP + 1
   \   000103   EA           MOV       A,R2
   \   000104   F0           MOVX      @DPTR,A
   \   000105   A3           INC       DPTR
   \   000106   EB           MOV       A,R3
   \   000107   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_5:
   \   000108   85..82       MOV       DPL,?XSP + 0
   \   00010B   85..83       MOV       DPH,?XSP + 1
   \   00010E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000111   E8           MOV       A,R0
   \   000112   FC           MOV       R4,A
   \   000113   E9           MOV       A,R1
   \   000114   FD           MOV       R5,A
   \   000115   EC           MOV       A,R4
   \   000116   4D           ORL       A,R5
   \   000117   6011         JZ        ??afIncomingData_7
   \   000119                ; Setup parameters for indirect call
   \   000119   8E82         MOV       DPL,R6
   \   00011B   8F83         MOV       DPH,R7
   \   00011D   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000120   12....       LCALL     ?CALL_IND
   \   000123   EA           MOV       A,R2
   \   000124   4B           ORL       A,R3
   \   000125   6003         JZ        ??afIncomingData_7
   \   000127                ; Setup parameters for call to function osal_mem_free
   \   000127   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??afIncomingData_7:
   \   00012A   8E82         MOV       DPL,R6
   \   00012C   8F83         MOV       DPH,R7
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FA           MOV       R2,A
   \   000130   7017         JNZ       ??afIncomingData_8
   \   000132   7402         MOV       A,#0x2
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F8           MOV       R0,A
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   C8           XCH       A,R0
   \   00013C   2408         ADD       A,#0x8
   \   00013E   F582         MOV       DPL,A
   \   000140   E4           CLR       A
   \   000141   38           ADDC      A,R0
   \   000142   F583         MOV       DPH,A
   \   000144   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000147   7071         JNZ       ??afIncomingData_9
   \                     ??afIncomingData_8:
   \   000149   7404         MOV       A,#0x4
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000151   F5..         MOV       ?V5,A
   \   000153   7404         MOV       A,#0x4
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00015B   EA           MOV       A,R2
   \   00015C   F0           MOVX      @DPTR,A
   \   00015D                ; Setup parameters for call to function afBuildMSGIncoming
   \   00015D   7423         MOV       A,#0x23
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E0           MOVX      A,@DPTR
   \   000163   F5..         MOV       ?V4,A
   \   000165   78..         MOV       R0,#?V4
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016A   78..         MOV       R0,#?V0
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00016F   7423         MOV       A,#0x23
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F5..         MOV       ?V4,A
   \   000177   78..         MOV       R0,#?V4
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017C   7422         MOV       A,#0x22
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000184   7422         MOV       A,#0x22
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00018C   7413         MOV       A,#0x13
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000194   7412         MOV       A,#0x12
   \   000196   12....       LCALL     ?XSTACK_DISP0_8
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   F9           MOV       R1,A
   \   00019B   EE           MOV       A,R6
   \   00019C   FC           MOV       R4,A
   \   00019D   EF           MOV       A,R7
   \   00019E   FD           MOV       R5,A
   \   00019F   740E         MOV       A,#0xe
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001A7   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0001AA   740C         MOV       A,#0xc
   \   0001AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AF   7404         MOV       A,#0x4
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001B7   E5..         MOV       A,?V5
   \   0001B9   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_9:
   \   0001BA   7402         MOV       A,#0x2
   \   0001BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BF   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001C2   702A         JNZ       ??afIncomingData_10
   \   0001C4                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001C4   A9..         MOV       R1,?V6
   \   0001C6   7407         MOV       A,#0x7
   \   0001C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0001CE   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0001D1   E9           MOV       A,R1
   \   0001D2   F5..         MOV       ?V6,A
   \   0001D4   74FE         MOV       A,#-0x2
   \   0001D6   65..         XRL       A,?V6
   \   0001D8   6039         JZ        ??afIncomingData_1
   \   0001DA                ; Setup parameters for call to function afFindEndPointDesc
   \   0001DA   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001DD   8A..         MOV       ?V4,R2
   \   0001DF   8B..         MOV       ?V5,R3
   \   0001E1   AE..         MOV       R6,?V4
   \   0001E3   AF..         MOV       R7,?V5
   \   0001E5   EE           MOV       A,R6
   \   0001E6   4F           ORL       A,R7
   \   0001E7   6003         JZ        $+5
   \   0001E9   02....       LJMP      ??afIncomingData_6 & 0xFFFF
   \   0001EC   8025         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_10:
   \   0001EE   7404         MOV       A,#0x4
   \   0001F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F3   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001F6   F4           CPL       A
   \   0001F7   701A         JNZ       ??afIncomingData_1
   \   0001F9   85..82       MOV       DPL,?XSP + 0
   \   0001FC   85..83       MOV       DPH,?XSP + 1
   \   0001FF   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000202   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000205   85..82       MOV       DPL,?XSP + 0
   \   000208   85..83       MOV       DPH,?XSP + 1
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   F8           MOV       R0,A
   \   00020D   49           ORL       A,R1
   \   00020E   6003         JZ        $+5
   \   000210   02....       LJMP      ??afIncomingData_4 & 0xFFFF
    504                else
    505                  epDesc = NULL;
    506              }
    507              else
    508                epDesc = NULL;
    509            }
    510          }
   \                     ??afIncomingData_1:
   \   000213   740B         MOV       A,#0xb
   \   000215   12....       LCALL     ?DEALLOC_XSTACK8
   \   000218                REQUIRE ?Subroutine4
   \   000218                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FE           MOV       R6,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FF           MOV       R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   540C         ANL       A,#0xc
   \   000005   640C         XRL       A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   E8           MOV       A,R0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E9           MOV       A,R1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   7902         MOV       R1,#0x2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00000A   22           RET
    511          
    512          /*********************************************************************
    513           * @fn          afBuildMSGIncoming
    514           *
    515           * @brief       Build the message for the app
    516           *
    517           * @param
    518           *
    519           * @return      pointer to next in data buffer
    520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    522                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    523                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
    525            afIncomingMSGPacket_t *MSGpkt;
    526            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    527            uint8 *asdu = aff->asdu;
   \   00001A   EA           MOV       A,R2
   \   00001B   240E         ADD       A,#0xe
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000027   7401         MOV       A,#0x1
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    528            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_77:
   \   00002F   EA           MOV       A,R2
   \   000030   2410         ADD       A,#0x10
   \   000032   F5..         MOV       ?V2,A
   \   000034   E4           CLR       A
   \   000035   35..         ADDC      A,?V1
   \   000037   F5..         MOV       ?V3,A
   \   000039                ; Setup parameters for call to function osal_msg_allocate
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   2427         ADD       A,#0x27
   \   000041   FA           MOV       R2,A
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   AE..         MOV       R6,?V4
   \   00004D   AF..         MOV       R7,?V5
    529          
    530            if ( MSGpkt == NULL )
   \   00004F   EE           MOV       A,R6
   \   000050   4F           ORL       A,R7
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
    531            {
    532              return;
    533            }
    534          
    535            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   741A         MOV       A,#0x1a
   \   00005C   12....       LCALL     ?Subroutine30 & 0xFFFF
    536            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_49:
   \   00005F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   12....       LCALL     ?Subroutine24 & 0xFFFF
    537            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_39:
   \   00006B   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00006E   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    538            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_78:
   \   000071                ; Setup parameters for call to function afCopyAddress
   \   000071   7413         MOV       A,#0x13
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000079   EE           MOV       A,R6
   \   00007A   2406         ADD       A,#0x6
   \   00007C   FA           MOV       R2,A
   \   00007D   E4           CLR       A
   \   00007E   3F           ADDC      A,R7
   \   00007F   FB           MOV       R3,A
   \   000080   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    539            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000083   85..82       MOV       DPL,?V0
   \   000086   85..83       MOV       DPH,?V1
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   C0E0         PUSH      A
   \   00008F   EE           MOV       A,R6
   \   000090   240F         ADD       A,#0xf
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   F583         MOV       DPH,A
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
    540            MSGpkt->endPoint = epDesc->endPoint;
   \   00009B   85..82       MOV       DPL,?V6
   \   00009E   85..83       MOV       DPH,?V7
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   C0E0         PUSH      A
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2414         ADD       A,#0x14
   \   0000A7   F582         MOV       DPL,A
   \   0000A9   E4           CLR       A
   \   0000AA   3F           ADDC      A,R7
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   D0E0         POP       A
   \   0000AF   F0           MOVX      @DPTR,A
    541            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   240C         ADD       A,#0xc
   \   0000B4   F582         MOV       DPL,A
   \   0000B6   E4           CLR       A
   \   0000B7   35..         ADDC      A,?V1
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   C0E0         PUSH      A
   \   0000BE   EE           MOV       A,R6
   \   0000BF   2415         ADD       A,#0x15
   \   0000C1   F582         MOV       DPL,A
   \   0000C3   E4           CLR       A
   \   0000C4   3F           ADDC      A,R7
   \   0000C5   F583         MOV       DPH,A
   \   0000C7   D0E0         POP       A
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   7417         MOV       A,#0x17
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ?Subroutine20 & 0xFFFF
    542            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_32:
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C0E0         PUSH      A
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2416         ADD       A,#0x16
   \   0000D8   F582         MOV       DPL,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   F583         MOV       DPH,A
   \   0000DE   D0E0         POP       A
   \   0000E0   F0           MOVX      @DPTR,A
    543            MSGpkt->correlation = sig->correlation;
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   8983         MOV       DPH,R1
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   C0E0         PUSH      A
   \   0000E9   EE           MOV       A,R6
   \   0000EA   2417         ADD       A,#0x17
   \   0000EC   F582         MOV       DPL,A
   \   0000EE   E4           CLR       A
   \   0000EF   3F           ADDC      A,R7
   \   0000F0   F583         MOV       DPH,A
   \   0000F2   D0E0         POP       A
   \   0000F4   F0           MOVX      @DPTR,A
    544            MSGpkt->rssi = sig->rssi;
   \   0000F5   8882         MOV       DPL,R0
   \   0000F7   8983         MOV       DPH,R1
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   C0E0         PUSH      A
   \   0000FE   EE           MOV       A,R6
   \   0000FF   2418         ADD       A,#0x18
   \   000101   F582         MOV       DPL,A
   \   000103   E4           CLR       A
   \   000104   3F           ADDC      A,R7
   \   000105   F583         MOV       DPH,A
   \   000107   D0E0         POP       A
   \   000109   F0           MOVX      @DPTR,A
    545            MSGpkt->SecurityUse = SecurityUse;
   \   00010A   7419         MOV       A,#0x19
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   C0E0         PUSH      A
   \   000112   EE           MOV       A,R6
   \   000113   2419         ADD       A,#0x19
   \   000115   F582         MOV       DPL,A
   \   000117   E4           CLR       A
   \   000118   3F           ADDC      A,R7
   \   000119   F583         MOV       DPH,A
   \   00011B   D0E0         POP       A
   \   00011D   F0           MOVX      @DPTR,A
    546            MSGpkt->timestamp = timestamp;
   \   00011E   741A         MOV       A,#0x1a
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ?XLOAD_R0123
   \   000126   EE           MOV       A,R6
   \   000127   241A         ADD       A,#0x1a
   \   000129   F582         MOV       DPL,A
   \   00012B   E4           CLR       A
   \   00012C   3F           ADDC      A,R7
   \   00012D   F583         MOV       DPH,A
   \   00012F   12....       LCALL     ?XSTORE_R0123
    547            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   000132   85..82       MOV       DPL,?XSP + 0
   \   000135   85..83       MOV       DPH,?XSP + 1
   \   000138   E0           MOVX      A,@DPTR
   \   000139   C0E0         PUSH      A
   \   00013B   EE           MOV       A,R6
   \   00013C   241E         ADD       A,#0x1e
   \   00013E   F582         MOV       DPL,A
   \   000140   E4           CLR       A
   \   000141   3F           ADDC      A,R7
   \   000142   F583         MOV       DPH,A
   \   000144   D0E0         POP       A
   \   000146   F0           MOVX      @DPTR,A
    548            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   000147   E5..         MOV       A,?V0
   \   000149   2415         ADD       A,#0x15
   \   00014B   F582         MOV       DPL,A
   \   00014D   E4           CLR       A
   \   00014E   35..         ADDC      A,?V1
   \   000150   F583         MOV       DPH,A
   \   000152   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000155   2424         ADD       A,#0x24
   \   000157   F582         MOV       DPL,A
   \   000159   E4           CLR       A
   \   00015A   3F           ADDC      A,R7
   \   00015B   F583         MOV       DPH,A
   \   00015D   12....       LCALL     ?Subroutine24 & 0xFFFF
    549            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_40:
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000167   2412         ADD       A,#0x12
   \   000169   12....       LCALL     ?Subroutine25 & 0xFFFF
    550            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_83:
   \   00016C   7415         MOV       A,#0x15
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000174   2410         ADD       A,#0x10
   \   000176   12....       LCALL     ?Subroutine25 & 0xFFFF
    551            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_84:
   \   000179   EE           MOV       A,R6
   \   00017A   241F         ADD       A,#0x1f
   \   00017C   F582         MOV       DPL,A
   \   00017E   E4           CLR       A
   \   00017F   3F           ADDC      A,R7
   \   000180   F583         MOV       DPH,A
   \   000182   E4           CLR       A
   \   000183   F0           MOVX      @DPTR,A
    552            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000184   EE           MOV       A,R6
   \   000185   2420         ADD       A,#0x20
   \   000187   FC           MOV       R4,A
   \   000188   E4           CLR       A
   \   000189   3F           ADDC      A,R7
   \   00018A   FD           MOV       R5,A
   \   00018B   85..82       MOV       DPL,?V2
   \   00018E   85..83       MOV       DPH,?V3
   \   000191   E0           MOVX      A,@DPTR
   \   000192   8C82         MOV       DPL,R4
   \   000194   8D83         MOV       DPH,R5
   \   000196   F0           MOVX      @DPTR,A
   \   000197   A3           INC       DPTR
   \   000198   E4           CLR       A
   \   000199   F0           MOVX      @DPTR,A
    553            MSGpkt->radius = radius;
   \   00019A   741E         MOV       A,#0x1e
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   C0E0         PUSH      A
   \   0001A2   EE           MOV       A,R6
   \   0001A3   2426         ADD       A,#0x26
   \   0001A5   F582         MOV       DPL,A
   \   0001A7   E4           CLR       A
   \   0001A8   3F           ADDC      A,R7
   \   0001A9   F583         MOV       DPH,A
   \   0001AB   D0E0         POP       A
   \   0001AD   F0           MOVX      @DPTR,A
    554          
    555            if ( MSGpkt->cmd.DataLength )
   \   0001AE   EE           MOV       A,R6
   \   0001AF   2422         ADD       A,#0x22
   \   0001B1   F8           MOV       R0,A
   \   0001B2   E4           CLR       A
   \   0001B3   3F           ADDC      A,R7
   \   0001B4   F9           MOV       R1,A
   \   0001B5   8C82         MOV       DPL,R4
   \   0001B7   8D83         MOV       DPH,R5
   \   0001B9   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0001BC   EA           MOV       A,R2
   \   0001BD   4B           ORL       A,R3
   \   0001BE   6035         JZ        ??afBuildMSGIncoming_1
    556            {
    557              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   0001C0   EE           MOV       A,R6
   \   0001C1   2427         ADD       A,#0x27
   \   0001C3   FA           MOV       R2,A
   \   0001C4   E4           CLR       A
   \   0001C5   3F           ADDC      A,R7
   \   0001C6   FB           MOV       R3,A
   \   0001C7   8882         MOV       DPL,R0
   \   0001C9   8983         MOV       DPH,R1
   \   0001CB   EA           MOV       A,R2
   \   0001CC   F0           MOVX      @DPTR,A
   \   0001CD   A3           INC       DPTR
   \   0001CE   EB           MOV       A,R3
   \   0001CF   F0           MOVX      @DPTR,A
    558              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   0001D0                ; Setup parameters for call to function osal_memcpy
   \   0001D0   7401         MOV       A,#0x1
   \   0001D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F5..         MOV       ?V0,A
   \   0001D8   A3           INC       DPTR
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   F5..         MOV       ?V1,A
   \   0001DC   75..00       MOV       ?V2,#0x0
   \   0001DF   78..         MOV       R0,#?V0
   \   0001E1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E4   8C82         MOV       DPL,R4
   \   0001E6   8D83         MOV       DPH,R5
   \   0001E8   12....       LCALL     ?Subroutine35 & 0xFFFF
    559            }
   \                     ??CrossCallReturnLabel_55:
   \   0001EB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001EE   7403         MOV       A,#0x3
   \   0001F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F3   8008         SJMP      ??afBuildMSGIncoming_2
    560            else
    561            {
    562              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001F5   8882         MOV       DPL,R0
   \   0001F7   8983         MOV       DPH,R1
   \   0001F9   E4           CLR       A
   \   0001FA   F0           MOVX      @DPTR,A
   \   0001FB   A3           INC       DPTR
   \   0001FC   F0           MOVX      @DPTR,A
    563            }
    564          
    565          #if defined ( MT_AF_CB_FUNC )
    566            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    567            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    568            {
    569              MT_AfIncomingMsg( (void *)MSGpkt );
    570              // Release the memory.
    571              osal_msg_deallocate( (void *)MSGpkt );
    572            }
    573            else
    574          #endif
    575            {
    576              // Send message through task message.
    577              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001FD                ; Setup parameters for call to function osal_msg_send
   \   0001FD   EE           MOV       A,R6
   \   0001FE   FA           MOV       R2,A
   \   0001FF   EF           MOV       A,R7
   \   000200   FB           MOV       R3,A
   \   000201   85..82       MOV       DPL,?V6
   \   000204   85..83       MOV       DPH,?V7
   \   000207   12....       LCALL     ?Subroutine7 & 0xFFFF
    578            }
   \                     ??CrossCallReturnLabel_63:
   \   00020A   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    579          }
   \                     ??afBuildMSGIncoming_0:
   \   00020D   7403         MOV       A,#0x3
   \   00020F                REQUIRE ?Subroutine3
   \   00020F                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine42_0
   \   000006                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function afFindEndPointDescList
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine44_0
   \   000001                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET
    580          
    581          /*********************************************************************
    582           * @fn      AF_DataRequest
    583           *
    584           * @brief   Common functionality for invoking APSDE_DataReq() for both
    585           *          SendMulti and MSG-Send.
    586           *
    587           * input parameters
    588           *
    589           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    590           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    591           * @param   cID - A valid cluster ID as specified by the Profile.
    592           * @param   len - Number of bytes of data pointed to by next param.
    593           * @param  *buf - A pointer to the data bytes to send.
    594           * @param  *transID - A pointer to a byte which can be modified and which will
    595           *                    be used as the transaction sequence number of the msg.
    596           * @param   options - Valid bit mask of Tx options.
    597           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    598           *
    599           * output parameters
    600           *
    601           * @param  *transID - Incremented by one if the return value is success.
    602           *
    603           * @return  afStatus_t - See previous definition of afStatus_... types.
    604           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    605          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    606          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    607                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    608                                     uint8 options, uint8 radius )
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V2,R1
    610            pDescCB pfnDescCB;
    611            ZStatus_t stat;
    612            APSDE_DataReq_t req;
    613            afDataReqMTU_t mtu;
    614            epList_t *pList;
    615          
    616            // Verify source end point
    617            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   45..         ORL       A,?V1
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    618            {
    619              return afStatus_INVALID_PARAMETER;
    620            }
    621          
    622          #if !defined( REFLECTOR )
    623            if ( dstAddr->addrMode == afAddrNotPresent )
    624            {
    625              return afStatus_INVALID_PARAMETER;
    626            }
    627          #endif
    628            
    629            // copy the addressing mode, to get the length of the packet
    630            mtu.aps.addressingMode = dstAddr->addrMode; 
   \   00001C   EA           MOV       A,R2
   \   00001D   2408         ADD       A,#0x8
   \   00001F   FE           MOV       R6,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V7
   \   000023   FF           MOV       R7,A
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C0E0         PUSH      A
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
    631          
    632            // Check if route is available before sending data
    633            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   000033   E9           MOV       A,R1
   \   000034   A2E3         MOV       C,0xE0 /* A   */.3
   \   000036   5035         JNC       ??AF_DataRequest_1
    634            {
    635              if ( dstAddr->addrMode != afAddr16Bit )
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6402         XRL       A,#0x2
   \   00003F   6003         JZ        $+5
   \   000041   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    636              {
    637                return ( afStatus_INVALID_PARAMETER );
    638              }
    639          
    640              // First, make sure the destination is not its self, then check for an existing route.
    641              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    642                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000044                ; Setup parameters for call to function NLME_GetShortAddr
   \   000044   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   85..82       MOV       DPL,?V6
   \   00004E   85..83       MOV       DPH,?V7
   \   000051   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000054   E5..         MOV       A,?V4
   \   000056   6A           XRL       A,R2
   \   000057   7003         JNZ       ??AF_DataRequest_2
   \   000059   E5..         MOV       A,?V5
   \   00005B   6B           XRL       A,R3
   \                     ??AF_DataRequest_2:
   \   00005C   600F         JZ        ??AF_DataRequest_1
   \   00005E                ; Setup parameters for call to function RTG_CheckRtStatus
   \   00005E   7C03         MOV       R4,#0x3
   \   000060   7901         MOV       R1,#0x1
   \   000062   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000065   E9           MOV       A,R1
   \   000066   6005         JZ        ??AF_DataRequest_1
    643              {
    644                // A valid route to a concentrator wasn't found
    645                return ( afStatus_NO_ROUTE );
   \   000068   79CD         MOV       R1,#-0x33
   \   00006A   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    646              }
    647            }
    648          
    649            // Validate broadcasting
    650            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    651                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   7402         MOV       A,#0x2
   \   000075   68           XRL       A,R0
   \   000076   6005         JZ        ??AF_DataRequest_4
   \   000078   740F         MOV       A,#0xf
   \   00007A   68           XRL       A,R0
   \   00007B   703F         JNZ       ??AF_DataRequest_5
    652            {
    653              // Check for valid broadcast values
    654              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   00007D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00007D   85..82       MOV       DPL,?V6
   \   000080   85..83       MOV       DPH,?V7
   \   000083   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000086   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000089   E9           MOV       A,R1
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   6025         JZ        ??AF_DataRequest_6
    655              {
    656                // Force mode to broadcast
    657                dstAddr->addrMode = afAddrBroadcast;
   \   000090   740F         MOV       A,#0xf
   \   000092   F0           MOVX      @DPTR,A
    658              }
    659              else
    660              {
    661                // Address is not a valid broadcast type
    662                if ( dstAddr->addrMode == afAddrBroadcast )
    663                {
    664                  return afStatus_INVALID_PARAMETER;
    665                }
    666              }
    667            }
    668            else if ( dstAddr->addrMode != afAddr64Bit &&
    669                      dstAddr->addrMode != afAddrGroup &&
    670                      dstAddr->addrMode != afAddrNotPresent )
    671            {
    672              return afStatus_INVALID_PARAMETER;
    673            }
    674          
    675            // Set destination address
    676            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   000093   E0           MOVX      A,@DPTR
   \   000094   C0E0         PUSH      A
   \   000096   740B         MOV       A,#0xb
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   D0E0         POP       A
   \   00009D   F0           MOVX      @DPTR,A
    677            if ( dstAddr->addrMode == afAddr64Bit )
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6403         XRL       A,#0x3
   \   0000A5   7027         JNZ       ??AF_DataRequest_8
    678            {
    679              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   AC..         MOV       R4,?V6
   \   0000A9   AD..         MOV       R5,?V7
   \   0000AB   7403         MOV       A,#0x3
   \   0000AD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B0   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000B3   802A         SJMP      ??CrossCallReturnLabel_79
    680            }
   \                     ??AF_DataRequest_6:
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   640F         XRL       A,#0xf
   \   0000B8   70D9         JNZ       ??AF_DataRequest_7
   \   0000BA   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   68           XRL       A,R0
   \   0000BF   60D2         JZ        ??AF_DataRequest_7
   \   0000C1   7401         MOV       A,#0x1
   \   0000C3   68           XRL       A,R0
   \   0000C4   60CD         JZ        ??AF_DataRequest_7
   \   0000C6   E8           MOV       A,R0
   \   0000C7   60CA         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000C9   7902         MOV       R1,#0x2
   \   0000CB   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    681            else
    682            {
    683              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000CE   85..82       MOV       DPL,?V6
   \   0000D1   85..83       MOV       DPH,?V7
   \   0000D4   12....       LCALL     ??Subroutine44_0 & 0xFFFF
    684            }
   \                     ??CrossCallReturnLabel_87:
   \   0000D7   7403         MOV       A,#0x3
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    685          
    686            // This option is to use Wildcard ProfileID in outgoing packets
    687            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_79:
   \   0000DF   E5..         MOV       A,?V2
   \   0000E1   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000E3   7412         MOV       A,#0x12
   \   0000E5   5009         JNC       ??AF_DataRequest_9
    688            {
    689              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   74FF         MOV       A,#-0x1
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   806C         SJMP      ??AF_DataRequest_10
    690            }
    691            else
    692            {
    693              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   E4           CLR       A
   \   0000F4   F0           MOVX      @DPTR,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   F0           MOVX      @DPTR,A
    694          
    695              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000F7   90....       MOV       DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   0000FA   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000FD   6046         JZ        ??AF_DataRequest_12
   \   0000FF   8882         MOV       DPL,R0
   \   000101   8983         MOV       DPH,R1
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000108   E5..         MOV       A,?V0
   \   00010A   6A           XRL       A,R2
   \   00010B   7003         JNZ       ??AF_DataRequest_13
   \   00010D   E5..         MOV       A,?V1
   \   00010F   6B           XRL       A,R3
   \                     ??AF_DataRequest_13:
   \   000110   8882         MOV       DPL,R0
   \   000112   8983         MOV       DPH,R1
   \   000114   70E4         JNZ       ??AF_DataRequest_11
   \   000116   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000119   E8           MOV       A,R0
   \   00011A   FC           MOV       R4,A
   \   00011B   E9           MOV       A,R1
   \   00011C   FD           MOV       R5,A
   \   00011D   EC           MOV       A,R4
   \   00011E   4D           ORL       A,R5
   \   00011F   6024         JZ        ??AF_DataRequest_12
    696              {
    697                uint16 *pID = (uint16 *)(pfnDescCB(
    698                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000121                ; Setup parameters for indirect call
   \   000121   85..82       MOV       DPL,?V0
   \   000124   85..83       MOV       DPH,?V1
   \   000127   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00012A   12....       LCALL     ?CALL_IND
    699                if ( pID )
   \   00012D   EA           MOV       A,R2
   \   00012E   4B           ORL       A,R3
   \   00012F   602C         JZ        ??AF_DataRequest_14
    700                {
    701                  req.profileID = *pID;
   \   000131   8A82         MOV       DPL,R2
   \   000133   8B83         MOV       DPH,R3
   \   000135   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000138   7412         MOV       A,#0x12
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    702                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_80:
   \   000140                ; Setup parameters for call to function osal_mem_free
   \   000140   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000143   8018         SJMP      ??AF_DataRequest_14
    703                }
    704              }
    705              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   000145   85..82       MOV       DPL,?V0
   \   000148   85..83       MOV       DPH,?V1
   \   00014B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00014E   600D         JZ        ??AF_DataRequest_14
    706              {
    707                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000150   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    708              }
    709            }
   \                     ??CrossCallReturnLabel_91:
   \   000153   7412         MOV       A,#0x12
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   E8           MOV       A,R0
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   A3           INC       DPTR
   \   00015B   E9           MOV       A,R1
   \                     ??AF_DataRequest_10:
   \   00015C   F0           MOVX      @DPTR,A
    710          
    711            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   00015D   7418         MOV       A,#0x18
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E4           CLR       A
   \   000163   F0           MOVX      @DPTR,A
   \   000164   A3           INC       DPTR
   \   000165   F0           MOVX      @DPTR,A
    712          
    713            if ( ( options & AF_ACK_REQUEST              ) &&
    714                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    715                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000166   E5..         MOV       A,?V2
   \   000168   A2E4         MOV       C,0xE0 /* A   */.4
   \   00016A   501C         JNC       ??AF_DataRequest_15
   \   00016C   740B         MOV       A,#0xb
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F8           MOV       R0,A
   \   000173   740F         MOV       A,#0xf
   \   000175   68           XRL       A,R0
   \   000176   6010         JZ        ??AF_DataRequest_15
   \   000178   7401         MOV       A,#0x1
   \   00017A   68           XRL       A,R0
   \   00017B   600B         JZ        ??AF_DataRequest_15
    716            {
    717              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00017D   7418         MOV       A,#0x18
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   7404         MOV       A,#0x4
   \   000184   F0           MOVX      @DPTR,A
   \   000185   A3           INC       DPTR
   \   000186   E4           CLR       A
   \   000187   F0           MOVX      @DPTR,A
    718            }
    719          
    720            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   000188   E5..         MOV       A,?V2
   \   00018A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00018C   5009         JNC       ??AF_DataRequest_16
    721            {
    722              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   00018E   7418         MOV       A,#0x18
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   E0           MOVX      A,@DPTR
   \   000194   4410         ORL       A,#0x10
   \   000196   F0           MOVX      @DPTR,A
    723            }
    724          
    725            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   000197   E5..         MOV       A,?V2
   \   000199   A2E6         MOV       C,0xE0 /* A   */.6
   \   00019B   5012         JNC       ??AF_DataRequest_17
    726            {
    727              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00019D   7418         MOV       A,#0x18
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   4401         ORL       A,#0x1
   \   0001A5   F0           MOVX      @DPTR,A
    728              mtu.aps.secure = TRUE;
   \   0001A6   7401         MOV       A,#0x1
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   7401         MOV       A,#0x1
   \   0001AD   8006         SJMP      ??AF_DataRequest_18
    729            }
    730            else
    731            {
    732              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   E4           CLR       A
   \                     ??AF_DataRequest_18:
   \   0001B5   F0           MOVX      @DPTR,A
    733            }
    734          
    735            if ( options & AF_PREPROCESS )
   \   0001B6   E5..         MOV       A,?V2
   \   0001B8   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001BA   5009         JNC       ??AF_DataRequest_19
    736            {
    737              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001BC   7418         MOV       A,#0x18
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   E0           MOVX      A,@DPTR
   \   0001C2   4440         ORL       A,#0x40
   \   0001C4   F0           MOVX      @DPTR,A
    738            }
    739          
    740            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001C5   85..82       MOV       DPL,?XSP + 0
   \   0001C8   85..83       MOV       DPH,?XSP + 1
   \   0001CB   E4           CLR       A
   \   0001CC   F0           MOVX      @DPTR,A
    741          
    742            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001CD   E5..         MOV       A,?V2
   \   0001CF   A2E5         MOV       C,0xE0 /* A   */.5
   \   0001D1   5009         JNC       ??AF_DataRequest_20
    743            {
    744              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001D3   741B         MOV       A,#0x1b
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   7404         MOV       A,#0x4
   \   0001DA   800D         SJMP      ??AF_DataRequest_21
    745            }
    746            else
    747            {
    748              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   0001DC   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   C0E0         PUSH      A
   \   0001E2   741B         MOV       A,#0x1b
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   D0E0         POP       A
   \                     ??AF_DataRequest_21:
   \   0001E9   F0           MOVX      @DPTR,A
    749            }
    750          
    751            req.transID       = *transID;
   \   0001EA   7437         MOV       A,#0x37
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001F2   C0E0         PUSH      A
   \   0001F4   741A         MOV       A,#0x1a
   \   0001F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F9   D0E0         POP       A
   \   0001FB   12....       LCALL     ?Subroutine29 & 0xFFFF
    752            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_47:
   \   0001FE   C0E0         PUSH      A
   \   000200   740C         MOV       A,#0xc
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   D0E0         POP       A
   \   000207   F0           MOVX      @DPTR,A
    753            req.dstEP         = dstAddr->endPoint;
   \   000208   85..82       MOV       DPL,?V6
   \   00020B   85..83       MOV       DPH,?V7
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   A3           INC       DPTR
   \   000211   A3           INC       DPTR
   \   000212   A3           INC       DPTR
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   A3           INC       DPTR
   \   000216   A3           INC       DPTR
   \   000217   E0           MOVX      A,@DPTR
   \   000218   C0E0         PUSH      A
   \   00021A   740D         MOV       A,#0xd
   \   00021C   12....       LCALL     ?XSTACK_DISP0_8
   \   00021F   D0E0         POP       A
   \   000221   F0           MOVX      @DPTR,A
    754            req.clusterID     = cID;
   \   000222   7431         MOV       A,#0x31
   \   000224   12....       LCALL     ?XSTACK_DISP0_8
   \   000227   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00022A   7410         MOV       A,#0x10
   \   00022C   12....       LCALL     ?XSTACK_DISP0_8
   \   00022F   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000232   7433         MOV       A,#0x33
   \   000234   12....       LCALL     ?XSTACK_DISP0_8
   \   000237   E0           MOVX      A,@DPTR
   \   000238   FE           MOV       R6,A
   \   000239   A3           INC       DPTR
   \   00023A   E0           MOVX      A,@DPTR
   \   00023B   FF           MOV       R7,A
    755            req.asduLen       = len;
   \   00023C   7414         MOV       A,#0x14
   \   00023E   12....       LCALL     ?XSTACK_DISP0_8
   \   000241   EE           MOV       A,R6
   \   000242   F0           MOVX      @DPTR,A
   \   000243   A3           INC       DPTR
   \   000244   EF           MOV       A,R7
   \   000245   F0           MOVX      @DPTR,A
    756            req.asdu          = buf;
   \   000246   7435         MOV       A,#0x35
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00024E   7416         MOV       A,#0x16
   \   000250   12....       LCALL     ?XSTACK_DISP0_8
   \   000253   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    757            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_82:
   \   000256   7439         MOV       A,#0x39
   \   000258   12....       LCALL     ?XSTACK_DISP0_8
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   C0E0         PUSH      A
   \   00025E   741C         MOV       A,#0x1c
   \   000260   12....       LCALL     ?XSTACK_DISP0_8
   \   000263   D0E0         POP       A
   \   000265   12....       LCALL     ?Subroutine29 & 0xFFFF
    758          #if defined ( INTER_PAN )
    759            req.dstPanId      = dstAddr->panId;
    760          #endif // INTER_PAN
    761          
    762            // Look if there is a Callback function registered for this endpoint
    763            // The callback is used to control the AF Transaction ID used when sending messages
    764            pList = afFindEndPointDescList( srcEP->endPoint );
   \                     ??CrossCallReturnLabel_48:
   \   000268   F9           MOV       R1,A
   \   000269   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00026C   8A82         MOV       DPL,R2
   \   00026E   8B83         MOV       DPH,R3
    765          
    766            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000270   E582         MOV       A,DPL
   \   000272   4583         ORL       A,DPH
   \   000274   6012         JZ        ??AF_DataRequest_22
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   A3           INC       DPTR
   \   000279   A3           INC       DPTR
   \   00027A   A3           INC       DPTR
   \   00027B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00027E   6008         JZ        ??AF_DataRequest_22
    767            {
    768              pList->pfnApplCB( &req );
   \   000280                ; Setup parameters for indirect call
   \   000280   7403         MOV       A,#0x3
   \   000282   12....       LCALL     ?XSTACK_DISP101_8
   \   000285   12....       LCALL     ?CALL_IND
    769            }
    770          
    771          #if defined ( INTER_PAN )
    772            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    773            {
    774              if ( len > INTERP_DataReqMTU() )
    775              {
    776                stat = afStatus_INVALID_PARAMETER;
    777              }
    778              else
    779              {
    780                stat = INTERP_DataReq( &req );
    781              }
    782            }
    783            else
    784          #endif // INTER_PAN
    785            {
    786              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   000288                ; Setup parameters for call to function afDataReqMTU
   \   000288   AA..         MOV       R2,?XSP + 0
   \   00028A   AB..         MOV       R3,?XSP + 1
   \   00028C   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   00028F   E9           MOV       A,R1
   \   000290   C3           CLR       C
   \   000291   9E           SUBB      A,R6
   \   000292   E4           CLR       A
   \   000293   9F           SUBB      A,R7
   \   000294   5019         JNC       ??AF_DataRequest_23
    787              {
    788                if (apsfSendFragmented)
   \   000296   90....       MOV       DPTR,#apsfSendFragmented
   \   000299   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00029C   600D         JZ        ??AF_DataRequest_24
    789                {
    790                  stat = (*apsfSendFragmented)( &req );
   \   00029E                ; Setup parameters for indirect call
   \   00029E   7403         MOV       A,#0x3
   \   0002A0   12....       LCALL     ?XSTACK_DISP101_8
   \   0002A3   12....       LCALL     ??Subroutine40_0 & 0xFFFF
    791                }
   \                     ??CrossCallReturnLabel_67:
   \   0002A6   12....       LCALL     ?CALL_IND
   \   0002A9   800C         SJMP      ??AF_DataRequest_25
    792                else
    793                {
    794                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   0002AB   7E02         MOV       R6,#0x2
   \   0002AD   800A         SJMP      ??AF_DataRequest_26
    795                }
    796              }
    797              else
    798              {
    799                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   0002AF                ; Setup parameters for call to function APSDE_DataReq
   \   0002AF   7403         MOV       A,#0x3
   \   0002B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0002B4   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   0002B7   E9           MOV       A,R1
   \   0002B8   FE           MOV       R6,A
    800              }
    801            }
    802          
    803            /*
    804             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    805             * get added to the NWK databufs. So it will not go OTA and it will not get
    806             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    807             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    808             * message with the first in line TransSeqNumber, even on a multi message.
    809             * Also note that a reflected msg will not have its confirmation generated
    810             * here.
    811             */
    812            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    813                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_26:
   \   0002B9   740B         MOV       A,#0xb
   \   0002BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BE   E0           MOVX      A,@DPTR
   \   0002BF   6402         XRL       A,#0x2
   \   0002C1   702F         JNZ       ??AF_DataRequest_27
   \   0002C3                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002C3   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0002C6   8A..         MOV       ?V4,R2
   \   0002C8   8B..         MOV       ?V5,R3
   \   0002CA   A8..         MOV       R0,?V4
   \   0002CC   A9..         MOV       R1,?V5
   \   0002CE   7403         MOV       A,#0x3
   \   0002D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   68           XRL       A,R0
   \   0002D5   7003         JNZ       ??AF_DataRequest_28
   \   0002D7   A3           INC       DPTR
   \   0002D8   E0           MOVX      A,@DPTR
   \   0002D9   69           XRL       A,R1
   \                     ??AF_DataRequest_28:
   \   0002DA   7016         JNZ       ??AF_DataRequest_27
    814            {
    815              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002DC                ; Setup parameters for call to function afDataConfirm
   \   0002DC   EE           MOV       A,R6
   \   0002DD   FB           MOV       R3,A
   \   0002DE   7437         MOV       A,#0x37
   \   0002E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E3   12....       LCALL     ?Subroutine17 & 0xFFFF
    816            }
   \                     ??CrossCallReturnLabel_24:
   \   0002E6   FA           MOV       R2,A
   \   0002E7   85..82       MOV       DPL,?V0
   \   0002EA   85..83       MOV       DPH,?V1
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   F9           MOV       R1,A
   \   0002EF   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    817          
    818            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   0002F2   EE           MOV       A,R6
   \   0002F3   700A         JNZ       ??AF_DataRequest_29
    819            {
    820              (*transID)++;
   \   0002F5   7437         MOV       A,#0x37
   \   0002F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FA   12....       LCALL     ?Subroutine17 & 0xFFFF
    821            }
   \                     ??CrossCallReturnLabel_25:
   \   0002FD   04           INC       A
   \   0002FE   F0           MOVX      @DPTR,A
    822          
    823            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   0002FF   EE           MOV       A,R6
   \   000300   F9           MOV       R1,A
   \                     ??AF_DataRequest_3:
   \   000301   7421         MOV       A,#0x21
   \   000303   02....       LJMP      ?Subroutine3 & 0xFFFF
    824          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    825          
    826          #if defined ( ZIGBEEPRO )
    827          /*********************************************************************
    828           * @fn      AF_DataRequestSrcRtg
    829           *
    830           * @brief   Common functionality for invoking APSDE_DataReq() for both
    831           *          SendMulti and MSG-Send.
    832           *
    833           * input parameters
    834           *
    835           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    836           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    837           * @param   cID - A valid cluster ID as specified by the Profile.
    838           * @param   len - Number of bytes of data pointed to by next param.
    839           * @param  *buf - A pointer to the data bytes to send.
    840           * @param  *transID - A pointer to a byte which can be modified and which will
    841           *                    be used as the transaction sequence number of the msg.
    842           * @param   options - Valid bit mask of Tx options.
    843           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    844           * @param   relayCnt - Number of devices in the relay list
    845           * @param   pRelayList - Pointer to the relay list
    846           *
    847           * output parameters
    848           *
    849           * @param  *transID - Incremented by one if the return value is success.
    850           *
    851           * @return  afStatus_t - See previous definition of afStatus_... types.
    852           */
    853          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    854          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    855                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    856                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   89..         MOV       ?V0,R1
    858            uint8 status;
    859          
    860            /* Add the source route to the source routing table */
    861            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    862                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00001F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000022   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000025   E9           MOV       A,R1
   \   000026   F9           MOV       R1,A
    863          
    864            if( status == RTG_SUCCESS)
   \   000027   7043         JNZ       ??AF_DataRequestSrcRtg_0
    865            {
    866              /* Call AF_DataRequest to send the data */
    867              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   7414         MOV       A,#0x14
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V1,A
   \   000031   78..         MOV       R0,#?V1
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   7413         MOV       A,#0x13
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7413         MOV       A,#0x13
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004E   7413         MOV       A,#0x13
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000056   A9..         MOV       R1,?V0
   \   000058   AC..         MOV       R4,?V2
   \   00005A   AD..         MOV       R5,?V3
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000063   7409         MOV       A,#0x9
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   F9           MOV       R1,A
   \   00006A   800B         SJMP      ??AF_DataRequestSrcRtg_1
    868            }
    869            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   69           XRL       A,R1
   \   00006F   7004         JNZ       ??AF_DataRequestSrcRtg_2
    870            {
    871              /* The source route relay count is exceeding the network limit */
    872              status = afStatus_INVALID_PARAMETER;
   \   000071   7902         MOV       R1,#0x2
   \   000073   8002         SJMP      ??AF_DataRequestSrcRtg_1
    873            }
    874            else
    875            {
    876              /* The guaranteed adding entry fails due to memory failure */
    877              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000075   7910         MOV       R1,#0x10
    878            }
    879            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000077   02....       LJMP      ?Subroutine5 & 0xFFFF
    880          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    881          
    882          #endif // ZIGBEEPRO
    883          
    884          /*********************************************************************
    885           * @fn      afFindEndPointDescList
    886           *
    887           * @brief   Find the endpoint description entry from the endpoint
    888           *          number.
    889           *
    890           * @param   EndPoint - Application Endpoint to look for
    891           *
    892           * @return  the address to the endpoint/interface description entry
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    895          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    896            epList_t *epSearch;
    897          
    898            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8004         SJMP      ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   600C         JZ        ??afFindEndPointDescList_2
    899            {
    900              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   12....       LCALL     ?Subroutine17 & 0xFFFF
    901              {
    902                break;
    903              }
    904            }
   \                     ??CrossCallReturnLabel_26:
   \   00001D   69           XRL       A,R1
   \   00001E   70E9         JNZ       ??afFindEndPointDescList_1
    905          
    906            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   000020                REQUIRE ?Subroutine6
   \   000020                ; // Fall through to label ?Subroutine6
    907          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    908          
    909          /*********************************************************************
    910           * @fn      afFindEndPointDesc
    911           *
    912           * @brief   Find the endpoint description entry from the endpoint
    913           *          number.
    914           *
    915           * @param   EndPoint - Application Endpoint to look for
    916           *
    917           * @return  the address to the endpoint/interface description entry
    918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    919          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    920          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    921            epList_t *epSearch;
    922          
    923            // Look for the endpoint
    924            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
    925          
    926            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6007         JZ        ??afFindEndPointDesc_0
    927              return ( epSearch->epDesc );
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000017   8004         SJMP      ??afFindEndPointDesc_1
    928            else
    929              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001D   02....       LJMP      ?Subroutine1 & 0xFFFF
    930          }
    931          
    932          /*********************************************************************
    933           * @fn      afFindSimpleDesc
    934           *
    935           * @brief   Find the Simple Descriptor from the endpoint number.
    936           *
    937           * @param   EP - Application Endpoint to look for.
    938           *
    939           * @return  Non-zero to indicate that the descriptor memory must be freed.
    940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    941          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    942          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    943            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    944            uint8 rtrn = FALSE;
   \   000016   7A00         MOV       R2,#0x0
    945          
    946            if ( epItem )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   6030         JZ        ??afFindSimpleDesc_0
    947            {
    948              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000023   6014         JZ        ??afFindSimpleDesc_1
    949              {
    950                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000025                ; Setup parameters for indirect call
   \   000025   AA..         MOV       R2,?V0
   \   000027   7901         MOV       R1,#0x1
   \   000029   12....       LCALL     ?CALL_IND
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   EA           MOV       A,R2
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   EB           MOV       A,R3
   \   000034   F0           MOVX      @DPTR,A
    951                rtrn = TRUE;
   \   000035   7A01         MOV       R2,#0x1
   \   000037   801B         SJMP      ??afFindSimpleDesc_2
    952              }
    953              else
    954              {
    955                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000039   8C82         MOV       DPL,R4
   \   00003B   8D83         MOV       DPH,R5
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   12....       LCALL     ?Subroutine12 & 0xFFFF
    956              }
    957            }
   \                     ??CrossCallReturnLabel_12:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   E8           MOV       A,R0
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E9           MOV       A,R1
   \   00004A   8007         SJMP      ??afFindSimpleDesc_3
    958            else
    959            {
    960              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   E4           CLR       A
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   000053   F0           MOVX      @DPTR,A
    961            }
    962          
    963            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000054   EA           MOV       A,R2
   \   000055   F9           MOV       R1,A
   \   000056   02....       LJMP      ?Subroutine5 & 0xFFFF
    964          }
    965          
    966          /*********************************************************************
    967           * @fn      afGetDescCB
    968           *
    969           * @brief   Get the Descriptor callback function.
    970           *
    971           * @param   epDesc - pointer to the endpoint descriptor
    972           *
    973           * @return  function pointer or NULL
    974           */
    975          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    976          {
    977            epList_t *epSearch;
    978          
    979            // Start at the beginning
    980            epSearch = epList;
    981          
    982            // Look through the list until the end
    983            while ( epSearch )
    984            {
    985              // Is there a match?
    986              if ( epSearch->epDesc == epDesc )
    987              {
    988                return ( epSearch->pfnDescCB );
    989              }
    990              else
    991                epSearch = epSearch->nextDesc;  // Next entry
    992            }
    993          
    994            return ( (pDescCB)NULL );
    995          }
    996          
    997          /*********************************************************************
    998           * @fn      afDataReqMTU
    999           *
   1000           * @brief   Get the Data Request MTU(Max Transport Unit).
   1001           *
   1002           * @param   fields - afDataReqMTU_t
   1003           *
   1004           * @return  uint8(MTU)
   1005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1006          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
   1007          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1008            uint8 len;
   1009            uint8 hdr;
   1010          
   1011            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
   1012            {
   1013              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
   1014            }
   1015            else
   1016            {
   1017              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
   1018            }
   1019          
   1020            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   1021          
   1022            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020   02....       LJMP      ?Subroutine2 & 0xFFFF
   1023          }
   1024          
   1025          /*********************************************************************
   1026           * @fn      afGetMatch
   1027           *
   1028           * @brief   Set the allow response flag.
   1029           *
   1030           * @param   ep - Application Endpoint to look for
   1031           * @param   action - true - allow response, false - no response
   1032           *
   1033           * @return  TRUE allow responses, FALSE no response
   1034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1035          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
   1036          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1037            epList_t *epSearch;
   1038          
   1039            // Look for the endpoint
   1040            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   1041          
   1042            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6011         JZ        ??afGetMatch_0
   1043            {
   1044              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001D   5004         JNC       ??afGetMatch_0
   1045                return ( TRUE );
   \   00001F   7901         MOV       R1,#0x1
   \   000021   8002         SJMP      ??afGetMatch_1
   1046              else
   1047                return ( FALSE );
   1048            }
   1049            else
   1050              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000025                REQUIRE ?Subroutine1
   \   000025                ; // Fall through to label ?Subroutine1
   1051          }
   1052          
   1053          /*********************************************************************
   1054           * @fn      afSetMatch
   1055           *
   1056           * @brief   Set the allow response flag.
   1057           *
   1058           * @param   ep - Application Endpoint to look for
   1059           * @param   action - true - allow response, false - no response
   1060           *
   1061           * @return  TRUE if success, FALSE if endpoint not found
   1062           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1063          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1064          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   1065            epList_t *epSearch;
   1066          
   1067            // Look for the endpoint
   1068            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   1069          
   1070            if ( epSearch )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6019         JZ        ??afSetMatch_0
   1071            {
   1072              if ( action )
   \   000016   E8           MOV       A,R0
   \   000017   2408         ADD       A,#0x8
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??afSetMatch_1
   1073              {
   1074                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E0         SETB      0xE0 /* A   */.0
   \   000025   8003         SJMP      ??afSetMatch_2
   1075              }
   1076              else
   1077              {
   1078                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX      @DPTR,A
   1079              }
   1080              return ( TRUE );
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   8002         SJMP      ??afSetMatch_3
   1081            }
   1082            else
   1083              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP      ?Subroutine1
   1084          }
   1085          
   1086          /*********************************************************************
   1087           * @fn      afNumEndPoints
   1088           *
   1089           * @brief   Returns the number of endpoints defined (including 0)
   1090           *
   1091           * @param   none
   1092           *
   1093           * @return  number of endpoints
   1094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1095          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1096          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1097            epList_t *epSearch;
   1098            uint8 endpoints;
   1099          
   1100            // Start at the beginning
   1101            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine20 & 0xFFFF
   1102            endpoints = 0;
   \                     ??CrossCallReturnLabel_33:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   8008         SJMP      ??afNumEndPoints_0
   1103          
   1104            while ( epSearch )
   1105            {
   1106              endpoints++;
   \                     ??afNumEndPoints_1:
   \   00000E   09           INC       R1
   1107              epSearch = epSearch->nextDesc;
   \   00000F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   1108            }
   \                     ??CrossCallReturnLabel_112:
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \                     ??afNumEndPoints_0:
   \   000016   E582         MOV       A,DPL
   \   000018   4583         ORL       A,DPH
   \   00001A   70F2         JNZ       ??afNumEndPoints_1
   1109          
   1110            return ( endpoints );
   \   00001C   02....       LJMP      ?Subroutine6 & 0xFFFF
   1111          }
   1112          
   1113          /*********************************************************************
   1114           * @fn      afEndPoints
   1115           *
   1116           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1117           *          Use afNumEndPoints to find out how big a buffer to supply.
   1118           *
   1119           * @param   epBuf - pointer to mem used
   1120           *
   1121           * @return  void
   1122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1123          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1124          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
   1125            epList_t *epSearch;
   1126            uint8 endPoint;
   1127          
   1128            // Start at the beginning
   1129            epSearch = epList;
   \   000006   90....       MOV       DPTR,#epList
   \   000009   8025         SJMP      ??afEndPoints_0
   1130          
   1131            while ( epSearch )
   1132            {
   1133              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FD           MOV       R5,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8D82         MOV       DPL,R5
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FD           MOV       R5,A
   1134          
   1135              if ( !skipZDO || endPoint != 0 )
   \   00001B   EC           MOV       A,R4
   \   00001C   6003         JZ        ??afEndPoints_2
   \   00001E   ED           MOV       A,R5
   \   00001F   600B         JZ        ??afEndPoints_3
   1136                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000021   ED           MOV       A,R5
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
   1137          
   1138              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   1139            }
   \                     ??afEndPoints_0:
   \   000030   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000033   70D6         JNZ       ??afEndPoints_1
   1140          }
   \   000035   02....       LJMP      ?Subroutine6 & 0xFFFF
   1141          
   1142          /*********************************************************************
   1143           * @fn      afCopyAddress
   1144           *
   1145           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1146           *          from the zAddrType_t parameter.
   1147           *
   1148           * @param   epBuf - pointer to mem used
   1149           *
   1150           * @return  void
   1151           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1152          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1153          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1154            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
   1155            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6403         XRL       A,#0x3
   \   000029   7005         JNZ       ??afCopyAddress_0
   1156            {
   1157              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   8007         SJMP      ??CrossCallReturnLabel_16
   1158            }
   1159            else
   1160            {
   1161              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   12....       LCALL     ?Subroutine14 & 0xFFFF
   1162            }
   1163          
   1164            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1165            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_16:
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   1166          }
   \   000049   02....       LJMP      ?Subroutine2 & 0xFFFF
   1167          
   1168          /**************************************************************************************************
   1169           * @fn          afAPSF_ConfigGet
   1170           *
   1171           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1172           *              the specified EndPoint.
   1173           *
   1174           * input parameters
   1175           *
   1176           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1177           *
   1178           * output parameters
   1179           *
   1180           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1181           *
   1182           * @return      None.
   1183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1184          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1186            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   A8..         MOV       R0,?V0
   \   000012   A9..         MOV       R1,?V1
   1187          
   1188            if (pList == NULL)
   \   000014   E8           MOV       A,R0
   \   000015   49           ORL       A,R1
   \   000016   700D         JNZ       ??afAPSF_ConfigGet_0
   1189            {
   1190              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   7432         MOV       A,#0x32
   \   00001E   F0           MOVX      @DPTR,A
   1191              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001F   A3           INC       DPTR
   \   000020   7401         MOV       A,#0x1
   \   000022   F0           MOVX      @DPTR,A
   \   000023   8021         SJMP      ??afAPSF_ConfigGet_1
   1192            }
   1193            else
   1194            {
   1195              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   E8           MOV       A,R0
   \   000026   2406         ADD       A,#0x6
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E4           CLR       A
   \   00002B   39           ADDC      A,R1
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   75..00       MOV       ?V2,#0x0
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000036   7C02         MOV       R4,#0x2
   \   000038   7D00         MOV       R5,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   1196            }
   1197          }
   \                     ??afAPSF_ConfigGet_1:
   \   000046                REQUIRE ?Subroutine5
   \   000046                ; // Fall through to label ?Subroutine5
   1198          
   1199          /**************************************************************************************************
   1200           * @fn          afAPSF_ConfigSet
   1201           *
   1202           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1203           *              the specified EndPoint.
   1204           *
   1205           * input parameters
   1206           *
   1207           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1208           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1209           *
   1210           * output parameters
   1211           *
   1212           * None.
   1213           *
   1214           * @return      afStatus_SUCCESS for success.
   1215           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1217          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1219            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1220          
   1221            if (pList == NULL)
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   7004         JNZ       ??afAPSF_ConfigSet_0
   1222            {
   1223              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV       R1,#0x2
   \   000012   8021         SJMP      ??afAPSF_ConfigSet_1
   1224            }
   1225          
   1226            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV       ?V4,R6
   \   000016   8F..         MOV       ?V5,R7
   \   000018   75..00       MOV       ?V6,#0x0
   \   00001B   78..         MOV       R0,#?V4
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2406         ADD       A,#0x6
   \   000027   FA           MOV       R2,A
   \   000028   5001         JNC       ??afAPSF_ConfigSet_2
   \   00002A   0B           INC       R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1227            return afStatus_SUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   02....       LJMP      ?Subroutine4 & 0xFFFF
   1228          }
   1229          
   1230          /**************************************************************************************************
   1231           * @fn          afSetApplCB
   1232           *
   1233           * @brief       Sets the pointer to the Application Callback function for a
   1234           *              specific EndPoint.
   1235           *
   1236           * input parameters
   1237           *
   1238           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1239           * @param       pApplFn - A pointer to the Application Callback function.
   1240           *
   1241           * output parameters
   1242           *
   1243           * None.
   1244           *
   1245           * @return      TRUE if success, FALSE if endpoint not found
   1246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1247          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1249            if ( pApplFn != NULL )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   601F         JZ        ??afSetApplCB_0
   1250            {
   1251              epList_t *epSearch;
   1252          
   1253              // Look for the endpoint
   1254              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   1255          
   1256              if ( epSearch )
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6012         JZ        ??afSetApplCB_0
   1257              {
   1258                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   F0           MOVX      @DPTR,A
   1259          
   1260                return ( TRUE );
   \   000028   7901         MOV       R1,#0x1
   \   00002A   8002         SJMP      ??afSetApplCB_1
   1261              }
   1262            }
   1263          
   1264            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV       R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   80..         SJMP      ?Subroutine5
   1265          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1266          
   1267          /**************************************************************************************************
   1268          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     70   AF_DataRequest
        0     49   -> APSDE_DataReq
        0     49   -> NLME_GetShortAddr
        0     49   -> NLME_IsAddressBroadcast
        0     49   -> RTG_CheckRtStatus
        0     49   -> afDataConfirm
        0     49   -> afDataReqMTU
        0     49   -> afFindEndPointDescList
        0     49   -> osal_mem_free
        0     49   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     18   afAPSF_ConfigSet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      1     60   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     63   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     58   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     36   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     49   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     48   afIncomingData
        0     38   -> afBuildMSGIncoming
        0     26   -> afFindEndPointDesc
        0     26   -> afFindEndPointDescList
        0     26   -> aps_FindGroupForEndpoint
        0     26   -> osal_mem_free
      2      0   afNumEndPoints
      1     18   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      1     26   afRegisterExtended
        0     14   -> bdb_zclFindingBindingEpType
        0     14   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       5  ??Subroutine38_0
       1  ??Subroutine39_0
       6  ??Subroutine40_0
       5  ??Subroutine41_0
       6  ??Subroutine42_0
       1  ??Subroutine43_0
       4  ??Subroutine44_0
       7  ??Subroutine45_0
       6  ??Subroutine46_0
       5  ?Subroutine0
       5  ?Subroutine1
      24  ?Subroutine10
       3  ?Subroutine11
      11  ?Subroutine12
      15  ?Subroutine13
       9  ?Subroutine14
       8  ?Subroutine15
       8  ?Subroutine16
       4  ?Subroutine17
       4  ?Subroutine18
      11  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
       5  ?Subroutine21
       3  ?Subroutine22
       9  ?Subroutine23
      14  ?Subroutine24
       6  ?Subroutine25
       7  ?Subroutine26
       4  ?Subroutine27
      10  ?Subroutine28
       5  ?Subroutine29
       3  ?Subroutine3
       8  ?Subroutine30
      10  ?Subroutine31
      10  ?Subroutine32
       2  ?Subroutine33
       3  ?Subroutine34
       6  ?Subroutine35
      10  ?Subroutine36
       6  ?Subroutine37
       5  ?Subroutine4
       5  ?Subroutine5
       7  ?Subroutine6
       2  ?Subroutine7
       6  ?Subroutine8
      12  ?Subroutine9
     774  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     122  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      70  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      56  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     527  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      76  afCopyAddress
       6  afCopyAddress::?relay
      77  afDataConfirm
       6  afDataConfirm::?relay
      35  afDataReqMTU
       6  afDataReqMTU::?relay
      70  afDelete
       6  afDelete::?relay
      56  afEndPoints
       6  afEndPoints::?relay
      32  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      32  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      89  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      37  afGetMatch
       6  afGetMatch::?relay
     536  afIncomingData
       6  afIncomingData::?relay
      31  afNumEndPoints
       6  afNumEndPoints::?relay
     109  afReflectError
       6  afReflectError::?relay
      71  afRegister
       6  afRegister::?relay
     148  afRegisterExtended
       6  afRegisterExtended::?relay
      48  afSetApplCB
       6  afSetApplCB::?relay
      51  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 362 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   127 bytes of CODE     memory
 3 362 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: 2
