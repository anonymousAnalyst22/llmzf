///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              26/Sep/2023  15:48:35
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW253B.tmp
//        (D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_POLL_CONTROL -D ISR_KEYINTERRUPT -D
//        HAL_UART=TRUE -D HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=3000 -D
//        HAL_UART_DMA_RX_MAX=128 -D HAL_UART_DMA_TX_MAX=128 -lC
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_samplesw.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplesw

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_SUB
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??inject_zclData::?relay`,0203H
        FUNCTION `??zclSampleSw_HandleKeys::?relay`,0203H
        PUBLIC `??zclSampleSw_Init::?relay`
        FUNCTION `??zclSampleSw_Init::?relay`,0203H
        FUNCTION `??zclSampleSw_ProcessCommissioningStatus::?rela`,0203H
        FUNCTION `??zclSampleSw_ProcessInConfigReportRspCmd::?rel`,0203H
        FUNCTION `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`,0203H
        FUNCTION `??zclSampleSw_ProcessInReadRspCmd::?relay`,0203H
        FUNCTION `??zclSampleSw_ProcessInWriteRspCmd::?relay`,0203H
        FUNCTION `??zclSampleSw_ProcessIncomingMsg::?relay`,0203H
        FUNCTION `??zclSampleSw_ProcessUartMsgs::?relay`,0203H
        FUNCTION `??zclSampleSw_ProcessZDOMsgs::?relay`,0203H
        FUNCTION `??zclSampleSw_UartCB::?relay`,0203H
        PUBLIC `??zclSampleSw_event_loop::?relay`
        FUNCTION `??zclSampleSw_event_loop::?relay`,0203H
        PUBLIC `??zclSampleSw_handleDoorLockRsp::?relay`
        FUNCTION `??zclSampleSw_handleDoorLockRsp::?relay`,0203H
        FUNCTION `??zclSampleSw_handleGroupRsp::?relay`,0203H
        FUNCTION `??zclSampleSw_handleIdentifyQueryRsp::?relay`,0203H
        FUNCTION `??zclSampleSw_handleSceneRsp::?relay`,0203H
        PUBWEAK __Constant_1388
        FUNCTION inject_zclData,0a1203H
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC zclSampleSwSeqNum
        PUBLIC zclSampleSw_DstAddr
        FUNCTION zclSampleSw_HandleKeys,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 77, STACK
        PUBLIC zclSampleSw_Init
        FUNCTION zclSampleSw_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC zclSampleSw_NwkState
        PUBLIC zclSampleSw_OnOffSwitchActions
        PUBLIC zclSampleSw_OnOffSwitchType
        FUNCTION zclSampleSw_ProcessCommissioningStatus,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleSw_ProcessInConfigReportRspCmd,0a1203H
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 56, STACK
        FUNCTION zclSampleSw_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleSw_ProcessInReadRspCmd,0a1203H
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 56, STACK
        FUNCTION zclSampleSw_ProcessInWriteRspCmd,0a1203H
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 56, STACK
        FUNCTION zclSampleSw_ProcessIncomingMsg,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 58, STACK
        FUNCTION zclSampleSw_ProcessUartMsgs,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 93, STACK
        FUNCTION zclSampleSw_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 113, STACK
        PUBLIC zclSampleSw_TaskID
        FUNCTION zclSampleSw_UartCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclSampleSw_event_loop
        FUNCTION zclSampleSw_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zclSampleSw_handleDoorLockRsp
        FUNCTION zclSampleSw_handleDoorLockRsp,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION zclSampleSw_handleGroupRsp,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION zclSampleSw_handleIdentifyQueryRsp,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION zclSampleSw_handleSceneRsp,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
`??AddrMgrExtAddrLookup::?relay` SYMBOL "?relay", AddrMgrExtAddrLookup
AssocCount          SYMBOL "AssocCount"
`??AssocCount::?relay` SYMBOL "?relay", AssocCount
AssocGetWithShort   SYMBOL "AssocGetWithShort"
`??AssocGetWithShort::?relay` SYMBOL "?relay", AssocGetWithShort
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
`??NLME_PermitJoiningRequest::?relay` SYMBOL "?relay", NLME_PermitJoiningRequest
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_ParseSimpleDescRsp SYMBOL "ZDO_ParseSimpleDescRsp"
`??ZDO_ParseSimpleDescRsp::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtLeaveReq    SYMBOL "ZDP_MgmtLeaveReq"
`??ZDP_MgmtLeaveReq::?relay` SYMBOL "?relay", ZDP_MgmtLeaveReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
halSleepWait        SYMBOL "halSleepWait"
`??halSleepWait::?relay` SYMBOL "?relay", halSleepWait
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
sprintf             SYMBOL "sprintf"
`??sprintf::?relay` SYMBOL "?relay", sprintf
zclClosures_RegisterDoorLockCmdCallbacks SYMBOL "zclClosures_RegisterDoorLockCmdCallbacks"
`??zclClosures_RegisterDoorLockCmdCallbacks::?re` SYMBOL "?relay", zclClosures_RegisterDoorLockCmdCallbacks
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclSampleSw_ResetAttributesToDefaultValues SYMBOL "zclSampleSw_ResetAttributesToDefaultValues"
`??zclSampleSw_ResetAttributesToDefaultValues::?` SYMBOL "?relay", zclSampleSw_ResetAttributesToDefaultValues
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zclSampleSw_Init    SYMBOL "zclSampleSw_Init"
`??zclSampleSw_Init::?relay` SYMBOL "?relay", zclSampleSw_Init
zclSampleSw_event_loop SYMBOL "zclSampleSw_event_loop"
`??zclSampleSw_event_loop::?relay` SYMBOL "?relay", zclSampleSw_event_loop
zclSampleSw_handleDoorLockRsp SYMBOL "zclSampleSw_handleDoorLockRsp"
`??zclSampleSw_handleDoorLockRsp::?relay` SYMBOL "?relay", zclSampleSw_handleDoorLockRsp

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??AddrMgrExtAddrLookup::?relay`
        FUNCTION `??AddrMgrExtAddrLookup::?relay`,00H
        EXTERN `??AssocCount::?relay`
        FUNCTION `??AssocCount::?relay`,00H
        EXTERN `??AssocGetWithShort::?relay`
        FUNCTION `??AssocGetWithShort::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??NLME_PermitJoiningRequest::?relay`
        FUNCTION `??NLME_PermitJoiningRequest::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescRsp::?relay`
        FUNCTION `??ZDO_ParseSimpleDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtLeaveReq::?relay`
        FUNCTION `??ZDP_MgmtLeaveReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??halSleepWait::?relay`
        FUNCTION `??halSleepWait::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN `??sprintf::?relay`
        FUNCTION `??sprintf::?relay`,00H
        EXTERN `??zclClosures_RegisterDoorLockCmdCallbacks::?re`
        FUNCTION `??zclClosures_RegisterDoorLockCmdCallbacks::?re`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclSampleSw_ResetAttributesToDefaultValues::?`
        FUNCTION `??zclSampleSw_ResetAttributesToDefaultValues::?`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocCount
        FUNCTION AssocCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssociatedDevList
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescRsp
        FUNCTION ZDO_ParseSimpleDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtLeaveReq
        FUNCTION ZDP_MgmtLeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halSleepWait
        FUNCTION halSleepWait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 85, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_RegisterDoorLockCmdCallbacks
        FUNCTION zclClosures_RegisterDoorLockCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleSw_GPSimpleDesc
        EXTERN zclSampleSw_HASimpleDesc
        EXTERN zclSampleSw_ResetAttributesToDefaultValues
        FUNCTION zclSampleSw_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleSw_ZLLSimpleDesc
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdpExternalStateTaskID

// D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_samplesw.c
//    3   Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
//    4   Revision:       $Revision: 44460 $
//    5 
//    6   Description:    Zigbee Cluster Library - sample switch application.
//    7 
//    8 
//    9   Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
//   42 
//   43   This application is based on the common sample-application user interface. Please see the main
//   44   comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
//   45   this sample applicetion.
//   46   
//   47   Application-specific UI peripherals being used:
//   48 
//   49   - none (LED1 is currently unused by this application).
//   50 
//   51   Application-specific menu system:
//   52 
//   53     <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
//   54       Pressing / releasing [OK] will have the following functionality, depending on the value of the 
//   55       zclSampleSw_OnOffSwitchActions attribute:
//   56       - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
//   57       - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
//   58       - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
//   59 
//   60 *********************************************************************/
//   61 
//   62 #if ! defined ZCL_ON_OFF
//   63 #error ZCL_ON_OFF must be defined for this project.
//   64 #endif
//   65 
//   66 /*********************************************************************
//   67  * INCLUDES
//   68  */
//   69 #include "ZComDef.h"
//   70 #include "OSAL.h"
//   71 #include "OSAL_Memory.h"
//   72 #include "nwk_util.h"
//   73 #include "AF.h"
//   74 #include "ZDApp.h"
//   75 #include "ZDObject.h"
//   76 #include "ZDProfile.h"
//   77 #include "MT_SYS.h"
//   78 #include "AddrMgr.h"
//   79 #include "OSAL_Timers.h"
//   80 
//   81 #include "zcl.h"
//   82 #include "zcl_general.h"
//   83 #include "zcl_closures.h"
//   84 #include "zcl_ha.h"
//   85 #include "zcl_poll_control.h"
//   86 #include "zcl_samplesw.h"
//   87 #include "zcl_diagnostic.h"
//   88 
//   89 #include "onboard.h"
//   90 
//   91 /* HAL */
//   92 //#include "hal_lcd.h"
//   93 #include "hal_led.h"
//   94 #include "hal_key.h"
//   95 //#include "hal_adc.h"
//   96 
//   97 #include <stdio.h>
//   98 
//   99 #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
//  100 #include "zcl_ota.h"
//  101 #include "hal_ota.h"
//  102 #endif
//  103 
//  104 #include "bdb.h"
//  105 #include "bdb_interface.h"
//  106 
//  107 //#include <stdio.h>
//  108 
//  109 /*********************************************************************
//  110  * MACROS
//  111  */
//  112 
//  113 #define APP_TITLE "TI Sample Switch"
//  114 
//  115 /*********************************************************************
//  116  * TYPEDEFS
//  117  */
//  118 
//  119 /*********************************************************************
//  120  * GLOBAL VARIABLES
//  121  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 byte zclSampleSw_TaskID;
zclSampleSw_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 uint8 zclSampleSwSeqNum;
zclSampleSwSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
zclSampleSw_OnOffSwitchType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 uint8 zclSampleSw_OnOffSwitchActions;
zclSampleSw_OnOffSwitchActions:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  126 static uint8 af_transferId = 0;
af_transferId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 static uint8 zcl_transferId = 0;
zcl_transferId:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL FUNCTIONS
//  131  */
//  132 
//  133 /*********************************************************************
//  134  * LOCAL VARIABLES
//  135  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 afAddrType_t zclSampleSw_DstAddr;
zclSampleSw_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  137 
//  138 // Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  139 static endPointDesc_t sampleSw_HAEp =
sampleSw_HAEp:
        DATA8
        DS 7
        REQUIRE `?<Initializer for sampleSw_HAEp>`
        REQUIRE __INIT_XDATA_I
//  140 {
//  141   SAMPLESW_HA_ENDPOINT,                  // endpoint
//  142   0,
//  143   &zclSampleSw_TaskID,
//  144   &zclSampleSw_HASimpleDesc,
//  145   //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  146   (afNetworkLatencyReq_t)0            // No Network Latency req
//  147 };
//  148 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  149 static endPointDesc_t sampleSw_ZLLEp =
sampleSw_ZLLEp:
        DATA8
        DS 7
        REQUIRE `?<Initializer for sampleSw_ZLLEp>`
        REQUIRE __INIT_XDATA_I
//  150 {
//  151   SAMPLESW_ZLL_ENDPOINT,                  // endpoint
//  152   0,
//  153   &zclSampleSw_TaskID,
//  154   &zclSampleSw_ZLLSimpleDesc,
//  155   //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  156   (afNetworkLatencyReq_t)0            // No Network Latency req
//  157 };
//  158 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  159 static endPointDesc_t sampleSw_GPEp =
sampleSw_GPEp:
        DATA8
        DS 7
        REQUIRE `?<Initializer for sampleSw_GPEp>`
        REQUIRE __INIT_XDATA_I
//  160 {
//  161   SAMPLESW_GP_ENDPOINT,                  // endpoint
//  162   0,
//  163   &zclSampleSw_TaskID,
//  164   &zclSampleSw_GPSimpleDesc,
//  165   //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  166   (afNetworkLatencyReq_t)0            // No Network Latency req
//  167 };
//  168 
//  169 //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
//  170 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  171 devStates_t zclSampleSw_NwkState = DEV_INIT;
zclSampleSw_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleSw_NwkState>`
        REQUIRE __INIT_XDATA_I
//  172 
//  173 #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
//  174 #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
//  175 #endif
//  176 
//  177 #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
//  178 /*********************************************************************
//  179  * LOCAL FUNCTIONS
//  180  */
//  181 static void zclSampleSw_HandleKeys( byte shift, byte keys );
//  182 static void zclSampleSw_BasicResetCB( void );
//  183 ZStatus_t zclSampleSw_handleDoorLockRsp(zclIncoming_t *pInMsg, uint8 status);
//  184 static void zclSampleSw_handleGroupRsp(zclGroupRsp_t* zclGroupRsp);
//  185 static void zclSampleSw_handleSceneRsp(zclSceneRsp_t* zclSceneRsp);
//  186 static void zclSampleSw_handleIdentifyQueryRsp(zclIdentifyQueryRsp_t* zclIdentifyRsp);
//  187 
//  188 static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
//  189 
//  190 // Functions to process ZCL Foundation incoming Command/Response messages
//  191 static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  192 static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  193 static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  194 static uint8 zclSampleSw_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg );
//  195 static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  196 #ifdef ZCL_DISCOVER
//  197 static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  198 static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  199 static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  200 #endif
//  201 
//  202 #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
//  203 static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
//  204 #endif
//  205 
//  206 #define ZCLSAMPLESW_UART_BUF_LEN        64
//  207 #define SHORT_SYMBOL_LEN                32
//  208 
//  209 static void zclSampleSw_InitUart(void);
//  210 static void zclSampleSw_UartCB(uint8 port, uint8 event);
//  211 
//  212 //static int parse_uart_elements(char input[], char output[][SHORT_SYMBOL_LEN]);
//  213 //static void hexStr_2_Bytes(uint8* dest, char* str, int length);
//  214 static afStatus_t inject_afData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 len, uint8 *data);
//  215 static afStatus_t inject_zclData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 cmd, uint8 clusterSpecific, uint16 manuCode, uint16 len, uint8* cmdFormat);
//  216 static void zclSampleSw_ProcessZDOMsgs(zdoIncomingMsg_t *pMsg);
//  217 static uint8 zclSampleSw_ProcessUartMsgs( uint8 *uartMsg, uint8 msgLen);
//  218 static uint8 locate_ep_given_profile(uint16 profileId);
//  219 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  220 static uint8 current_cmd_type = 0;
current_cmd_type:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  221 static uint8 endpoint_cmd_rx = 0;
endpoint_cmd_rx:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  222 static uint8 node_cmd_rx = 0;
node_cmd_rx:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  223 static uint8 cluster_cmd_rx = 0;
cluster_cmd_rx:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  224 static uint8 rx_zcl_cmd_id = 0;
rx_zcl_cmd_id:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  225 
//  226 /*********************************************************************
//  227  * CONSTANTS
//  228  */
//  229 
//  230 /*********************************************************************
//  231  * REFERENCED EXTERNALS
//  232  */
//  233 extern int16 zdpExternalStateTaskID;
//  234 
//  235 /*********************************************************************
//  236  * ZCL General Profile Callback table
//  237  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  238 static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
zclSampleSw_CmdCallbacks:
        DATA8
        DS 22
        REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  239 {
//  240   NULL,               // Basic Cluster Reset command
//  241   NULL,                                   // Identify Trigger Effect command
//  242   NULL,                                   // On/Off cluster commands
//  243   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  244   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  245   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  246 #ifdef ZCL_LEVEL_CTRL
//  247   NULL,                                   // Level Control Move to Level command
//  248   NULL,                                   // Level Control Move command
//  249   NULL,                                   // Level Control Step command
//  250   NULL,                                   // Level Control Stop command
//  251 #endif
//  252   zclSampleSw_handleGroupRsp,                                   // Group Response commands
//  253   zclSampleSw_handleSceneRsp,                                   // Scene Response command
//  254 #ifdef ZCL_SCENES
//  255   NULL,                                   // Scene Store Request command
//  256   NULL,                                   // Scene Recall Request command
//  257 #endif
//  258 #ifdef ZCL_ALARMS
//  259   NULL,                                   // Alarm (Response) commands
//  260 #endif
//  261 #ifdef SE_UK_EXT
//  262   NULL,                                   // Get Event Log command
//  263   NULL,                                   // Publish Event Log command
//  264 #endif
//  265   NULL,                                   // RSSI Location command
//  266   NULL,                                   // RSSI Location Response command
//  267   zclSampleSw_handleIdentifyQueryRsp      // ZCL Identify Query Response Command
//  268 };
//  269 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  270 static zclClosures_DoorLockAppCallbacks_t zclSampleSw_ClosureCmdCallbacks = 
zclSampleSw_ClosureCmdCallbacks:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zclSampleSw_ClosureCmdCallba`
        REQUIRE __INIT_XDATA_I
//  271 {
//  272   zclSampleSw_handleDoorLockRsp
//  273 };
//  274 
//  275 /*********************************************************************
//  276  * @fn          zclSampleSw_Init
//  277  *
//  278  * @brief       Initialization function for the zclGeneral layer.
//  279  *
//  280  * @param       none
//  281  *
//  282  * @return      none
//  283  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  284 void zclSampleSw_Init( byte task_id )
zclSampleSw_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleSw_Init
        CODE
//  285 {
        FUNCALL zclSampleSw_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclClosures_RegisterDoorLockCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclClosures_RegisterDoorLockCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclClosures_RegisterDoorLockCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zclSampleSw_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, bdb_RegisterCommissioningStatusCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R1
        MOV       R6,A
//  286   zclSampleSw_TaskID = task_id;
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      @DPTR,A
//  287 
//  288   // Set destination address to indirect
//  289   zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       DPTR,#zclSampleSw_DstAddr + 8
        CLR       A
        MOVX      @DPTR,A
//  290   zclSampleSw_DstAddr.endPoint = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  291   zclSampleSw_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclSampleSw_DstAddr
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  292 
//  293   // Register the Simple Descriptor for this application
//  294   bdb_RegisterSimpleDescriptor( &zclSampleSw_HASimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleSw_HASimpleDesc & 0xff
        MOV       R3,#(zclSampleSw_HASimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  295   bdb_RegisterSimpleDescriptor( &zclSampleSw_ZLLSimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleSw_ZLLSimpleDesc & 0xff
        MOV       R3,#(zclSampleSw_ZLLSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  296   bdb_RegisterSimpleDescriptor( &zclSampleSw_GPSimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclSampleSw_GPSimpleDesc & 0xff
        MOV       R3,#(zclSampleSw_GPSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  297 
//  298   // Register the ZCL General Cluster Library callback functions
//  299   zclGeneral_RegisterCmdCallbacks( sampleSw_HAEp.endPoint, &zclSampleSw_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
        MOV       DPTR,#sampleSw_HAEp
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  300   zclGeneral_RegisterCmdCallbacks( sampleSw_ZLLEp.endPoint, &zclSampleSw_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
        MOV       DPTR,#sampleSw_ZLLEp
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  301   zclGeneral_RegisterCmdCallbacks( sampleSw_GPEp.endPoint, &zclSampleSw_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
        MOV       DPTR,#sampleSw_GPEp
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  302   zclClosures_RegisterDoorLockCmdCallbacks(sampleSw_HAEp.endPoint, &zclSampleSw_ClosureCmdCallbacks);
        ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
        MOV       R2,#zclSampleSw_ClosureCmdCallbacks & 0xff
        MOV       R3,#(zclSampleSw_ClosureCmdCallbacks >> 8) & 0xff
        MOV       DPTR,#sampleSw_HAEp
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
//  303   zclClosures_RegisterDoorLockCmdCallbacks(sampleSw_ZLLEp.endPoint, &zclSampleSw_ClosureCmdCallbacks);
        ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
        MOV       R2,#zclSampleSw_ClosureCmdCallbacks & 0xff
        MOV       R3,#(zclSampleSw_ClosureCmdCallbacks >> 8) & 0xff
        MOV       DPTR,#sampleSw_ZLLEp
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
//  304   zclClosures_RegisterDoorLockCmdCallbacks( sampleSw_GPEp.endPoint, &zclSampleSw_ClosureCmdCallbacks);
        ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
        MOV       R2,#zclSampleSw_ClosureCmdCallbacks & 0xff
        MOV       R3,#(zclSampleSw_ClosureCmdCallbacks >> 8) & 0xff
        MOV       DPTR,#sampleSw_GPEp
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
//  305 
//  306   zclSampleSw_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
        LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
//  307   
//  308   // Register the application's attribute list
//  309   // zcl_registerAttrList( SAMPLESW_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
//  310 
//  311   // Register the Application to receive the unprocessed Foundation command/response messages
//  312   zcl_registerForMsg( zclSampleSw_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  313   
//  314   // Register for all key events - This app will handle all key events
//  315   RegisterForKeys( zclSampleSw_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  316   
//  317   bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
        ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
        MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
        MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
        LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
//  318 
//  319   // Register for a test endpoint
//  320   afRegister( &sampleSw_HAEp );
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleSw_HAEp & 0xff
        MOV       R3,#(sampleSw_HAEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  321   afRegister( &sampleSw_ZLLEp);
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleSw_ZLLEp & 0xff
        MOV       R3,#(sampleSw_ZLLEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  322   afRegister( &sampleSw_GPEp);
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleSw_GPEp & 0xff
        MOV       R3,#(sampleSw_GPEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  323   
//  324 #ifdef ZCL_DIAGNOSTIC
//  325   // Register the application's callback function to read/write attribute data.
//  326   // This is only required when the attribute data format is unknown to ZCL.
//  327   zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  328 
//  329   if ( zclDiagnostic_InitStats() == ZSuccess )
//  330   {
//  331     // Here the user could start the timer to save Diagnostics to NV
//  332   }
//  333 #endif
//  334 
//  335   zdpExternalStateTaskID = zclSampleSw_TaskID;
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       DPTR,#zdpExternalStateTaskID
        LCALL     ??Subroutine64_0 & 0xFFFF
//  336 
//  337   // Form the network and initiate the coordinator
//  338   bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING);
??CrossCallReturnLabel_149:
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0xc
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  339 
//  340   // Init HAL and Uart
//  341   zclSampleSw_InitUart();
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x40
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_150:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x6
        MOVX      @DPTR,A
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`??zclSampleSw_UartCB::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??zclSampleSw_UartCB::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  342   /**
//  343    * JC NOTES: Register a list of ZDO messages
//  344    * Device_annce: Would like to know when any new devices join the network.
//  345    * Active endpoint response: Would like to know which active endpoints the target device has.
//  346    * Simple Descriptor response: Would like to know which clusters are running on the given endpoint.
//  347   **/
//  348   ZDO_RegisterForZDOMsg(task_id, Node_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x2
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  349   ZDO_RegisterForZDOMsg(task_id, Active_EP_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x5
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  350   ZDO_RegisterForZDOMsg(task_id, Simple_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x4
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  351 
//  352 }
        MOV       A,#0x1d
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  353 
//  354 /*********************************************************************
//  355  * @fn          zclSample_event_loop
//  356  *
//  357  * @brief       Event Loop Processor for zclGeneral.
//  358  *
//  359  * @param       none
//  360  *
//  361  * @return      none
//  362  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  363 uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
zclSampleSw_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleSw_event_loop
        CODE
//  364 {
        FUNCALL zclSampleSw_event_loop, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_event_loop, zclSampleSw_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_event_loop, zclSampleSw_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_event_loop, zclSampleSw_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  365   afIncomingMSGPacket_t *MSGpkt;
//  366   (void)task_id;  // Intentionally unreferenced parameter
//  367   
//  368   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleSw_event_loop_0
//  369   {
//  370     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
//  371     {
//  372       switch ( MSGpkt->hdr.event )
//  373       {
//  374         case ZDO_CB_MSG:
//  375         {
//  376           // Incomming ZDO messages which the application subscribed to (By ZDO_RegisterForZDOMsg)
//  377           zclSampleSw_ProcessZDOMsgs((zdoIncomingMsg_t *)MSGpkt);
//  378           break;
//  379         }
//  380         case ZCL_INCOMING_MSG:
//  381         {
//  382           // Incoming ZCL Foundation command/response messages
//  383           zclSampleSw_ProcessIncomingMsg((zclIncomingMsg_t *)MSGpkt);
//  384           break;
//  385         }
//  386         case KEY_CHANGE:
//  387         {
//  388           zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  389           break;
//  390         }
//  391         case ZDO_STATE_CHANGE:
//  392         {
//  393           break;
//  394         }
//  395         default:
//  396         {
//  397           break;
//  398         }
//  399       }
//  400 
//  401       // Release the memory
//  402       osal_msg_deallocate( (uint8 *)MSGpkt );
//  403     }
//  404 
//  405     // return unprocessed events
//  406     return (events ^ SYS_EVENT_MSG);
//  407   }
//  408 
//  409   // When activation Event timeout SAMPLEAPP_ACT_TIMEOUT reaches
//  410   if ( events & SAMPLEAPP_ACT_EVT )
        MOV       A,R6
        ANL       A,#0x40
        JZ        ??zclSampleSw_event_loop_1
//  411   {
//  412     uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  413     rsps[length++] = current_cmd_type;
        MOV       DPTR,#current_cmd_type
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine60_0 & 0xFFFF
//  414     rsps[length++] = ERR_CMD_TIMEOUT;
??CrossCallReturnLabel_132:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x4
        LCALL     ??Subroutine64_0 & 0xFFFF
//  415     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
??CrossCallReturnLabel_151:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x4
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,A
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  416     return ( events ^ SAMPLEAPP_ACT_EVT );
        MOV       A,R6
        XRL       A,#0x40
        MOV       R2,A
        MOV       A,R7
        SJMP      ??zclSampleSw_event_loop_2
//  417   }
??zclSampleSw_event_loop_3:
        ; Setup parameters for call to function zclSampleSw_HandleKeys
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSampleSw_HandleKeys::?relay`; Banked call to: zclSampleSw_HandleKeys
??zclSampleSw_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleSw_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??zclSampleSw_event_loop_5
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x34
        JZ        ??zclSampleSw_event_loop_6
        ADD       A,#0x74
        JZ        ??zclSampleSw_event_loop_3
        ADD       A,#-0x13
        JNZ       ??zclSampleSw_event_loop_4
        ; Setup parameters for call to function zclSampleSw_ProcessZDOMsgs
        LCALL     `??zclSampleSw_ProcessZDOMsgs::?relay`; Banked call to: zclSampleSw_ProcessZDOMsgs
        SJMP      ??zclSampleSw_event_loop_4
??zclSampleSw_event_loop_6:
        ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
        LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
        SJMP      ??zclSampleSw_event_loop_4
??zclSampleSw_event_loop_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
??zclSampleSw_event_loop_2:
        MOV       R3,A
        SJMP      ??zclSampleSw_event_loop_7
//  418   
//  419   // Rejoin
//  420 #ifdef ZDO_COORDINATOR
//  421 #else
//  422   if ( events & SAMPLEAPP_REJOIN_EVT )
//  423   {
//  424    bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING |
//  425                       BDB_COMMISSIONING_MODE_FINDING_BINDING );
//  426     
//  427     return ( events ^ SAMPLEAPP_REJOIN_EVT );
//  428   }
//  429 #endif
//  430   
//  431   // Discard unknown events
//  432   return 0;
??zclSampleSw_event_loop_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclSampleSw_event_loop_7:
        MOV       A,#0x4
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  433 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  434 
//  435 //static void hexStr_2_Bytes(uint8* dest, char* str, int length)
//  436 //{
//  437 //  int i, n;
//  438 //  for(i=0; i<length; i++)
//  439 //  {
//  440 //    sscanf(str+2*i, "%2X", &n);
//  441 //    dest[i] = (uint8)n;
//  442 //  }
//  443 //}
//  444 
//  445 /*********************************************************************
//  446  * @fn      zclSampleSw_ProcessZDOMsgs
//  447  *
//  448  * @brief   Called when this node receives a ZDO/ZDP response.
//  449  *
//  450  * @param   none
//  451  *
//  452  * @return  status
//  453  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  454 static void zclSampleSw_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
zclSampleSw_ProcessZDOMsgs:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
        CODE
//  455 {
        FUNCALL zclSampleSw_ProcessZDOMsgs, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, ZDO_ParseNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, ZDO_ParseSimpleDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessZDOMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 103
        MOV       A,#-0x67
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 113)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  456   if (AssocGetWithShort(pMsg->srcAddr.addr.shortAddr) != NULL)
        ; Setup parameters for call to function AssocGetWithShort
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  457   {
//  458     if (pMsg->clusterID == Device_annce)
        MOV       A,R6
        ADD       A,#0xc
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_145:
        MOV       A,#0x13
        XRL       A,R0
        ORL       A,R1
        JNZ       ??zclSampleSw_ProcessZDOMsgs_1
//  459     {
//  460       // Send back Device Announcement Info in format: [cmd, nwkAddr, extAddr, capabilities]
//  461       ZDO_DeviceAnnce_t Annce;
//  462       osal_memset(&Annce, 0, sizeof(ZDO_DeviceAnnce_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xb
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x5c
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  463       ZDO_ParseDeviceAnnce(pMsg, &Annce);
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV       A,#0x5c
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  464     }
//  465     else if (pMsg->clusterID == Node_Desc_rsp && node_cmd_rx)
??zclSampleSw_ProcessZDOMsgs_1:
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zclSampleSw_ProcessZDOMsgs_2
        MOV       A,#-0x80
        XRL       A,R1
??zclSampleSw_ProcessZDOMsgs_2:
        JZ        $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_3 & 0xFFFF
        MOV       DPTR,#node_cmd_rx
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  466     {
//  467       // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
//  468       if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  469         // Send back Node Descriptor response in format: [cmd, stat, nwkAddr, status, LogicalType, CapabilityFlag, ManufactuerCode]
//  470         node_cmd_rx = 0;
        MOV       DPTR,#node_cmd_rx
        CLR       A
        MOVX      @DPTR,A
//  471         ZDO_NodeDescRsp_t pNDRsp;
//  472         ZDO_ParseNodeDescRsp(pMsg, &pNDRsp);
        ; Setup parameters for call to function ZDO_ParseNodeDescRsp
        MOV       A,#0x34
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
//  473         uint16 rsps[20] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  474         rsps[length++] = CMD_JC_NODEREQ;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
        LCALL     ??Subroutine60_0 & 0xFFFF
//  475         rsps[length++] = SUCCESS;
??CrossCallReturnLabel_133:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  476         rsps[length++] = pNDRsp.nwkAddr;
        MOV       A,#0x35
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_139:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  477         rsps[length++] = pNDRsp.status;
??CrossCallReturnLabel_42:
        MOV       A,#0x34
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
//  478         rsps[length++] = pNDRsp.nodeDesc.LogicalType;
??CrossCallReturnLabel_161:
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
//  479         rsps[length++] = pNDRsp.nodeDesc.CapabilityFlags;
??CrossCallReturnLabel_162:
        MOV       A,#0x39
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
//  480         rsps[length++] = BUILD_UINT16(pNDRsp.nodeDesc.ManufacturerCode[0], pNDRsp.nodeDesc.ManufacturerCode[1]);
??CrossCallReturnLabel_163:
        MOV       A,#0x3a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x3b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       R0,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  481         HalUARTWrite(HAL_UART_PORT_0,  (uint8 *)rsps, length*2);
??CrossCallReturnLabel_43:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0xe
        MOV       R5,#0x0
        LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
//  482       }
//  483     }
//  484     else if (pMsg->clusterID == Active_EP_rsp && endpoint_cmd_rx)
??zclSampleSw_ProcessZDOMsgs_3:
        MOV       A,#0x5
        XRL       A,R0
        JNZ       ??zclSampleSw_ProcessZDOMsgs_5
        MOV       A,#-0x80
        XRL       A,R1
??zclSampleSw_ProcessZDOMsgs_5:
        JZ        $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_6 & 0xFFFF
        MOV       DPTR,#endpoint_cmd_rx
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  485     {
//  486         // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
//  487         if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  488           // Send back Node Descriptor response in format: [cmd, nwkAddr, activeEP1, activeEP2,...]
//  489           endpoint_cmd_rx = 0;
        MOV       DPTR,#endpoint_cmd_rx
        CLR       A
        MOVX      @DPTR,A
//  490           uint16 rsps[20] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  491           ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  492           rsps[length++] = CMD_JC_AEPREQ;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x3
        LCALL     ??Subroutine60_0 & 0xFFFF
//  493           rsps[length++] = SUCCESS;
??CrossCallReturnLabel_134:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       R2,#0x2
//  494           for(int i = 0; i < pRsp->cnt; i++)
        MOV       R0,A
        MOV       R1,A
        SJMP      ??zclSampleSw_ProcessZDOMsgs_7
//  495           {
//  496             rsps[length++] = pRsp->epList[i];
??zclSampleSw_ProcessZDOMsgs_8:
        MOV       A,R6
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R7
        ADDC      A,R1
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine41 & 0xFFFF
//  497           }
??CrossCallReturnLabel_88:
        MOV       A,?V0
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_152:
        INC       R2
        INC       R0
        MOV       A,R0
        JNZ       ??zclSampleSw_ProcessZDOMsgs_7
        INC       R1
??zclSampleSw_ProcessZDOMsgs_7:
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       A,R0
        SUBB      A,?V0
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??zclSampleSw_ProcessZDOMsgs_8
//  498           HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
        ; Setup parameters for call to function HalUARTWrite
        LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
//  499         }
//  500     }
//  501     else if (pMsg->clusterID == Simple_Desc_rsp && cluster_cmd_rx)
??zclSampleSw_ProcessZDOMsgs_6:
        MOV       A,#0x4
        XRL       A,R0
        JNZ       ??zclSampleSw_ProcessZDOMsgs_9
        MOV       A,#-0x80
        XRL       A,R1
??zclSampleSw_ProcessZDOMsgs_9:
        JZ        $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
        MOV       DPTR,#cluster_cmd_rx
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  502     {
//  503       // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
//  504       if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
//  505         cluster_cmd_rx = 0;
        MOV       DPTR,#cluster_cmd_rx
        CLR       A
        MOVX      @DPTR,A
//  506         ZDO_SimpleDescRsp_t simpleDescRsp;
//  507         osal_memset(&simpleDescRsp, 0, sizeof(ZDO_SimpleDescRsp_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xf
        MOV       R5,A
        MOV       R1,A
        MOV       A,#0x4d
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  508         ZDO_ParseSimpleDescRsp(pMsg, &simpleDescRsp);
        ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
        MOV       A,#0x4d
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
//  509         zAddrType_t dstAddr;
//  510         dstAddr.addr.shortAddr = simpleDescRsp.nwkAddr;
        MOV       A,#0x4e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_140:
        MOV       A,#0x44
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  511         dstAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_44:
        MOV       A,#0x4c
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  512         SimpleDescriptionFormat_t simpleDesc = simpleDescRsp.simpleDesc;
        MOV       A,#0x50
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  513 
//  514         // Send back Simple Descriptor response in format: [cmd, nwkAddr, endpoint, AppProfId, AppDeviceID, AppDevVer, cluster1, cluster2,...]
//  515         uint16 answer[20] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  516         answer[length++] = CMD_JC_CLUREQ;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x4
        LCALL     ??Subroutine60_0 & 0xFFFF
//  517         answer[length++] = SUCCESS;
??CrossCallReturnLabel_135:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  518         answer[length++] = dstAddr.addr.shortAddr;
        MOV       A,#0x44
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_141:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  519         answer[length++] = simpleDesc.EndPoint;
??CrossCallReturnLabel_45:
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
//  520         answer[length++] = simpleDescRsp.status;
??CrossCallReturnLabel_164:
        MOV       A,#0x4d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_165:
        MOV       R4,#0xa
        MOV       R5,A
//  521         if(simpleDesc.AppNumInClusters > 0)
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
//  522         {
//  523           answer[length++] = simpleDesc.AppProfId;
        MOV       A,#0x29
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_142:
        MOV       A,R4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  524           answer[length++] = simpleDesc.AppDeviceId;
??CrossCallReturnLabel_46:
        MOV       A,#0x2b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_143:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  525           answer[length++] = simpleDesc.AppDevVer;
??CrossCallReturnLabel_47:
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0xf
        MOV       R0,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_166:
        MOV       R4,#0x8
//  526           for (int i = 0; i < simpleDesc.AppNumInClusters; i++)
        MOV       R2,A
        MOV       R3,A
//  527           {
//  528             answer[length++] = simpleDesc.pAppInClusterList[i];
??zclSampleSw_ProcessZDOMsgs_10:
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        MOV       A,R1
        RLC       A
        MOV       R1,A
        MOV       A,#0x2f
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R5,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,R4
        LCALL     ?Subroutine40 & 0xFFFF
//  529           }
??CrossCallReturnLabel_86:
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        INC       R4
        INC       R2
        MOV       A,R2
        JNZ       ??zclSampleSw_ProcessZDOMsgs_11
        INC       R3
??zclSampleSw_ProcessZDOMsgs_11:
        MOV       A,R6
        MOV       R0,A
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        MOV       A,R3
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??zclSampleSw_ProcessZDOMsgs_10
        MOV       A,R4
        ADD       A,R4
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
//  530         }
//  531         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)answer, length*2);
??zclSampleSw_ProcessZDOMsgs_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  532       }
//  533     }
//  534   }
//  535   else
//  536   {
//  537     //printf("A ZDO message is received from device %X, but it is not in the association list!\n", pMsg->srcAddr.addr.shortAddr);
//  538   }
//  539 }
??zclSampleSw_ProcessZDOMsgs_0:
        MOV       A,#0x67
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 113)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  540 
//  541 /*********************************************************************
//  542  * @fn      zclSampleSw_HandleKeys
//  543  *
//  544  * @brief   Handles all key events for this device.
//  545  *
//  546  * @param   shift - true if in shift/alt.
//  547  * @param   keys - bit field for key events. Valid entries:
//  548  *                 HAL_KEY_SW_5
//  549  *                 HAL_KEY_SW_4
//  550  *                 HAL_KEY_SW_2
//  551  *                 HAL_KEY_SW_1
//  552  *
//  553  * @return  none
//  554  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  555 static void zclSampleSw_HandleKeys( byte shift, byte keys )
zclSampleSw_HandleKeys:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclSampleSw_HandleKeys
        CODE
//  556 { 
        FUNCALL zclSampleSw_HandleKeys, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 61
        MOV       A,#-0x3d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 73)
//  557   if(keys & HAL_KEY_SW_6)
        MOV       A,R2
        MOV       C,0xE0 /* A   */.5
        JC        $+5
        LJMP      ??zclSampleSw_HandleKeys_0 & 0xFFFF
//  558   {
//  559     uint8 readVal;
//  560     static uint8 writeVal = 0;
//  561     
//  562     char readValStr[30];
//  563     char writeValStr[30];
//  564     
//  565     // init USER_NV_TEST
//  566     osal_nv_item_init(USER_NV_TEST, 1, NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x4
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 73)
//  567     
//  568     // write
//  569     sprintf(writeValStr, "Write: %d", writeVal);
        ; Setup parameters for call to function sprintf
        MOV       DPTR,#??writeVal
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R4,#`?<Constant "Write: %d">` & 0xff
        MOV       R5,#(`?<Constant "Write: %d">` >> 8) & 0xff
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sprintf::?relay`; Banked call to: sprintf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 73)
//  570     osal_nv_write( USER_NV_TEST, 0, 1, &writeVal );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#??writeVal & 0xff
        MOV       ?V3,#(??writeVal >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x4
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 73)
//  571     
//  572     writeVal++;
        MOV       DPTR,#??writeVal
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  573     
//  574     // read
//  575     osal_nv_read( USER_NV_TEST, 0, 1, &readVal );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x4
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 73)
//  576     sprintf(readValStr, "Read: %d", readVal);
        ; Setup parameters for call to function sprintf
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R4,#`?<Constant "Read: %d">` & 0xff
        MOV       R5,#(`?<Constant "Read: %d">` >> 8) & 0xff
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sprintf::?relay`; Banked call to: sprintf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 73)
//  577     
//  578     // lcd show
//  579     //HalLcdWriteString(writeValStr, HAL_LCD_LINE_1);
//  580     //HalLcdWriteString(readValStr,  HAL_LCD_LINE_2);
//  581     
//  582     // uart show
//  583     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)writeValStr, osal_strlen(writeValStr));
        ; Setup parameters for call to function osal_strlen
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  584     HalUARTWrite(HAL_UART_PORT_0, "\r\n", 2);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  585     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)readValStr, osal_strlen(readValStr));
        ; Setup parameters for call to function osal_strlen
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  586     HalUARTWrite(HAL_UART_PORT_0, "\r\n", 2);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  587     
//  588     // led indication
//  589     HalLedSet(HAL_LED_1, HAL_LED_MODE_TOGGLE);
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x8
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  590   }
//  591 }
??zclSampleSw_HandleKeys_0:
        MOV       A,#0x3d
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??writeVal:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  592   
//  593 /*********************************************************************
//  594  * @fn      zclSampleSw_ProcessCommissioningStatus
//  595  *
//  596  * @brief   Callback in which the status of the commissioning process are reported
//  597  *
//  598  * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
//  599  *
//  600  * @return  none
//  601  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  602 static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
zclSampleSw_ProcessCommissioningStatus:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclSampleSw_ProcessCommissioningStatus
        CODE
//  603 {
        FUNCALL zclSampleSw_ProcessCommissioningStatus, bdb_StartCommissioning
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  604   switch(bdbCommissioningModeMsg->bdbCommissioningMode)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
//  605   {
//  606     case BDB_COMMISSIONING_FORMATION:
//  607       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
//  608       {
//  609         //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
//  610         bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
        ; Setup parameters for call to function bdb_StartCommissioning
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x2
        MOV       R1,A
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
//  611         //printf("The BDB formation operation succeeds.\n");
//  612       }
//  613       else
//  614       {
//  615         //Want to try other channels?
//  616         //try with bdb_setChannelAttribute
//  617       }
//  618     break;
//  619     case BDB_COMMISSIONING_NWK_STEERING:
//  620       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  621       {
//  622         //YOUR JOB:
//  623         //We are on the nwk, what now?
//  624       }
//  625       else
//  626       {
//  627         #ifdef ZDO_COORDINATOR
//  628         #else
//  629         osal_start_timerEx(zclSampleSw_TaskID, 
//  630                            SAMPLEAPP_REJOIN_EVT, 
//  631                            SAMPLEAPP_REJOIN_PERIOD);
//  632         #endif
//  633          
//  634         //See the possible errors for nwk steering procedure
//  635         //No suitable networks found
//  636         //Want to try other channels?
//  637         //try with bdb_setChannelAttribute
//  638       }
//  639     break;
//  640     case BDB_COMMISSIONING_FINDING_BINDING:
//  641       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
//  642       {
//  643         //printf("[BDB finding and binding] Succeed.\n");
//  644       }
//  645       else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE)
//  646       {
//  647         //printf("[BDB finding and binding] No identify query response is identified.\n");
//  648       }
//  649       else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_FAILURE)
//  650       {
//  651         //printf("[BDB finding and binding] Fail.");
//  652       }
//  653       else
//  654       {
//  655         //YOUR JOB:
//  656         //retry?, wait for user interaction?
//  657       }
//  658     break;
//  659     case BDB_COMMISSIONING_INITIALIZATION:
//  660       //Initialization notification can only be successful. Failure on initialization 
//  661       //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
//  662       
//  663       //YOUR JOB:
//  664       //We are on a network, what now?
//  665       
//  666     break;
//  667 #if ZG_BUILD_ENDDEVICE_TYPE    
//  668     case BDB_COMMISSIONING_PARENT_LOST:
//  669       if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
//  670       {
//  671         //We did recover from losing parent
//  672       }
//  673       else
//  674       {
//  675         //Parent not found, attempt to rejoin again after a fixed delay
//  676         osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
//  677       }
//  678     break;
//  679 #endif 
//  680   }
//  681 }
??zclSampleSw_ProcessCommissioningStatus_0:
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
//  682 
//  683 /*********************************************************************
//  684  * @fn      zclSampleSw_BasicResetCB
//  685  *
//  686  * @brief   Callback from the ZCL General Cluster Library
//  687  *          to set all the Basic Cluster attributes to  default values.
//  688  *
//  689  * @param   none
//  690  *
//  691  * @return  none
//  692  */
//  693 static void zclSampleSw_BasicResetCB( void )
//  694 {
//  695   zclSampleSw_ResetAttributesToDefaultValues();
//  696 }
//  697 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  698 ZStatus_t zclSampleSw_handleDoorLockRsp(zclIncoming_t *pInMsg, uint8 status)
zclSampleSw_handleDoorLockRsp:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
        CODE
//  699 {
        FUNCALL zclSampleSw_handleDoorLockRsp, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleDoorLockRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleDoorLockRsp, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        MOV       R6,A
//  700   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  701   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  702 
//  703   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_handleDoorLockRsp_0
//  704     uint16 rsps[10] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x14
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  705     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  706     rsps[length++] = SUCCESS;
??CrossCallReturnLabel_125:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  707     rsps[length++] = CMD_JC_ZCLREQ;
??CrossCallReturnLabel_29:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x7
        LCALL     ??Subroutine64_0 & 0xFFFF
//  708     rsps[length++] = status;
??CrossCallReturnLabel_153:
        MOV       A,R6
        MOV       R0,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
//  709     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
//  710     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
//  711     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  712   }
??CrossCallReturnLabel_36:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?UL_SHR
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  713   return SUCCESS;
??zclSampleSw_handleDoorLockRsp_0:
        MOV       R1,#0x0
        LJMP      ?Subroutine4 & 0xFFFF
//  714 }
          CFI EndBlock cfiBlock8
//  715 
//  716 // JC NOTE: Implemented function for handling Group Response
//  717 /*********************************************************************
//  718  * @fn      zclSampleSw_handleGroupRsp
//  719  *
//  720  * @brief   Callback from the ZCL General Cluster Library
//  721  *          to handle ZCL Group Response.
//  722  *          Callback logic:
//  723  *          (1) In sampleswInit, we registered CmdCallbacks (encoding this function) under various endpoints.
//  724  *          (2) When a ZCL Group Response comes, ZCL will call zclGeneral_ProcessInGroupsClient (Line 2039) to process the message, and return the zclGroupRsp_t result to the callback function.
//  725  *          (3) Since we previously registered the callback function as this function, eventually this function gets called.
//  726  *
//  727  * @param   none
//  728  *
//  729  * @return  none
//  730  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  731 static void zclSampleSw_handleGroupRsp(zclGroupRsp_t* zclGroupRsp)
zclSampleSw_handleGroupRsp:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclSampleSw_handleGroupRsp
        CODE
//  732 {
        FUNCALL zclSampleSw_handleGroupRsp, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleGroupRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleGroupRsp, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  733   // Calculate the elpased time and stop the Timeout watchdog
//  734   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  735   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  736 
//  737   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_handleGroupRsp_0
//  738     uint16 rsps[10] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_1`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x14
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  739     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  740     rsps[length++] = SUCCESS;
//  741     rsps[length++] = zclGroupRsp->cmdID;
//  742     rsps[length++] = zclGroupRsp->status;
//  743     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
//  744     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
//  745     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  746   }
??CrossCallReturnLabel_126:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?UL_SHR
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  747 }
??zclSampleSw_handleGroupRsp_0:
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_176:
        MOV       A,#0x8
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 56)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R1,#0x1
        MOV       A,#0x28
          CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  748 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  749 static void zclSampleSw_handleSceneRsp(zclSceneRsp_t* zclSceneRsp)
zclSampleSw_handleSceneRsp:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclSampleSw_handleSceneRsp
        CODE
//  750 {
        FUNCALL zclSampleSw_handleSceneRsp, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleSceneRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleSceneRsp, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  751   // Calculate the elpased time and stop the Timeout watchdog
//  752   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  753   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  754 
//  755   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_handleSceneRsp_0
//  756     uint16 rsps[10] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_2`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x14
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  757     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  758     rsps[length++] = SUCCESS;
//  759     rsps[length++] = zclSceneRsp->cmdID;
//  760     rsps[length++] = zclSceneRsp->status;
//  761     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
//  762     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
//  763     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  764   }
??CrossCallReturnLabel_127:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?UL_SHR
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  765 }
??zclSampleSw_handleSceneRsp_0:
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x14
        LJMP      ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zclSampleSw_handleGroupRsp
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zclSampleSw_handleGroupRsp
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_175:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x6
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV       A,#0x10
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclSampleSw_handleIdentifyQueryRsp
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x7
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function zclSampleSw_event_loop
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclSampleSw_handleDoorLockRsp
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclSampleSw_handleIdentifyQueryRsp
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        LCALL     ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_177:
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zclSampleSw_handleIdentifyQueryRsp
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
//  766 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  767 static void zclSampleSw_handleIdentifyQueryRsp(zclIdentifyQueryRsp_t* zclIdentifyRsp)
zclSampleSw_handleIdentifyQueryRsp:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function zclSampleSw_handleIdentifyQueryRsp
        CODE
//  768 {
        FUNCALL zclSampleSw_handleIdentifyQueryRsp, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleIdentifyQueryRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_handleIdentifyQueryRsp, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
//  769 
//  770   // Calculate the elpased time and stop the Timeout watchdog
//  771   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  772   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  773 
//  774   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_handleIdentifyQueryRsp_0
//  775     uint16 rsps[10] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_3`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x14
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  776     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  777     rsps[length++] = SUCCESS;
??CrossCallReturnLabel_128:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  778     rsps[length++] = 0;
??CrossCallReturnLabel_30:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  779     rsps[length++] = SUCCESS;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  780     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
        MOV       ?V0,?V4
        MOV       ?V1,?V5
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  781     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
//  782     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  783   }
??CrossCallReturnLabel_5:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  784 
//  785 }
??zclSampleSw_handleIdentifyQueryRsp_0:
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock54
//  786 
//  787 /*********************************************************************
//  788  * @fn      zclSampleSw_ProcessIncomingMsg
//  789  *
//  790  * @brief   Process ZCL Foundation incoming message
//  791  *
//  792  * @param   pInMsg - pointer to the received message
//  793  *
//  794  * @return  none
//  795  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  796 static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
zclSampleSw_ProcessIncomingMsg:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
        CODE
//  797 {
        FUNCALL zclSampleSw_ProcessIncomingMsg, zclSampleSw_ProcessInReadRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, zclSampleSw_ProcessInWriteRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, zclSampleSw_ProcessInConfigReportRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, zclSampleSw_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, zclSampleSw_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 42
        MOV       A,#-0x2a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 58)
//  798   switch ( pInMsg->zclHdr.commandID )
        MOV       A,R2
        ADD       A,#0x17
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleSw_ProcessIncomingMsg_0
        ADD       A,#-0x3
        JZ        ??zclSampleSw_ProcessIncomingMsg_1
        ADD       A,#-0x3
        JZ        ??zclSampleSw_ProcessIncomingMsg_2
        ADD       A,#-0x4
        JZ        ??zclSampleSw_ProcessIncomingMsg_3
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessIncomingMsg_4 & 0xFFFF
        ADD       A,#-0x5
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessIncomingMsg_5 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessIncomingMsg_5 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessIncomingMsg_6 & 0xFFFF
        LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
//  799   {
//  800     case ZCL_CMD_READ_RSP:
//  801       zclSampleSw_ProcessInReadRspCmd( pInMsg );
??zclSampleSw_ProcessIncomingMsg_0:
        ; Setup parameters for call to function zclSampleSw_ProcessInReadRspCmd
        LCALL     `??zclSampleSw_ProcessInReadRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInReadRspCmd
//  802       break;
        LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
//  803     case ZCL_CMD_WRITE_RSP:
//  804       zclSampleSw_ProcessInWriteRspCmd( pInMsg );
??zclSampleSw_ProcessIncomingMsg_1:
        ; Setup parameters for call to function zclSampleSw_ProcessInWriteRspCmd
        LCALL     `??zclSampleSw_ProcessInWriteRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInWriteRspCmd
//  805       break;
        LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
//  806     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  807     case ZCL_CMD_CONFIG_REPORT:
//  808       //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
//  809       break;
//  810 
//  811     case ZCL_CMD_CONFIG_REPORT_RSP:
//  812       zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
??zclSampleSw_ProcessIncomingMsg_2:
        ; Setup parameters for call to function zclSampleSw_ProcessInConfigReportRspCmd
        LCALL     `??zclSampleSw_ProcessInConfigReportRspCmd::?rel`; Banked call to: zclSampleSw_ProcessInConfigReportRspCmd
//  813       break;
        LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
//  814 
//  815     case ZCL_CMD_READ_REPORT_CFG:
//  816       //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
//  817       break;
//  818 
//  819     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  820       //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
//  821       break;
//  822 
//  823     case ZCL_CMD_REPORT:
//  824       //zclSampleSw_ProcessInReportCmd( pInMsg );
//  825       break;
//  826     case ZCL_CMD_DEFAULT_RSP:
//  827       zclSampleSw_ProcessInDefaultRspCmd(pInMsg);
??zclSampleSw_ProcessIncomingMsg_3:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_144:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV       DPTR,#rx_zcl_cmd_id
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        $+5
        LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_ProcessIncomingMsg_7
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x7
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV       R0,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_167:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?UL_SHR
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        SJMP      ??zclSampleSw_ProcessIncomingMsg_7
//  828       break;
//  829 #ifdef ZCL_DISCOVER
//  830     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  831       zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
??zclSampleSw_ProcessIncomingMsg_5:
        ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
//  832       break;
//  833 
//  834     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  835       zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
        ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
        LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
//  836       break;
        SJMP      ??zclSampleSw_ProcessIncomingMsg_7
//  837 
//  838     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  839       zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
??zclSampleSw_ProcessIncomingMsg_4:
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JNC       ??zclSampleSw_ProcessIncomingMsg_7
        INC       R2
        SJMP      ??CrossCallReturnLabel_137
//  840       break;
//  841 
//  842     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  843       zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
??zclSampleSw_ProcessIncomingMsg_6:
        LCALL     ?Subroutine31 & 0xFFFF
//  844       break;
//  845 #endif
//  846     default:
//  847       break;
//  848   }
??CrossCallReturnLabel_138:
        SJMP      ??zclSampleSw_ProcessIncomingMsg_8
??zclSampleSw_ProcessIncomingMsg_9:
        INC       R2
??zclSampleSw_ProcessIncomingMsg_8:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleSw_ProcessIncomingMsg_9
//  849   if (pInMsg->attrCmd)
??zclSampleSw_ProcessIncomingMsg_7:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleSw_ProcessIncomingMsg_10
//  850     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  851 }
??zclSampleSw_ProcessIncomingMsg_10:
        MOV       A,#0x2a
        LJMP      ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_3
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_4
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zclSampleSw_handleIdentifyQueryRsp
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_5
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0xc
        MOV       R5,#0x0
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_137
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInDiscCmdsRspCmd
          CFI Conditional ??CrossCallReturnLabel_136
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#0x0
        RET
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 93)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker78 Using cfiCommon1
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_95:
        MOVX      A,@DPTR
        MOV       R0,A
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78
//  852 
//  853 /*********************************************************************
//  854  * @fn      zclSampleSw_ProcessInReadRspCmd
//  855  *
//  856  * @brief   Process the "Profile" Read Response Command
//  857  *
//  858  * @param   pInMsg - incoming message to process
//  859  *
//  860  * @return  none
//  861  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  862 static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleSw_ProcessInReadRspCmd:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
        CODE
//  863 {
        FUNCALL zclSampleSw_ProcessInReadRspCmd, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessInReadRspCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessInReadRspCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 40
        MOV       A,#-0x28
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  864   zclReadRspCmd_t *readRspCmd;
//  865   uint8 i;
//  866 
//  867   // Calculate the elpased time and stop the Timeout watchdog
//  868   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  869   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  870 
//  871   // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
//  872   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_ProcessInReadRspCmd_0
//  873     readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine32 & 0xFFFF
//  874     uint16 rsps[20] = {0}; uint8 length = 0;
??CrossCallReturnLabel_146:
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  875     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  876     rsps[length++] = SUCCESS;
??CrossCallReturnLabel_129:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  877     rsps[length++] = ZCL_CMD_READ_RSP; // This field is not necessary, which is kept just for uninformity of response UART message formats
??CrossCallReturnLabel_31:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        LCALL     ?Subroutine22 & 0xFFFF
//  878     for (i = 0; i < readRspCmd->numAttr; i++) {
??CrossCallReturnLabel_49:
        SJMP      ??zclSampleSw_ProcessInReadRspCmd_1
//  879       rsps[length++] = readRspCmd->attrList[i].status;
??zclSampleSw_ProcessInReadRspCmd_2:
        MOV       A,R5
        MOV       B,#0x6
        LCALL     ?Subroutine42 & 0xFFFF
//  880     }
??CrossCallReturnLabel_90:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_154:
        INC       R4
        INC       R5
??zclSampleSw_ProcessInReadRspCmd_1:
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_84:
        JC        ??zclSampleSw_ProcessInReadRspCmd_2
//  881     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
        LCALL     ?Subroutine18 & 0xFFFF
//  882     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
//  883     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  884   }
??CrossCallReturnLabel_34:
        LCALL     ?UL_SHR
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  885 
//  886   return TRUE;
??zclSampleSw_ProcessInReadRspCmd_0:
        LJMP      ?Subroutine3 & 0xFFFF
//  887 }
          CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_146
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOV       A,R6
        ADD       A,#0x17
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_145
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_139
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_161
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_165
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_166
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOV       A,R0
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zclSampleSw_Init
          CFI Conditional ??CrossCallReturnLabel_149
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zclSampleSw_Init
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zclSampleSw_event_loop
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclSampleSw_handleDoorLockRsp
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_161
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_165
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_166
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        LCALL     ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_178:
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zclSampleSw_handleIdentifyQueryRsp
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133
//  888 
//  889 /*********************************************************************
//  890  * @fn      zclSampleSw_ProcessInWriteRspCmd
//  891  *
//  892  * @brief   Process the "Profile" Write Response Command
//  893  *
//  894  * @param   pInMsg - incoming message to process
//  895  *
//  896  * @return  none
//  897  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  898 static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleSw_ProcessInWriteRspCmd:
          CFI Block cfiBlock134 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInWriteRspCmd
        CODE
//  899 {
        FUNCALL zclSampleSw_ProcessInWriteRspCmd, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessInWriteRspCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessInWriteRspCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 40
        MOV       A,#-0x28
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  900   zclWriteRspCmd_t *writeRspCmd;
//  901   uint8 i;
//  902 
//  903   // Calculate the elpased time and stop the Timeout watchdog
//  904   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  905   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  906 
//  907   // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
//  908   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JZ        ??zclSampleSw_ProcessInWriteRspCmd_0
//  909     writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine32 & 0xFFFF
//  910     uint16 rsps[20] = {0}; uint8 length = 0;
??CrossCallReturnLabel_147:
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  911     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  912     rsps[length++] = SUCCESS;
??CrossCallReturnLabel_130:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  913     rsps[length++] = ZCL_CMD_WRITE_RSP; // This field is not necessary, which is kept just for uninformity of response UART message formats
??CrossCallReturnLabel_32:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        LCALL     ?Subroutine22 & 0xFFFF
//  914     for (i = 0; i < writeRspCmd->numAttr; i++) {
??CrossCallReturnLabel_50:
        SJMP      ??zclSampleSw_ProcessInWriteRspCmd_1
//  915       rsps[length++] = writeRspCmd->attrList[i].status;
??zclSampleSw_ProcessInWriteRspCmd_2:
        MOV       A,R5
        MOV       B,#0x3
        LCALL     ?Subroutine42 & 0xFFFF
//  916     }
??CrossCallReturnLabel_91:
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_155:
        INC       R4
        INC       R5
??zclSampleSw_ProcessInWriteRspCmd_1:
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_85:
        JC        ??zclSampleSw_ProcessInWriteRspCmd_2
//  917     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
        LCALL     ?Subroutine18 & 0xFFFF
//  918     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
//  919     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  920   }
??CrossCallReturnLabel_35:
        LCALL     ?UL_SHR
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  921 
//  922   return TRUE;
??zclSampleSw_ProcessInWriteRspCmd_0:
        LJMP      ?Subroutine3 & 0xFFFF
//  923 }
          CFI EndBlock cfiBlock134

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker137 Using cfiCommon1
          CFI (cfiPicker137) NoFunction
          CFI (cfiPicker137) Picker
        MUL       AB
        MOV       R6,A
        MOV       ?V0,B
        MOV       R7,?V0
        MOV       A,R0
        ADD       A,R6
        MOV       DPL,A
        MOV       A,R1
        ADDC      A,R7
        MOV       DPH,A
        INC       DPTR
        RET
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiPicker137

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond138 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOV       A,R4
        ADD       A,0xE0 /* A   */
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R2
        MOV       R2,A
        MOV       A,DPH
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R5
        CLR       C
        SUBB      A,R6
        RET
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        LCALL     ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_174:
        MOV       R4,#0x3
        MOV       R5,#0x0
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_170:
        INC       R4
        MOV       A,#0x10
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        MOV       A,R4
        ADD       A,R4
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_172:
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,#0x1
        ADD       A,R4
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_110:
        RET
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_16
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker153 Using cfiCommon1
          CFI (cfiPicker153) NoFunction
          CFI (cfiPicker153) Picker
        ADD       A,0xE0 /* A   */
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiPicker153
//  924 
//  925 /*********************************************************************
//  926  * @fn      zclSampleSw_ProcessInConfigReportRspCmd
//  927  *
//  928  * @brief   Process the "Profile" Configure Reporting Response Command
//  929  *
//  930  * @param   pInMsg - incoming message to process
//  931  *
//  932  * @return  none
//  933  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  934 static uint8 zclSampleSw_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleSw_ProcessInConfigReportRspCmd:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInConfigReportRspCmd
        CODE
//  935 {
        FUNCALL zclSampleSw_ProcessInConfigReportRspCmd, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessInConfigReportRspCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessInConfigReportRspCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 40
        MOV       A,#-0x28
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  936   zclCfgReportRspCmd_t *cfgReportRspCmd;
//  937   uint8 i;
//  938 
//  939   // Calculate the elpased time and stop the Timeout watchdog
//  940   uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  941   uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
        MOV       ?V4,#-0x78
        MOV       ?V5,#0x13
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       R0,#?V4
        MOV       R1,#?V0
        LCALL     ?L_SUB
//  942 
//  943   // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
//  944   if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        XRL       A,#0x6
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessInConfigReportRspCmd_0 & 0xFFFF
//  945     cfgReportRspCmd = (zclCfgReportRspCmd_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_148:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
//  946     uint16 rsps[20] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x28
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  947     rsps[length++] = CMD_JC_ZCLREQ;
        LCALL     ?Subroutine8 & 0xFFFF
//  948     rsps[length++] = SUCCESS;
??CrossCallReturnLabel_131:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
//  949     rsps[length++] = ZCL_CMD_WRITE_RSP; // This field is not necessary, which is kept just for uninformity of response UART message formats
??CrossCallReturnLabel_33:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV       R6,#0x3
//  950     for (i = 0; i < cfgReportRspCmd->numAttr; i++) {
        MOV       R7,#0x0
        SJMP      ??zclSampleSw_ProcessInConfigReportRspCmd_1
//  951       rsps[length++] = cfgReportRspCmd->attrList[i].status;
??zclSampleSw_ProcessInConfigReportRspCmd_2:
        MOV       A,R7
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,R2
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,?V1
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine64_0 & 0xFFFF
//  952     }
??CrossCallReturnLabel_157:
        INC       R6
        INC       R7
??zclSampleSw_ProcessInConfigReportRspCmd_1:
        MOV       A,R6
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV       R0,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R7
        CLR       C
        SUBB      A,R0
        JC        ??zclSampleSw_ProcessInConfigReportRspCmd_2
//  953     rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_168:
        INC       R6
//  954     rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       A,R6
        ADD       A,R6
        LCALL     ?Subroutine46 & 0xFFFF
//  955     HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
??CrossCallReturnLabel_171:
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,#0x1
        ADD       A,R6
        LCALL     ?Subroutine52 & 0xFFFF
//  956   }
??CrossCallReturnLabel_109:
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  957 
//  958   return TRUE;
??zclSampleSw_ProcessInConfigReportRspCmd_0:
        LJMP      ?Subroutine3 & 0xFFFF
//  959 }
          CFI EndBlock cfiBlock154

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond155 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_16
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R0
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       DPH,A
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_9
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_10
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_11
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_34
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_35
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_15
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_16
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond170 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiPicker172 Using cfiCommon1
          CFI (cfiPicker172) NoFunction
          CFI (cfiPicker172) Picker
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R0
        RET
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiPicker172
//  960 
//  961 /*********************************************************************
//  962  * @fn      zclSampleSw_ProcessInDefaultRspCmd
//  963  *
//  964  * @brief   Process the "Profile" Default Response Command
//  965  *
//  966  * @param   pInMsg - incoming message to process
//  967  *
//  968  * @return  none
//  969  */
//  970 static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  971 {
//  972   zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  973   if (defaultRspCmd->commandID != rx_zcl_cmd_id) {
//  974       // If the default response is not related with our injected ZCL command: Just skip it.
//  975   }
//  976   else {
//  977       // Calculate the elpased time and stop the Timeout watchdog
//  978       uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
//  979       uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
//  980       // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
//  981       if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
//  982         // Generate the response
//  983         // Device is notified of the Default Response command.
//  984         uint16 rsps[20] = {0}; uint8 length = 0;
//  985         rsps[length++] = CMD_JC_ZCLREQ;
//  986         rsps[length++] = SUCCESS;
//  987         rsps[length++] = defaultRspCmd->commandID;
//  988         rsps[length++] = defaultRspCmd->statusCode;
//  989         rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
//  990         rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
//  991         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
//  992       }
//  993   }
//  994   return TRUE;
//  995 }
//  996 
//  997 #ifdef ZCL_DISCOVER
//  998 /*********************************************************************
//  999  * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
// 1000  *
// 1001  * @brief   Process the Discover Commands Response Command
// 1002  *
// 1003  * @param   pInMsg - incoming message to process
// 1004  *
// 1005  * @return  none
// 1006  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1007 static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclSampleSw_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock173 Using cfiCommon0
          CFI Function zclSampleSw_ProcessInDiscCmdsRspCmd
        CODE
// 1008 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1009   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1010   uint8 i;
// 1011 
// 1012   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ??Subroutine61_0 & 0xFFFF
// 1013   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
??CrossCallReturnLabel_136:
        SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
        INC       R2
??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
// 1014   {
// 1015     // Device is notified of the result of its attribute discovery command.
// 1016   }
// 1017 
// 1018   return TRUE;
        MOV       R1,#0x1
        LJMP      ?Subroutine2 & 0xFFFF
// 1019 }
          CFI EndBlock cfiBlock173
// 1020 
// 1021 /*********************************************************************
// 1022  * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
// 1023  *
// 1024  * @brief   Process the "Profile" Discover Attributes Response Command
// 1025  *
// 1026  * @param   pInMsg - incoming message to process
// 1027  *
// 1028  * @return  none
// 1029  */
// 1030 static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1031 {
// 1032   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1033   uint8 i;
// 1034 
// 1035   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1036   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1037   {
// 1038     // Device is notified of the result of its attribute discovery command.
// 1039   }
// 1040 
// 1041   return TRUE;
// 1042 }
// 1043 
// 1044 /*********************************************************************
// 1045  * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
// 1046  *
// 1047  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1048  *
// 1049  * @param   pInMsg - incoming message to process
// 1050  *
// 1051  * @return  none
// 1052  */
// 1053 static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1054 {
// 1055   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1056   uint8 i;
// 1057 
// 1058   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1059   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1060   {
// 1061     // Device is notified of the result of its attribute discovery command.
// 1062   }
// 1063 
// 1064   return TRUE;
// 1065 }
// 1066 #endif // ZCL_DISCOVER
// 1067 
// 1068 /**
// 1069  * @fn      zclSampleSw_InitUart
// 1070  *
// 1071  * @brief   init. and open Uart
// 1072  */
// 1073 static void zclSampleSw_InitUart(void)
// 1074 {
// 1075   halUARTCfg_t uartConfig;
// 1076 
// 1077   /* UART Configuration */
// 1078   uartConfig.configured           = TRUE;
// 1079   uartConfig.baudRate             = HAL_UART_BR_115200;
// 1080   uartConfig.flowControl          = FALSE;
// 1081   uartConfig.flowControlThreshold = 0;
// 1082   uartConfig.rx.maxBufSize        = ZCLSAMPLESW_UART_BUF_LEN;
// 1083   uartConfig.tx.maxBufSize        = 0;
// 1084   uartConfig.idleTimeout          = 6;
// 1085   uartConfig.intEnable            = TRUE;
// 1086   uartConfig.callBackFunc         = zclSampleSw_UartCB;
// 1087 
// 1088   /* Start UART */
// 1089   HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
// 1090 }
// 1091 
// 1092 /*********************************************************************
// 1093  * @fn      zclSampleSw_ProcessUartMsgs
// 1094  *
// 1095  * @brief   Called when this node receives a ZDO/ZDP response.
// 1096  *
// 1097  * @param   uint8 *uartMsg
// 1098  *
// 1099  * @return  status
// 1100  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1101 static uint8 zclSampleSw_ProcessUartMsgs( uint8 *uartMsg, uint8 msgLen)
zclSampleSw_ProcessUartMsgs:
          CFI Block cfiBlock174 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
        CODE
// 1102 {
        FUNCALL zclSampleSw_ProcessUartMsgs, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, inject_zclData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 93, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 93, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 85, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 85, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, ZDP_MgmtLeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_ProcessUartMsgs, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 65
        MOV       A,#-0x41
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 1103   uint8 stat = SUCCESS;
        MOV       ?V0,#0x0
// 1104   current_cmd_type = uartMsg[0];
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV       R4,A
        MOV       DPTR,#current_cmd_type
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_54:
        ADD       A,#0x3
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R4
        JZ        ??zclSampleSw_ProcessUartMsgs_0
        DEC       A
        JZ        ??zclSampleSw_ProcessUartMsgs_1
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_5 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_7 & 0xFFFF
        LJMP      ??zclSampleSw_ProcessUartMsgs_8 & 0xFFFF
// 1105   switch (uartMsg[0])
// 1106   {
// 1107     case CMD_JC_STEER:         // RX: (uint8)CMD_JC_STEER+(uint8)period  TX: [CMD_JC_STEER,stat]
// 1108     {
// 1109       stat = NLME_PermitJoiningRequest(uartMsg[1]);
??zclSampleSw_ProcessUartMsgs_0:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       R1,A
        LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
        MOV       A,R1
        MOV       ?V0,A
// 1110       uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>_1`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1111       rsps[length++] = CMD_JC_STEER;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LJMP      ??zclSampleSw_ProcessUartMsgs_9 & 0xFFFF
// 1112       rsps[length++] = stat;
// 1113       HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1114       break;
// 1115     }
// 1116     case CMD_JC_LIST:         // RX: (uint8)CMD_JC_LIST   TX: [CMD_JC_LIST,Nwkaddr,nodeRelation]
// 1117     {
// 1118       uint16 n_asso = AssocCount(PARENT, CHILD_RFD) + AssocCount(PARENT, CHILD_RFD_RX_IDLE) +\ 
// 1119                       AssocCount(PARENT, CHILD_FFD) + AssocCount(PARENT, CHILD_FFD_RX_IDLE);
??zclSampleSw_ProcessUartMsgs_1:
        ; Setup parameters for call to function AssocCount
        MOV       R2,#0x1
        MOV       R1,#0x0
        LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R7,?V3
        ; Setup parameters for call to function AssocCount
        MOV       R2,#0x2
        MOV       R1,#0x0
        LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
        MOV       ?V3,R3
        MOV       A,?V2
        ADD       A,R2
        MOV       R6,A
        MOV       A,R7
        ADDC      A,?V3
        MOV       R7,A
        ; Setup parameters for call to function AssocCount
        MOV       R2,#0x3
        MOV       R1,#0x0
        LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
        MOV       ?V3,R3
        MOV       R1,?V3
        MOV       A,R6
        ADD       A,R2
        MOV       R6,A
        MOV       A,R7
        ADDC      A,R1
        MOV       R7,A
        ; Setup parameters for call to function AssocCount
        MOV       R2,#0x4
        MOV       R1,#0x0
        LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
        MOV       ?V3,R3
        MOV       A,R6
        ADD       A,R2
        MOV       R6,A
        MOV       A,R7
        ADDC      A,?V3
        MOV       R7,A
// 1120       
// 1121       uint16 rsps[10] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_4`
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x14
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1122       rsps[length++] = CMD_JC_LIST;
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        LCALL     ??Subroutine64_0 & 0xFFFF
// 1123       rsps[length++] = stat;
??CrossCallReturnLabel_158:
        MOV       A,#0x2f
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       ?V1,#0x2
// 1124       for (uint16 i = 0; i < n_asso; i++)
        MOV       R0,A
        MOV       R1,A
        SJMP      ??zclSampleSw_ProcessUartMsgs_10
// 1125       {
// 1126         rsps[length++] = AssociatedDevList[i].shortAddr;
??zclSampleSw_ProcessUartMsgs_11:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        MOV       B,#0x1c
        MUL       AB
        MOV       R2,A
        MOV       ?V2,B
        MOV       B,#0x1c
        MOV       A,R3
        MUL       AB
        ADD       A,?V2
        MOV       R3,A
        MOV       A,#AssociatedDevList & 0xff
        ADD       A,R2
        MOV       R2,A
        MOV       A,#(AssociatedDevList >> 8) & 0xff
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
        INC       ?V1
// 1127         rsps[length++] = AssociatedDevList[i].nodeRelation;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R2,?V1
        MOV       A,R2
        ADD       A,R2
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R2
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,R4
        LCALL     ??Subroutine64_0 & 0xFFFF
// 1128       }
??CrossCallReturnLabel_159:
        INC       ?V1
        INC       R0
        MOV       A,R0
        JNZ       ??zclSampleSw_ProcessUartMsgs_10
        INC       R1
??zclSampleSw_ProcessUartMsgs_10:
        MOV       R4,?V1
        MOV       A,R4
        ADD       A,R4
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       A,R0
        SUBB      A,R6
        MOV       A,R1
        SUBB      A,R7
        JC        ??zclSampleSw_ProcessUartMsgs_11
// 1129       HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,#0x2d
        LJMP      ??zclSampleSw_ProcessUartMsgs_12 & 0xFFFF
// 1130       break;
// 1131     }
// 1132     case CMD_JC_NODEREQ:         // RX: (uint8)CMD_JC_NODEREQ+(uint16)nwkAddr
// 1133     {
// 1134       node_cmd_rx = 1;
??zclSampleSw_ProcessUartMsgs_2:
        MOV       DPTR,#node_cmd_rx
        LCALL     ?Subroutine7 & 0xFFFF
// 1135       zAddrType_t srcAddr;
// 1136       srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
??CrossCallReturnLabel_6:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 1137       srcAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_25:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1138       stat = ZDP_NodeDescReq(&srcAddr, srcAddr.addr.shortAddr, 0);
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R1,#0x2
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       A,R1
        MOV       ?V0,A
// 1139       if (stat != afStatus_SUCCESS) {
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
// 1140         uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>_2`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1141         rsps[length++] = CMD_JC_NODEREQ;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        LJMP      ??zclSampleSw_ProcessUartMsgs_14 & 0xFFFF
// 1142         rsps[length++] = stat;
// 1143         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1144       }
// 1145       else {
// 1146         // The successfull UART response is generated in function
// 1147         // Set a timer for TIMEOUT detection
// 1148         osal_start_timerEx(zclSampleSw_TaskID, 
// 1149                            SAMPLEAPP_ACT_EVT, 
// 1150                            SAMPLEAPP_ACT_TIMEOUT);
// 1151       }
// 1152       break;
// 1153     }
// 1154     case CMD_JC_AEPREQ:         // RX: (uint8)CMD_JC_AEPREQ+(uint16)nwkAddr
// 1155     {
// 1156       endpoint_cmd_rx = 1;
??zclSampleSw_ProcessUartMsgs_3:
        MOV       DPTR,#endpoint_cmd_rx
        LCALL     ?Subroutine7 & 0xFFFF
// 1157       zAddrType_t srcAddr;
// 1158       srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
??CrossCallReturnLabel_7:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 1159       srcAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_26:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1160       stat = ZDP_ActiveEPReq(&srcAddr, srcAddr.addr.shortAddr, 0);
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R1,#0x5
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       A,R1
        MOV       ?V0,A
// 1161       if (stat != afStatus_SUCCESS) {
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
// 1162         uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>_3`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1163         rsps[length++] = CMD_JC_AEPREQ;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        SJMP      ??zclSampleSw_ProcessUartMsgs_14
// 1164         rsps[length++] = stat;
// 1165         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1166       }
// 1167       else {
// 1168         // The successfull UART response is generated in function
// 1169         // Set a timer for TIMEOUT detection
// 1170         osal_start_timerEx(zclSampleSw_TaskID, 
// 1171                            SAMPLEAPP_ACT_EVT, 
// 1172                            SAMPLEAPP_ACT_TIMEOUT);
// 1173       }
// 1174       break;
// 1175     }
// 1176     case CMD_JC_CLUREQ:         // RX: (uint8)CMD_JC_AEPREQ+(uint16)nwkAddr+(uint8)ep
// 1177     {
// 1178       cluster_cmd_rx = 1;
??zclSampleSw_ProcessUartMsgs_4:
        MOV       DPTR,#cluster_cmd_rx
        MOV       A,#0x1
        LCALL     ?Subroutine13 & 0xFFFF
// 1179       zAddrType_t srcAddr;
// 1180       srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
??CrossCallReturnLabel_19:
        MOV       R4,A
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV       A,R4
        MOV       R0,A
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 1181       srcAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_27:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1182       stat = ZDP_SimpleDescReq(&srcAddr, srcAddr.addr.shortAddr, uartMsg[3], 0);
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       A,R1
        MOV       ?V0,A
// 1183       if (stat != afStatus_SUCCESS) {
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
// 1184         uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>_4`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1185         rsps[length++] = CMD_JC_CLUREQ;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
??zclSampleSw_ProcessUartMsgs_14:
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
??zclSampleSw_ProcessUartMsgs_9:
        MOVX      @DPTR,A
// 1186         rsps[length++] = stat;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        LJMP      ??zclSampleSw_ProcessUartMsgs_15 & 0xFFFF
// 1187         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1188       }
// 1189       else {
// 1190         // The successfull UART response is generated in function
// 1191         // Set a timer for TIMEOUT detection
// 1192         osal_start_timerEx(zclSampleSw_TaskID, 
// 1193                            SAMPLEAPP_ACT_EVT, 
// 1194                            SAMPLEAPP_ACT_TIMEOUT);
// 1195       }
// 1196       break;
// 1197     }
// 1198     case CMD_JC_CMDREQ:         // RX: (uint8)CMD_JC_CMDREQ+(uint16)nwkAddr+(uint8)flag+(uint8)ep+(uint16)cid+(uint16)pid+(uint8)len+(byte *)payload
// 1199     {
// 1200       uint16 nwkAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
??zclSampleSw_ProcessUartMsgs_5:
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R4
        ADD       A,R0
        MOV       ?V2,A
        CLR       A
        ADDC      A,R1
        MOV       ?V3,A
// 1201       uint8 flag = uartMsg[3];
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V4,A
// 1202       uint8 endpoint = uartMsg[4];
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_76:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine5 & 0xFFFF
// 1203       uint16 cid = BUILD_UINT16(uartMsg[5], uartMsg[6]);
??CrossCallReturnLabel_0:
        LCALL     ?Subroutine28 & 0xFFFF
// 1204       uint16 pid = BUILD_UINT16(uartMsg[7], uartMsg[8]);
// 1205       uint8 len = uartMsg[9];
??CrossCallReturnLabel_60:
        MOV       ?V5,A
// 1206       uint8 *payload = osal_mem_alloc(len);
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 1207       for (int i = 1; i <= len; i++)
??CrossCallReturnLabel_51:
        MOV       R2,?V5
        SJMP      ??zclSampleSw_ProcessUartMsgs_16
// 1208       {
// 1209         payload[len-i] = uartMsg[msgLen-i];
??zclSampleSw_ProcessUartMsgs_17:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        MOV       R4,A
        CLR       A
        SUBB      A,R1
        MOV       R5,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine30 & 0xFFFF
// 1210       }
??CrossCallReturnLabel_68:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R4,A
        CLR       A
        SUBB      A,R1
        MOV       R5,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_69:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        INC       R0
        MOV       A,R0
        JNZ       ??zclSampleSw_ProcessUartMsgs_16
        INC       R1
??zclSampleSw_ProcessUartMsgs_16:
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??zclSampleSw_ProcessUartMsgs_17
// 1211       stat = inject_afData(nwkAddr, flag, endpoint, cid, pid, len, payload);
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V4
        JNZ       ??zclSampleSw_ProcessUartMsgs_18
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??zclSampleSw_ProcessUartMsgs_19
??zclSampleSw_ProcessUartMsgs_18:
        MOV       A,#0x1
        XRL       A,?V4
        JNZ       ??zclSampleSw_ProcessUartMsgs_20
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        SJMP      ??zclSampleSw_ProcessUartMsgs_21
??zclSampleSw_ProcessUartMsgs_20:
        MOV       A,#0x10
        XRL       A,?V4
        JNZ       ??zclSampleSw_ProcessUartMsgs_22
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
??zclSampleSw_ProcessUartMsgs_21:
        MOVX      @DPTR,A
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
??zclSampleSw_ProcessUartMsgs_19:
        MOVX      @DPTR,A
??zclSampleSw_ProcessUartMsgs_22:
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       DPTR,#af_transferId
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V2,#0x1e
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       ?V2,#af_transferId & 0xff
        MOV       ?V3,#(af_transferId >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 84)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 86)
        MOV       ?V2,R6
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 88)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 90)
        MOV       R1,#-0x80
        MOV       R4,#sampleSw_HAEp & 0xff
        MOV       R5,#(sampleSw_HAEp >> 8) & 0xff
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       A,R1
        MOV       ?V0,A
// 1212       osal_mem_free(payload);
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1213       if (stat != afStatus_SUCCESS) {
        MOV       A,?V0
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
// 1214         uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>_5`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1215         rsps[length++] = CMD_JC_CMDREQ;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x5
        LJMP      ??zclSampleSw_ProcessUartMsgs_23 & 0xFFFF
// 1216         rsps[length++] = stat;
// 1217         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1218       }
// 1219       else {
// 1220         // The successfull UART response is generated in function
// 1221         // Set a timer for TIMEOUT detection
// 1222         osal_start_timerEx(zclSampleSw_TaskID, 
// 1223                            SAMPLEAPP_ACT_EVT, 
// 1224                            SAMPLEAPP_ACT_TIMEOUT);
// 1225       }
// 1226       break;
// 1227     }
// 1228     case CMD_JC_ZCLREQ:
// 1229     {
// 1230       uint16 nwkAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
??zclSampleSw_ProcessUartMsgs_6:
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       R1,A
        MOV       A,R4
        MOV       R0,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
// 1231       uint8 flag = uartMsg[3];
??CrossCallReturnLabel_48:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine25 & 0xFFFF
// 1232       uint8 endpoint = uartMsg[4];
??CrossCallReturnLabel_53:
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_77:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine5 & 0xFFFF
// 1233       uint16 cid = BUILD_UINT16(uartMsg[5], uartMsg[6]);
??CrossCallReturnLabel_1:
        MOV       ?V4,A
        CLR       A
        ADDC      A,R1
        MOV       ?V5,A
// 1234 
// 1235       uint16 pid = BUILD_UINT16(uartMsg[7], uartMsg[8]);
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_103:
        ADD       A,#0x7
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_55:
        ADD       A,#0x8
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     ?Subroutine28 & 0xFFFF
// 1236       //sampleSw_TestEp.simpleDesc->AppProfId = pid;
// 1237       uint8 cmd = uartMsg[9]; rx_zcl_cmd_id = cmd;
??CrossCallReturnLabel_61:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPTR,#rx_zcl_cmd_id
        LCALL     ?Subroutine10 & 0xFFFF
// 1238       uint8 clusterSpecific = uartMsg[10];
??CrossCallReturnLabel_12:
        ADD       A,#0xa
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine10 & 0xFFFF
// 1239       uint16 manuCode = BUILD_UINT16(uartMsg[11], uartMsg[12]);
??CrossCallReturnLabel_13:
        ADD       A,#0xb
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_56:
        ADD       A,#0xc
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
// 1240       uint8 monitor_response_flag = uartMsg[13];
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_104:
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine10 & 0xFFFF
// 1241       uint16 len = BUILD_UINT16(uartMsg[14], uartMsg[15]);
??CrossCallReturnLabel_14:
        ADD       A,#0xe
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_57:
        ADD       A,#0xf
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       ?V2,A
        CLR       A
        ADDC      A,R1
        MOV       ?V3,A
// 1242       uint8 *payload = NULL;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1243       if (len > 0)
        MOV       A,R2
        ORL       A,?V3
        JZ        ??zclSampleSw_ProcessUartMsgs_24
// 1244       {
// 1245         payload = osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R3,?V3
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 1246         for (int i = 1; i <= len; i++)
??CrossCallReturnLabel_52:
        SJMP      ??zclSampleSw_ProcessUartMsgs_25
// 1247         {
// 1248           payload[len-i] = uartMsg[msgLen-i];
??zclSampleSw_ProcessUartMsgs_26:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        MOV       R2,A
        CLR       A
        SUBB      A,R1
        MOV       R3,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine36 & 0xFFFF
// 1249         }
??CrossCallReturnLabel_78:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        MOV       R2,A
        MOV       A,?V3
        SUBB      A,R1
        MOV       R3,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_79:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        INC       R0
        MOV       A,R0
        JNZ       ??zclSampleSw_ProcessUartMsgs_25
        INC       R1
??zclSampleSw_ProcessUartMsgs_25:
        CLR       C
        MOV       A,?V2
        SUBB      A,R0
        MOV       A,?V3
        SUBB      A,R1
        JNC       ??zclSampleSw_ProcessUartMsgs_26
// 1250       }
// 1251       stat = inject_zclData(nwkAddr, flag, endpoint, cid, pid, cmd, clusterSpecific, manuCode, len, payload);
??zclSampleSw_ProcessUartMsgs_24:
        ; Setup parameters for call to function inject_zclData
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 83)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 85)
        MOV       ?V6,R6
        MOV       ?V7,R7
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 87)
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 88)
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 91)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     `??inject_zclData::?relay`; Banked call to: inject_zclData
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       A,R1
        MOV       ?V0,A
// 1252       if (len > 0)
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??zclSampleSw_ProcessUartMsgs_27
// 1253       {
// 1254         osal_mem_free(payload);
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
// 1255       }
??CrossCallReturnLabel_66:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1256       if (stat != afStatus_SUCCESS)
??zclSampleSw_ProcessUartMsgs_27:
        MOV       A,?V0
        JZ        ??zclSampleSw_ProcessUartMsgs_28
// 1257       {
// 1258         uint16 rsps[2] = {0}; uint8 length = 0;
        MOV       DPTR,#`?<Constant {0, 0}>_6`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1259         rsps[length++] = CMD_JC_ZCLREQ;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x7
        LJMP      ??zclSampleSw_ProcessUartMsgs_23 & 0xFFFF
// 1260         rsps[length++] = stat;
// 1261         HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1262       }
// 1263       else {
// 1264         // The successfull UART response is generated in function
// 1265         // Set a timer for TIMEOUT detection
// 1266         // It really depends on whether the response is needed.
// 1267         // If not needed, the timer will not be set, and the coordinator will not send any UART response.
// 1268         if (monitor_response_flag > 0) {
??zclSampleSw_ProcessUartMsgs_28:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??zclSampleSw_ProcessUartMsgs_29 & 0xFFFF
// 1269           osal_start_timerEx(zclSampleSw_TaskID, 
// 1270                              SAMPLEAPP_ACT_EVT, 
// 1271                              SAMPLEAPP_ACT_TIMEOUT);
??zclSampleSw_ProcessUartMsgs_13:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 85)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleSw_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        LJMP      ??zclSampleSw_ProcessUartMsgs_29 & 0xFFFF
// 1272         }
// 1273       }
// 1274       break;
// 1275     }
// 1276     case CMD_JC_LEVREQ:
// 1277     {
// 1278       zAddrType_t srcAddr;
// 1279       srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
??zclSampleSw_ProcessUartMsgs_7:
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV       R2,A
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       A,R2
        MOV       R0,A
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 1280       srcAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_28:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1281       uint8 extAddr[8] = {0};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1282       stat = AddrMgrExtAddrLookup(srcAddr.addr.shortAddr, extAddr);
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
        MOV       A,R1
        MOV       ?V0,A
// 1283       if (stat == true)
        MOV       A,#0x1
        XRL       A,?V0
        JNZ       ??zclSampleSw_ProcessUartMsgs_30
// 1284       {
// 1285         stat = ZDP_MgmtLeaveReq(&srcAddr, extAddr, 0, 0, 0);
        ; Setup parameters for call to function ZDP_MgmtLeaveReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 83)
        MOV       R1,#0x0
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       A,R1
        MOV       ?V0,A
// 1286       }
// 1287       uint16 rsps[2] = {0}; uint8 length = 0;
??zclSampleSw_ProcessUartMsgs_30:
        MOV       DPTR,#`?<Constant {0, 0}>_7`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1288       rsps[length++] = CMD_JC_LEVREQ;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x8
// 1289       rsps[length++] = stat;
// 1290       HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
// 1291       break;
// 1292     }
??zclSampleSw_ProcessUartMsgs_23:
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        SJMP      ??zclSampleSw_ProcessUartMsgs_15
// 1293     default:
// 1294     {
// 1295       uint16 rsps[2] = {0}; uint8 length = 0;
??zclSampleSw_ProcessUartMsgs_8:
        MOV       DPTR,#`?<Constant {0, 0}>_8`
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 1296       rsps[length++] = uartMsg[0];
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV       R0,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        LCALL     ?Subroutine20 & 0xFFFF
// 1297       rsps[length++] = ERR_CMD_NOTFOUND;
??CrossCallReturnLabel_40:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x2
??zclSampleSw_ProcessUartMsgs_15:
        LCALL     ??Subroutine64_0 & 0xFFFF
// 1298       HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
??CrossCallReturnLabel_160:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x4
        MOV       R5,A
        MOV       A,#0x2
??zclSampleSw_ProcessUartMsgs_12:
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
// 1299       break;
// 1300     }
// 1301   }
// 1302   return stat;
??zclSampleSw_ProcessUartMsgs_29:
        MOV       R1,?V0
        MOV       A,#0x41
        LJMP      ??Subroutine59_0 & 0xFFFF
// 1303 }
          CFI EndBlock cfiBlock174

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOV       A,DPL
        ADD       A,R4
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R5
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_108:
        RET
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_83
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-4
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_6
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-4
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_7
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-4
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_119:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_123:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       DPL,R4
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker194 Using cfiCommon1
          CFI (cfiPicker194) NoFunction
          CFI (cfiPicker194) Picker
        MOV       R0,A
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_120:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 82)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 82)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 82)
          CFI Block cfiPicker198 Using cfiCommon1
          CFI (cfiPicker198) NoFunction
          CFI (cfiPicker198) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0xe
        RET
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiPicker198

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker202 Using cfiCommon1
          CFI (cfiPicker202) NoFunction
          CFI (cfiPicker202) Picker
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_112:
        RET
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiPicker202

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond203 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       ?V5,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R5
        MOV       DPL,?V5
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker208 Using cfiCommon1
          CFI (cfiPicker208) NoFunction
          CFI (cfiPicker208) Picker
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_106:
        ADD       A,#0x9
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV       R4,A
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_118:
        RET
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_83
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-6
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_6
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-6
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_7
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-6
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_58
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_59
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker218 Using cfiCommon1
          CFI (cfiPicker218) NoFunction
          CFI (cfiPicker218) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_122:
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiPicker218

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond219 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_77
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-4
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_82
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-8
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_83
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-8
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_6
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-8
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_7
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-8
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_58
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-6
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_59
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-6
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_100
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-4
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_101
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-4
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_58
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-6
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_59
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-6
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker231 Using cfiCommon1
          CFI (cfiPicker231) NoFunction
          CFI (cfiPicker231) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        RET
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiPicker231

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_100
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_58
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-4
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_59
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-4
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker236 Using cfiCommon1
          CFI (cfiPicker236) NoFunction
          CFI (cfiPicker236) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        DEC       R0
        DEC       R0
        DEC       R0
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_121:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiPicker236

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond237 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-2
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker240 Using cfiCommon1
          CFI (cfiPicker240) NoFunction
          CFI (cfiPicker240) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_105:
        RET
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiPicker240

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond241 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_60
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-4
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_61
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-4
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_55
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-4
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_56
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-4
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_57
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-4
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        RET
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker251 Using cfiCommon1
          CFI (cfiPicker251) NoFunction
          CFI (cfiPicker251) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_98:
        RET
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiPicker251

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond252 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_53
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-4
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_12
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-4
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_13
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-4
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_14
          CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond256) CFA_SP SP+-4
          CFI (cfiCond256) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker257 Using cfiCommon1
          CFI (cfiPicker257) NoFunction
          CFI (cfiPicker257) Picker
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_115:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiPicker257

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond258 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-2
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker260 Using cfiCommon1
          CFI (cfiPicker260) NoFunction
          CFI (cfiPicker260) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       R0,#0x1
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiPicker260

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond261 Using cfiCommon0
          CFI Function zclSampleSw_ProcessZDOMsgs
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-2
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-2
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker268 Using cfiCommon1
          CFI (cfiPicker268) NoFunction
          CFI (cfiPicker268) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiPicker268

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond269 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-2
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker272 Using cfiCommon1
          CFI (cfiPicker272) NoFunction
          CFI (cfiPicker272) Picker
        LCALL     ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_173:
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiPicker272

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond273 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_37
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-4
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_38
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-4
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_21
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-4
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_22
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-4
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker278 Using cfiCommon1
          CFI (cfiPicker278) NoFunction
          CFI (cfiPicker278) Picker
        MOV       A,R0
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiPicker278
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiCond279 Using cfiCommon0
          CFI Function zclSampleSw_handleDoorLockRsp
          CFI Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_126
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-4
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_127
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-4
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function zclSampleSw_handleIdentifyQueryRsp
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_128
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-4
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_129
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-4
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_130
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-4
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_131
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-4
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function zclSampleSw_event_loop
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_132
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-4
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_133
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-4
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_134
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_135
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_161
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-4
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_162
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-4
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_163
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-4
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_164
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-4
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_165
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-4
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_166
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_167
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-4
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function zclSampleSw_Init
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_149
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-4
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function zclSampleSw_Init
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_150
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-4
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function zclSampleSw_event_loop
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_151
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-4
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function zclSampleSw_ProcessZDOMsgs
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_152
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-4
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 113)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function zclSampleSw_handleDoorLockRsp
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_153
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-4
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_154
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-4
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_155
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-4
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-4
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function zclSampleSw_ProcessInConfigReportRspCmd
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_157
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-4
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_158
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-4
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_159
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-4
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_160
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-4
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function zclSampleSw_ProcessInReadRspCmd
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_49
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-4
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function zclSampleSw_ProcessInWriteRspCmd
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_50
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-4
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_41
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-4
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_39
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-4
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_40
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-4
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function zclSampleSw_handleDoorLockRsp
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_36
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond314) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond314) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-4
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_37
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-4
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_38
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-4
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function zclSampleSw_handleGroupRsp
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_21
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond317) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond317) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+-4
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function zclSampleSw_handleSceneRsp
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_22
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-4
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker319 Using cfiCommon1
          CFI (cfiPicker319) NoFunction
          CFI (cfiPicker319) Picker
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiPicker319

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond320 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond323) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond323) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond323) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond323) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond323) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond323) CFA_SP SP+-2
          CFI (cfiCond323) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker324 Using cfiCommon1
          CFI (cfiPicker324) NoFunction
          CFI (cfiPicker324) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x15
        RET
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiPicker324

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond325 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker327 Using cfiCommon1
          CFI (cfiPicker327) NoFunction
          CFI (cfiPicker327) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_92:
        RET
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiPicker327

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond328 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_19
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-4
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_6
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-4
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_7
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+-4
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker332 Using cfiCommon1
          CFI (cfiPicker332) NoFunction
          CFI (cfiPicker332) Picker
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_113:
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiPicker332

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond333 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond334) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-2
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond335) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond335) CFA_SP SP+-2
          CFI (cfiCond335) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker336 Using cfiCommon1
          CFI (cfiPicker336) NoFunction
          CFI (cfiPicker336) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        RET
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiPicker336

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond337 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-2
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        MOV       A,#0x1
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV       R2,A
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV       A,R2
        MOV       R0,A
        MOV       A,#0xd
        RET
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-2
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker342 Using cfiCommon1
          CFI (cfiPicker342) NoFunction
          CFI (cfiPicker342) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_94:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x6
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiPicker342

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond343 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_71
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-4
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_72
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-4
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_0
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-4
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_1
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+-4
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker348 Using cfiCommon1
          CFI (cfiPicker348) NoFunction
          CFI (cfiPicker348) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        RET
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiPicker348

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond349 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_18
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-4
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond351 Using cfiCommon0
          CFI (cfiCond351) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond351) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_0
          CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond351) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond351) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond351) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond351) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond351) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond351) CFA_SP SP+-4
          CFI (cfiCond351) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond352 Using cfiCommon0
          CFI (cfiCond352) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond352) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_1
          CFI (cfiCond352) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond352) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond352) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond352) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond352) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond352) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond352) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond352) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond352) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond352) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond352) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond352) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond352) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond352) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond352) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond352) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond352) CFA_SP SP+-4
          CFI (cfiCond352) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker353 Using cfiCommon1
          CFI (cfiPicker353) NoFunction
          CFI (cfiPicker353) Picker
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_114:
        RET
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiCond351
          CFI EndBlock cfiCond352
          CFI EndBlock cfiPicker353

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond354 Using cfiCommon0
          CFI Function zclSampleSw_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_19
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-6
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_6
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+-6
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond357 Using cfiCommon0
          CFI (cfiCond357) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond357) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_7
          CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond357) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond357) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond357) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond357) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond357) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond357) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond357) CFA_SP SP+-6
          CFI (cfiCond357) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_17
          CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond358) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond358) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond358) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond358) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond358) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond358) CFA_SP SP+-6
          CFI (cfiCond358) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_18
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+-6
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_0
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond360) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+-6
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_1
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-6
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker362 Using cfiCommon1
          CFI (cfiPicker362) NoFunction
          CFI (cfiPicker362) Picker
        MOVX      @DPTR,A
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_124:
        RET
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiPicker362

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond363 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_81
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond364) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+-4
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_20
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+-8
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond366 Using cfiCommon0
          CFI (cfiCond366) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond366) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_19
          CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond366) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond366) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond366) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond366) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond366) CFA_SP SP+-8
          CFI (cfiCond366) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond367 Using cfiCommon0
          CFI (cfiCond367) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond367) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_6
          CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond367) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond367) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond367) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond367) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond367) CFA_SP SP+-8
          CFI (cfiCond367) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_7
          CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond368) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond368) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond368) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond368) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond368) CFA_SP SP+-8
          CFI (cfiCond368) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_17
          CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond369) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond369) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond369) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond369) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond369) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond369) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond369) CFA_SP SP+-8
          CFI (cfiCond369) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond370 Using cfiCommon0
          CFI (cfiCond370) Function zclSampleSw_ProcessIncomingMsg
          CFI (cfiCond370) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_18
          CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond370) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond370) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond370) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond370) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond370) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond370) CFA_SP SP+-8
          CFI (cfiCond370) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond371 Using cfiCommon0
          CFI (cfiCond371) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond371) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_0
          CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond371) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond371) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond371) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond371) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond371) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond371) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond371) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond371) CFA_SP SP+-8
          CFI (cfiCond371) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond372 Using cfiCommon0
          CFI (cfiCond372) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond372) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_1
          CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond372) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond372) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond372) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond372) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond372) CFA_SP SP+-8
          CFI (cfiCond372) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker373 Using cfiCommon1
          CFI (cfiPicker373) NoFunction
          CFI (cfiPicker373) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiCond366
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiCond370
          CFI EndBlock cfiCond371
          CFI EndBlock cfiCond372
          CFI EndBlock cfiPicker373
// 1304 
// 1305 /**
// 1306  * @fn      zclSampleSw_UartCB
// 1307  *
// 1308  * @brief   Uart Callback. When there are UART messages comming in, this callback function will handle the message.
// 1309  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1310 static void zclSampleSw_UartCB(uint8 port, uint8 event)
zclSampleSw_UartCB:
          CFI Block cfiBlock374 Using cfiCommon0
          CFI Function zclSampleSw_UartCB
        CODE
// 1311 {
        FUNCALL zclSampleSw_UartCB, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, halSleepWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, zclSampleSw_ProcessUartMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleSw_UartCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 1312   uint8 rxLen = Hal_UART_RxBufLen(HAL_UART_PORT_0);
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV       R1,#0x0
        LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV       A,R2
        MOV       ?V0,A
// 1313   if(rxLen != 0)
        JNZ       ??zclSampleSw_UartCB_0
        SJMP      ??zclSampleSw_UartCB_1
// 1314   {
// 1315     while (1)
// 1316     {
// 1317       halSleepWait(50000); // Wait for 50 ms
// 1318       if (rxLen == Hal_UART_RxBufLen(HAL_UART_PORT_0))
// 1319       {
// 1320         break;
// 1321       }
// 1322       else
// 1323       {
// 1324         rxLen = Hal_UART_RxBufLen(HAL_UART_PORT_0);
??zclSampleSw_UartCB_2:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV       R1,#0x0
        LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV       A,R2
        MOV       ?V0,A
// 1325       }
??zclSampleSw_UartCB_0:
        ; Setup parameters for call to function halSleepWait
        MOV       R2,#0x50
        MOV       R3,#-0x3d
        LCALL     `??halSleepWait::?relay`; Banked call to: halSleepWait
        MOV       R6,?V0
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV       R1,#0x0
        LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV       A,R2
        XRL       A,R6
        ORL       A,R3
        JNZ       ??zclSampleSw_UartCB_2
// 1326     }
// 1327     uint8 *zclSampleSw_UartReadBuf = osal_mem_alloc(ZCLSAMPLESW_UART_BUF_LEN);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x40
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1328     if(zclSampleSw_UartReadBuf==NULL)
        MOV       A,R2
        ORL       A,?V3
        JNZ       ??zclSampleSw_UartCB_3
// 1329     {
// 1330       char *point = "[fail,memfail]";
// 1331       HalUARTWrite(HAL_UART_PORT_0, (uint8 *)point, osal_strlen(point));
        ; Setup parameters for call to function osal_strlen
        MOV       R2,#`?<Constant "[fail,memfail]">` & 0xff
        MOV       R3,#(`?<Constant "[fail,memfail]">` >> 8) & 0xff
        LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function HalUARTWrite
        MOV       R2,#`?<Constant "[fail,memfail]">` & 0xff
        MOV       R3,#(`?<Constant "[fail,memfail]">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
        SJMP      ??zclSampleSw_UartCB_1
// 1332     }
// 1333     else
// 1334     {
// 1335       osal_memset(zclSampleSw_UartReadBuf, 0, ZCLSAMPLESW_UART_BUF_LEN);
??zclSampleSw_UartCB_3:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x40
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1336       HalUARTRead(HAL_UART_PORT_0, zclSampleSw_UartReadBuf, rxLen);
        ; Setup parameters for call to function HalUARTRead
        MOV       A,R6
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       R1,#0x0
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
// 1337       zclSampleSw_ProcessUartMsgs(zclSampleSw_UartReadBuf, rxLen);
        ; Setup parameters for call to function zclSampleSw_ProcessUartMsgs
        MOV       R1,?V0
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??zclSampleSw_ProcessUartMsgs::?relay`; Banked call to: zclSampleSw_ProcessUartMsgs
// 1338       osal_mem_free(zclSampleSw_UartReadBuf); zclSampleSw_UartReadBuf = NULL;
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1339     }
// 1340   }
// 1341 }
??zclSampleSw_UartCB_1:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock374
// 1342 
// 1343 static afStatus_t inject_afData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 len, uint8 *data)
// 1344 {
// 1345 /**
// 1346  * This function is responsible for injecting applicaiton-layer data (APS + ZCL)
// 1347  * Note 1: In order to successfully send AF data, destNwkAddr must exist in the association table.
// 1348  * Note 2: The profileID (e.g., ZHA or ZDO) is configured by changing sampleSw_TestEp variable. However, it is unknown if there is any side effect, as the variable has been registered before.
// 1349  * params
// 1350     * destNwkAddr: The target device address.
// 1351     * Flag: Determine whether the packet is broadcast, groupcast, or unicast
// 1352     * ep: Target endpoint number.
// 1353     * cid: Target cluster ID.
// 1354     * pid: The profile ID.
// 1355     * len: Length of the payload.
// 1356     * data: AF-layer payload.
// 1357 **/
// 1358 	afAddrType_t dstAddr;  
// 1359   //sampleSw_TestEp.simpleDesc->AppProfId = pid;
// 1360 
// 1361 	/* Destination */
// 1362   if (flag==SAMPLEAPP_BROADCAST)
// 1363   {
// 1364     dstAddr.addrMode = afAddrBroadcast;
// 1365 	  dstAddr.addr.shortAddr = 0xffff;
// 1366   }
// 1367   else if (flag==SAMPLEAPP_GROUPCAST)
// 1368   {
// 1369     dstAddr.addrMode = afAddrGroup;
// 1370     dstAddr.addr.shortAddr = destNwkAddr;
// 1371   }
// 1372   else if (flag==SAMPLEAPP_UNICAST)
// 1373   {
// 1374 	  dstAddr.addrMode = afAddr16Bit;
// 1375 	  dstAddr.addr.shortAddr = destNwkAddr;
// 1376   }
// 1377 	dstAddr.endPoint = ep;
// 1378 	af_transferId++;
// 1379 
// 1380 	return AF_DataRequest(&dstAddr, 
// 1381 		&sampleSw_HAEp,
// 1382 		cid,    
// 1383 		len, 
// 1384 		data,    
// 1385 		&af_transferId,
// 1386 		AF_SKIP_ROUTING,
// 1387 		AF_DEFAULT_RADIUS);
// 1388 }
// 1389 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1390 static afStatus_t inject_zclData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 cmd, uint8 clusterSpecific, uint16 manuCode, uint16 len, uint8* cmdFormat)
inject_zclData:
          CFI Block cfiBlock375 Using cfiCommon0
          CFI Function inject_zclData
        CODE
// 1391 {
        FUNCALL inject_zclData, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
// 1392 /**
// 1393  * This function is responsible for injecting applicaiton-layer data (ZCL)
// 1394  * Note 1: In order to successfully send AF data, destNwkAddr must exist in the association table.
// 1395  * Note 2: The profileID (e.g., ZHA or ZDO) is configured by changing sampleSw_TestEp variable. However, it is unknown if there is any side effect, as the variable has been registered before.
// 1396  * params
// 1397     * destNwkAddr: The target device address.
// 1398     * Flag: Determine whether the packet is broadcast, groupcast, or unicast
// 1399     * ep: Target endpoint number.
// 1400     * cid: Target cluster ID.
// 1401 **/
// 1402 	afAddrType_t dstAddr;  
// 1403 
// 1404 	/* Destination */
// 1405   if (flag==SAMPLEAPP_BROADCAST)
        JNZ       ??inject_zclData_0
// 1406   {
// 1407     dstAddr.addrMode = afAddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        LCALL     ?Subroutine55 & 0xFFFF
// 1408 	  dstAddr.addr.shortAddr = 0xffff;
// 1409   }
??CrossCallReturnLabel_116:
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??inject_zclData_1
// 1410   else if (flag==SAMPLEAPP_GROUPCAST)
??inject_zclData_0:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??inject_zclData_2
// 1411   {
// 1412     dstAddr.addrMode = afAddrGroup;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        SJMP      ??inject_zclData_3
// 1413     dstAddr.addr.shortAddr = destNwkAddr;
// 1414   }
// 1415   else if (flag==SAMPLEAPP_UNICAST)
??inject_zclData_2:
        MOV       A,#0x10
        XRL       A,R6
        JNZ       ??inject_zclData_4
// 1416   {
// 1417 	  dstAddr.addrMode = afAddr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
// 1418 	  dstAddr.addr.shortAddr = destNwkAddr;
// 1419   }
??inject_zclData_3:
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
??inject_zclData_1:
        MOVX      @DPTR,A
// 1420 	dstAddr.endPoint = ep;
??inject_zclData_4:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
// 1421 	zcl_transferId++;
        MOV       DPTR,#zcl_transferId
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
// 1422 
// 1423   uint8 sep = locate_ep_given_profile(pid);
        MOV       R1,#0x0
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for inject_zclData>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        260
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??inject_zclData_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        41440
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??inject_zclData_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        49246
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??inject_zclData_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??inject_zclData_8
        CODE
??inject_zclData_6:
        MOV       R1,#0xa
        SJMP      ??inject_zclData_8
??inject_zclData_7:
        MOV       R1,#0x9
        SJMP      ??inject_zclData_8
??inject_zclData_5:
        MOV       R1,#0x8
// 1424 
// 1425   ZStatus_t cmd_stat = zcl_SendCommand(sep,
// 1426     &dstAddr,
// 1427     cid,
// 1428     cmd,
// 1429     clusterSpecific,
// 1430     0,
// 1431     0,
// 1432     manuCode,
// 1433     zcl_transferId,
// 1434     len,
// 1435     cmdFormat);
// 1436 
// 1437   return cmd_stat;
??inject_zclData_8:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       DPTR,#zcl_transferId
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0xc
        LJMP      ?Subroutine1 & 0xFFFF
// 1438 
// 1439 }
          CFI EndBlock cfiBlock375

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond376 Using cfiCommon0
          CFI Function zclSampleSw_ProcessUartMsgs
          CFI Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond377 Using cfiCommon0
          CFI (cfiCond377) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond377) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_53
          CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond377) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond377) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond377) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond377) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond377) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond377) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond377) CFA_SP SP+-6
          CFI (cfiCond377) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond378 Using cfiCommon0
          CFI (cfiCond378) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond378) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_12
          CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond378) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond378) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond378) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond378) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond378) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond378) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond378) CFA_SP SP+-6
          CFI (cfiCond378) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond379 Using cfiCommon0
          CFI (cfiCond379) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond379) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_13
          CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond379) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond379) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond379) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond379) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond379) CFA_SP SP+-6
          CFI (cfiCond379) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond380 Using cfiCommon0
          CFI (cfiCond380) Function zclSampleSw_ProcessUartMsgs
          CFI (cfiCond380) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_14
          CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond380) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond380) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond380) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond380) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond380) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond380) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond380) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond380) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond380) CFA_SP SP+-6
          CFI (cfiCond380) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond381 Using cfiCommon0
          CFI (cfiCond381) Function inject_zclData
          CFI (cfiCond381) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond381) CFA_SP SP+-2
          CFI (cfiCond381) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond382 Using cfiCommon0
          CFI (cfiCond382) Function inject_zclData
          CFI (cfiCond382) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond382) CFA_SP SP+-2
          CFI (cfiCond382) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker383 Using cfiCommon1
          CFI (cfiPicker383) NoFunction
          CFI (cfiPicker383) Picker
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond376
          CFI EndBlock cfiCond377
          CFI EndBlock cfiCond378
          CFI EndBlock cfiCond379
          CFI EndBlock cfiCond380
          CFI EndBlock cfiCond381
          CFI EndBlock cfiCond382
          CFI EndBlock cfiPicker383

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleSw_OnOffSwitchType>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleSw_HAEp>`:
        DATA8
        DB 8
        DB 0
        DATA16
        DW zclSampleSw_TaskID
        DW zclSampleSw_HASimpleDesc
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleSw_ZLLEp>`:
        DATA8
        DB 9
        DB 0
        DATA16
        DW zclSampleSw_TaskID
        DW zclSampleSw_ZLLSimpleDesc
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleSw_GPEp>`:
        DATA8
        DB 10
        DB 0
        DATA16
        DW zclSampleSw_TaskID
        DW zclSampleSw_GPSimpleDesc
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleSw_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleSw_CmdCallbacks>`:
        DATA16
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleSw_handleGroupRsp::?relay`
        DW `??zclSampleSw_handleSceneRsp::?relay`
        DW 0H
        DW 0H
        DW `??zclSampleSw_handleIdentifyQueryRsp::?relay`

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleSw_ClosureCmdCallba`:
        DATA16
        DW `??zclSampleSw_handleDoorLockRsp::?relay`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessCommissioningStatus::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessCommissioningStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_handleDoorLockRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_handleDoorLockRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_handleGroupRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_handleGroupRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_handleSceneRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_handleSceneRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_handleIdentifyQueryRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_handleIdentifyQueryRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessIncomingMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessInReadRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessInWriteRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessInWriteRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessInConfigReportRspCmd::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessInConfigReportRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessInDiscCmdsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_ProcessUartMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_ProcessUartMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleSw_UartCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleSw_UartCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??inject_zclData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    inject_zclData

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Write: %d">`:
        DB "Write: %d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Read: %d">`:
        DB "Read: %d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_1`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_2`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_3`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_1`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_4`:
        DATA16
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_2`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_3`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_4`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_5`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_6`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_7`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0, 0}>_8`:
        DATA16
        DW 0
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "[fail,memfail]">`:
        DB "[fail,memfail]"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        END
// 1440 
// 1441 static uint8 locate_ep_given_profile(uint16 profileId)
// 1442 {
// 1443   uint8 ep = 0;
// 1444   switch (profileId)
// 1445   {
// 1446     case ZCL_HA_PROFILE_ID:
// 1447     {
// 1448       ep = SAMPLESW_HA_ENDPOINT;
// 1449       break;
// 1450     }
// 1451     case ZCL_ZLL_PROFILE_ID:
// 1452     {
// 1453       ep = SAMPLESW_ZLL_ENDPOINT;
// 1454       break;
// 1455     }
// 1456     case ZCL_GP_PROFILE_ID:
// 1457     {
// 1458       ep = SAMPLESW_GP_ENDPOINT;
// 1459       break;
// 1460     }
// 1461     default:
// 1462     {
// 1463       ep = 0;
// 1464       break;
// 1465     }
// 1466   }
// 1467   return ep;
// 1468 }
// 
// 5 397 bytes in segment BANKED_CODE
//   102 bytes in segment BANK_RELAYS
//    47 bytes in segment XDATA_I
//    47 bytes in segment XDATA_ID
//   465 bytes in segment XDATA_ROM_C
//    23 bytes in segment XDATA_Z
// 
//   149 bytes of CODE     memory
//   461 bytes of CONST    memory (+ 4 bytes shared)
// 5 397 bytes of HUGECODE memory
//    70 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
