###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               26/Sep/2023  15:48:35
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW253B.tmp
#        (D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_POLL_CONTROL -D ISR_KEYINTERRUPT -D
#        HAL_UART=TRUE -D HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=3000 -D
#        HAL_UART_DMA_RX_MAX=128 -D HAL_UART_DMA_TX_MAX=128 -lC
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\fuzzing-coordinator\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ï¿½AS ISï¿½ WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "OSAL_Memory.h"
     72          #include "nwk_util.h"
     73          #include "AF.h"
     74          #include "ZDApp.h"
     75          #include "ZDObject.h"
     76          #include "ZDProfile.h"
     77          #include "MT_SYS.h"
     78          #include "AddrMgr.h"
     79          #include "OSAL_Timers.h"
     80          
     81          #include "zcl.h"
     82          #include "zcl_general.h"
     83          #include "zcl_closures.h"
     84          #include "zcl_ha.h"
     85          #include "zcl_poll_control.h"
     86          #include "zcl_samplesw.h"
     87          #include "zcl_diagnostic.h"
     88          
     89          #include "onboard.h"
     90          
     91          /* HAL */
     92          //#include "hal_lcd.h"
     93          #include "hal_led.h"
     94          #include "hal_key.h"
     95          //#include "hal_adc.h"
     96          
     97          #include <stdio.h>
     98          
     99          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    100          #include "zcl_ota.h"
    101          #include "hal_ota.h"
    102          #endif
    103          
    104          #include "bdb.h"
    105          #include "bdb_interface.h"
    106          
    107          //#include <stdio.h>
    108          
    109          /*********************************************************************
    110           * MACROS
    111           */
    112          
    113          #define APP_TITLE "TI Sample Switch"
    114          
    115          /*********************************************************************
    116           * TYPEDEFS
    117           */
    118          
    119          /*********************************************************************
    120           * GLOBAL VARIABLES
    121           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          static uint8 af_transferId = 0;
   \                     af_transferId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          static uint8 zcl_transferId = 0;
   \                     zcl_transferId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * GLOBAL FUNCTIONS
    131           */
    132          
    133          /*********************************************************************
    134           * LOCAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    137          
    138          // Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    139          static endPointDesc_t sampleSw_HAEp =
   \                     sampleSw_HAEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_HAEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    140          {
    141            SAMPLESW_HA_ENDPOINT,                  // endpoint
    142            0,
    143            &zclSampleSw_TaskID,
    144            &zclSampleSw_HASimpleDesc,
    145            //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    146            (afNetworkLatencyReq_t)0            // No Network Latency req
    147          };
    148          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    149          static endPointDesc_t sampleSw_ZLLEp =
   \                     sampleSw_ZLLEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_ZLLEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    150          {
    151            SAMPLESW_ZLL_ENDPOINT,                  // endpoint
    152            0,
    153            &zclSampleSw_TaskID,
    154            &zclSampleSw_ZLLSimpleDesc,
    155            //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    156            (afNetworkLatencyReq_t)0            // No Network Latency req
    157          };
    158          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          static endPointDesc_t sampleSw_GPEp =
   \                     sampleSw_GPEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_GPEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    160          {
    161            SAMPLESW_GP_ENDPOINT,                  // endpoint
    162            0,
    163            &zclSampleSw_TaskID,
    164            &zclSampleSw_GPSimpleDesc,
    165            //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    166            (afNetworkLatencyReq_t)0            // No Network Latency req
    167          };
    168          
    169          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    170          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    171          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    172          
    173          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    174          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    175          #endif
    176          
    177          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    178          /*********************************************************************
    179           * LOCAL FUNCTIONS
    180           */
    181          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    182          static void zclSampleSw_BasicResetCB( void );
    183          ZStatus_t zclSampleSw_handleDoorLockRsp(zclIncoming_t *pInMsg, uint8 status);
    184          static void zclSampleSw_handleGroupRsp(zclGroupRsp_t* zclGroupRsp);
    185          static void zclSampleSw_handleSceneRsp(zclSceneRsp_t* zclSceneRsp);
    186          static void zclSampleSw_handleIdentifyQueryRsp(zclIdentifyQueryRsp_t* zclIdentifyRsp);
    187          
    188          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    189          
    190          // Functions to process ZCL Foundation incoming Command/Response messages
    191          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    192          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    193          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    194          static uint8 zclSampleSw_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg );
    195          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    196          #ifdef ZCL_DISCOVER
    197          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    198          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    199          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    200          #endif
    201          
    202          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    203          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    204          #endif
    205          
    206          #define ZCLSAMPLESW_UART_BUF_LEN        64
    207          #define SHORT_SYMBOL_LEN                32
    208          
    209          static void zclSampleSw_InitUart(void);
    210          static void zclSampleSw_UartCB(uint8 port, uint8 event);
    211          
    212          //static int parse_uart_elements(char input[], char output[][SHORT_SYMBOL_LEN]);
    213          //static void hexStr_2_Bytes(uint8* dest, char* str, int length);
    214          static afStatus_t inject_afData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 len, uint8 *data);
    215          static afStatus_t inject_zclData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 cmd, uint8 clusterSpecific, uint16 manuCode, uint16 len, uint8* cmdFormat);
    216          static void zclSampleSw_ProcessZDOMsgs(zdoIncomingMsg_t *pMsg);
    217          static uint8 zclSampleSw_ProcessUartMsgs( uint8 *uartMsg, uint8 msgLen);
    218          static uint8 locate_ep_given_profile(uint16 profileId);
    219          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint8 current_cmd_type = 0;
   \                     current_cmd_type:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static uint8 endpoint_cmd_rx = 0;
   \                     endpoint_cmd_rx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint8 node_cmd_rx = 0;
   \                     node_cmd_rx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223          static uint8 cluster_cmd_rx = 0;
   \                     cluster_cmd_rx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static uint8 rx_zcl_cmd_id = 0;
   \                     rx_zcl_cmd_id:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    225          
    226          /*********************************************************************
    227           * CONSTANTS
    228           */
    229          
    230          /*********************************************************************
    231           * REFERENCED EXTERNALS
    232           */
    233          extern int16 zdpExternalStateTaskID;
    234          
    235          /*********************************************************************
    236           * ZCL General Profile Callback table
    237           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    238          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 22
   \   000016                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000016                REQUIRE __INIT_XDATA_I
    239          {
    240            NULL,               // Basic Cluster Reset command
    241            NULL,                                   // Identify Trigger Effect command
    242            NULL,                                   // On/Off cluster commands
    243            NULL,                                   // On/Off cluster enhanced command Off with Effect
    244            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    245            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    246          #ifdef ZCL_LEVEL_CTRL
    247            NULL,                                   // Level Control Move to Level command
    248            NULL,                                   // Level Control Move command
    249            NULL,                                   // Level Control Step command
    250            NULL,                                   // Level Control Stop command
    251          #endif
    252            zclSampleSw_handleGroupRsp,                                   // Group Response commands
    253            zclSampleSw_handleSceneRsp,                                   // Scene Response command
    254          #ifdef ZCL_SCENES
    255            NULL,                                   // Scene Store Request command
    256            NULL,                                   // Scene Recall Request command
    257          #endif
    258          #ifdef ZCL_ALARMS
    259            NULL,                                   // Alarm (Response) commands
    260          #endif
    261          #ifdef SE_UK_EXT
    262            NULL,                                   // Get Event Log command
    263            NULL,                                   // Publish Event Log command
    264          #endif
    265            NULL,                                   // RSSI Location command
    266            NULL,                                   // RSSI Location Response command
    267            zclSampleSw_handleIdentifyQueryRsp      // ZCL Identify Query Response Command
    268          };
    269          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    270          static zclClosures_DoorLockAppCallbacks_t zclSampleSw_ClosureCmdCallbacks = 
   \                     zclSampleSw_ClosureCmdCallbacks:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zclSampleSw_ClosureCmdCallba`
   \   000002                REQUIRE __INIT_XDATA_I
    271          {
    272            zclSampleSw_handleDoorLockRsp
    273          };
    274          
    275          /*********************************************************************
    276           * @fn          zclSampleSw_Init
    277           *
    278           * @brief       Initialization function for the zclGeneral layer.
    279           *
    280           * @param       none
    281           *
    282           * @return      none
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    285          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    286            zclSampleSw_TaskID = task_id;
   \   00000C   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00000F   F0           MOVX      @DPTR,A
    287          
    288            // Set destination address to indirect
    289            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000010   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
    290            zclSampleSw_DstAddr.endPoint = 0;
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    291            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000017   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
    292          
    293            // Register the Simple Descriptor for this application
    294            bdb_RegisterSimpleDescriptor( &zclSampleSw_HASimpleDesc );
   \   00001D                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00001D   7A..         MOV       R2,#zclSampleSw_HASimpleDesc & 0xff
   \   00001F   7B..         MOV       R3,#(zclSampleSw_HASimpleDesc >> 8) & 0xff
   \   000021   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    295            bdb_RegisterSimpleDescriptor( &zclSampleSw_ZLLSimpleDesc );
   \   000024                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000024   7A..         MOV       R2,#zclSampleSw_ZLLSimpleDesc & 0xff
   \   000026   7B..         MOV       R3,#(zclSampleSw_ZLLSimpleDesc >> 8) & 0xff
   \   000028   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    296            bdb_RegisterSimpleDescriptor( &zclSampleSw_GPSimpleDesc );
   \   00002B                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00002B   7A..         MOV       R2,#zclSampleSw_GPSimpleDesc & 0xff
   \   00002D   7B..         MOV       R3,#(zclSampleSw_GPSimpleDesc >> 8) & 0xff
   \   00002F   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    297          
    298            // Register the ZCL General Cluster Library callback functions
    299            zclGeneral_RegisterCmdCallbacks( sampleSw_HAEp.endPoint, &zclSampleSw_CmdCallbacks );
   \   000032                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000032   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000034   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   000036   90....       MOV       DPTR,#sampleSw_HAEp
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    300            zclGeneral_RegisterCmdCallbacks( sampleSw_ZLLEp.endPoint, &zclSampleSw_CmdCallbacks );
   \   00003E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00003E   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000040   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   000042   90....       MOV       DPTR,#sampleSw_ZLLEp
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    301            zclGeneral_RegisterCmdCallbacks( sampleSw_GPEp.endPoint, &zclSampleSw_CmdCallbacks );
   \   00004A                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00004A   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   00004C   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   00004E   90....       MOV       DPTR,#sampleSw_GPEp
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F9           MOV       R1,A
   \   000053   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    302            zclClosures_RegisterDoorLockCmdCallbacks(sampleSw_HAEp.endPoint, &zclSampleSw_ClosureCmdCallbacks);
   \   000056                ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
   \   000056   7A..         MOV       R2,#zclSampleSw_ClosureCmdCallbacks & 0xff
   \   000058   7B..         MOV       R3,#(zclSampleSw_ClosureCmdCallbacks >> 8) & 0xff
   \   00005A   90....       MOV       DPTR,#sampleSw_HAEp
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   12....       LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
    303            zclClosures_RegisterDoorLockCmdCallbacks(sampleSw_ZLLEp.endPoint, &zclSampleSw_ClosureCmdCallbacks);
   \   000062                ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
   \   000062   7A..         MOV       R2,#zclSampleSw_ClosureCmdCallbacks & 0xff
   \   000064   7B..         MOV       R3,#(zclSampleSw_ClosureCmdCallbacks >> 8) & 0xff
   \   000066   90....       MOV       DPTR,#sampleSw_ZLLEp
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F9           MOV       R1,A
   \   00006B   12....       LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
    304            zclClosures_RegisterDoorLockCmdCallbacks( sampleSw_GPEp.endPoint, &zclSampleSw_ClosureCmdCallbacks);
   \   00006E                ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
   \   00006E   7A..         MOV       R2,#zclSampleSw_ClosureCmdCallbacks & 0xff
   \   000070   7B..         MOV       R3,#(zclSampleSw_ClosureCmdCallbacks >> 8) & 0xff
   \   000072   90....       MOV       DPTR,#sampleSw_GPEp
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
    305          
    306            zclSampleSw_ResetAttributesToDefaultValues();
   \   00007A                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   00007A   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    307            
    308            // Register the application's attribute list
    309            // zcl_registerAttrList( SAMPLESW_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
    310          
    311            // Register the Application to receive the unprocessed Foundation command/response messages
    312            zcl_registerForMsg( zclSampleSw_TaskID );
   \   00007D                ; Setup parameters for call to function zcl_registerForMsg
   \   00007D   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F9           MOV       R1,A
   \   000082   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    313            
    314            // Register for all key events - This app will handle all key events
    315            RegisterForKeys( zclSampleSw_TaskID );
   \   000085                ; Setup parameters for call to function RegisterForKeys
   \   000085   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    316            
    317            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   00008D                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   00008D   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   00008F   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000091   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    318          
    319            // Register for a test endpoint
    320            afRegister( &sampleSw_HAEp );
   \   000094                ; Setup parameters for call to function afRegister
   \   000094   7A..         MOV       R2,#sampleSw_HAEp & 0xff
   \   000096   7B..         MOV       R3,#(sampleSw_HAEp >> 8) & 0xff
   \   000098   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    321            afRegister( &sampleSw_ZLLEp);
   \   00009B                ; Setup parameters for call to function afRegister
   \   00009B   7A..         MOV       R2,#sampleSw_ZLLEp & 0xff
   \   00009D   7B..         MOV       R3,#(sampleSw_ZLLEp >> 8) & 0xff
   \   00009F   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    322            afRegister( &sampleSw_GPEp);
   \   0000A2                ; Setup parameters for call to function afRegister
   \   0000A2   7A..         MOV       R2,#sampleSw_GPEp & 0xff
   \   0000A4   7B..         MOV       R3,#(sampleSw_GPEp >> 8) & 0xff
   \   0000A6   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    323            
    324          #ifdef ZCL_DIAGNOSTIC
    325            // Register the application's callback function to read/write attribute data.
    326            // This is only required when the attribute data format is unknown to ZCL.
    327            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    328          
    329            if ( zclDiagnostic_InitStats() == ZSuccess )
    330            {
    331              // Here the user could start the timer to save Diagnostics to NV
    332            }
    333          #endif
    334          
    335            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   0000A9   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000B0   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    336          
    337            // Form the network and initiate the coordinator
    338            bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING);
   \                     ??CrossCallReturnLabel_149:
   \   0000B3                ; Setup parameters for call to function bdb_StartCommissioning
   \   0000B3   790C         MOV       R1,#0xc
   \   0000B5   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    339          
    340            // Init HAL and Uart
    341            zclSampleSw_InitUart();
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   7401         MOV       A,#0x1
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   7404         MOV       A,#0x4
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   E4           CLR       A
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   E4           CLR       A
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   740A         MOV       A,#0xa
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   7440         MOV       A,#0x40
   \   0000DE   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000E1   7412         MOV       A,#0x12
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E4           CLR       A
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   F0           MOVX      @DPTR,A
   \   0000EA   7405         MOV       A,#0x5
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   7406         MOV       A,#0x6
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   7416         MOV       A,#0x16
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   741B         MOV       A,#0x1b
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   74..         MOV       A,#`??zclSampleSw_UartCB::?relay` & 0xff
   \   000101   F0           MOVX      @DPTR,A
   \   000102   A3           INC       DPTR
   \   000103   74..         MOV       A,#(`??zclSampleSw_UartCB::?relay` >> 8) & 0xff
   \   000105   F0           MOVX      @DPTR,A
   \   000106                ; Setup parameters for call to function HalUARTOpen
   \   000106   AA..         MOV       R2,?XSP + 0
   \   000108   AB..         MOV       R3,?XSP + 1
   \   00010A   7900         MOV       R1,#0x0
   \   00010C   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    342            /**
    343             * JC NOTES: Register a list of ZDO messages
    344             * Device_annce: Would like to know when any new devices join the network.
    345             * Active endpoint response: Would like to know which active endpoints the target device has.
    346             * Simple Descriptor response: Would like to know which clusters are running on the given endpoint.
    347            **/
    348            ZDO_RegisterForZDOMsg(task_id, Node_Desc_rsp);
   \   00010F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00010F   7A02         MOV       R2,#0x2
   \   000111   7B80         MOV       R3,#-0x80
   \   000113   EE           MOV       A,R6
   \   000114   F9           MOV       R1,A
   \   000115   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    349            ZDO_RegisterForZDOMsg(task_id, Active_EP_rsp);
   \   000118                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000118   7A05         MOV       R2,#0x5
   \   00011A   7B80         MOV       R3,#-0x80
   \   00011C   EE           MOV       A,R6
   \   00011D   F9           MOV       R1,A
   \   00011E   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    350            ZDO_RegisterForZDOMsg(task_id, Simple_Desc_rsp);
   \   000121                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000121   7A04         MOV       R2,#0x4
   \   000123   7B80         MOV       R3,#-0x80
   \   000125   EE           MOV       A,R6
   \   000126   F9           MOV       R1,A
   \   000127   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    351          
    352          }
   \   00012A   741D         MOV       A,#0x1d
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012F   7F01         MOV       R7,#0x1
   \   000131   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    353          
    354          /*********************************************************************
    355           * @fn          zclSample_event_loop
    356           *
    357           * @brief       Event Loop Processor for zclGeneral.
    358           *
    359           * @param       none
    360           *
    361           * @return      none
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    364          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    365            afIncomingMSGPacket_t *MSGpkt;
    366            (void)task_id;  // Intentionally unreferenced parameter
    367            
    368            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   7050         JNZ       ??zclSampleSw_event_loop_0
    369            {
    370              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    371              {
    372                switch ( MSGpkt->hdr.event )
    373                {
    374                  case ZDO_CB_MSG:
    375                  {
    376                    // Incomming ZDO messages which the application subscribed to (By ZDO_RegisterForZDOMsg)
    377                    zclSampleSw_ProcessZDOMsgs((zdoIncomingMsg_t *)MSGpkt);
    378                    break;
    379                  }
    380                  case ZCL_INCOMING_MSG:
    381                  {
    382                    // Incoming ZCL Foundation command/response messages
    383                    zclSampleSw_ProcessIncomingMsg((zclIncomingMsg_t *)MSGpkt);
    384                    break;
    385                  }
    386                  case KEY_CHANGE:
    387                  {
    388                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    389                    break;
    390                  }
    391                  case ZDO_STATE_CHANGE:
    392                  {
    393                    break;
    394                  }
    395                  default:
    396                  {
    397                    break;
    398                  }
    399                }
    400          
    401                // Release the memory
    402                osal_msg_deallocate( (uint8 *)MSGpkt );
    403              }
    404          
    405              // return unprocessed events
    406              return (events ^ SYS_EVENT_MSG);
    407            }
    408          
    409            // When activation Event timeout SAMPLEAPP_ACT_TIMEOUT reaches
    410            if ( events & SAMPLEAPP_ACT_EVT )
   \   000012   EE           MOV       A,R6
   \   000013   5440         ANL       A,#0x40
   \   000015   607F         JZ        ??zclSampleSw_event_loop_1
    411            {
    412              uint16 rsps[2] = {0}; uint8 length = 0;
   \   000017   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   00001A   AC..         MOV       R4,?XSP + 0
   \   00001C   AD..         MOV       R5,?XSP + 1
   \   00001E   7404         MOV       A,#0x4
   \   000020   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    413              rsps[length++] = current_cmd_type;
   \   000023   90....       MOV       DPTR,#current_cmd_type
   \   000026   E0           MOVX      A,@DPTR
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    414              rsps[length++] = ERR_CMD_TIMEOUT;
   \                     ??CrossCallReturnLabel_132:
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FC         MOV       A,#-0x4
   \   000035   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    415              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_151:
   \   000038                ; Setup parameters for call to function HalUARTWrite
   \   000038   7C04         MOV       R4,#0x4
   \   00003A   FD           MOV       R5,A
   \   00003B   AA..         MOV       R2,?XSP + 0
   \   00003D   AB..         MOV       R3,?XSP + 1
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    416              return ( events ^ SAMPLEAPP_ACT_EVT );
   \   000043   EE           MOV       A,R6
   \   000044   6440         XRL       A,#0x40
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   8049         SJMP      ??zclSampleSw_event_loop_2
    417            }
   \                     ??zclSampleSw_event_loop_3:
   \   00004A                ; Setup parameters for call to function zclSampleSw_HandleKeys
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FA           MOV       R2,A
   \   00004F   85..82       MOV       DPL,?V0
   \   000052   8B83         MOV       DPH,R3
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   12....       LCALL     `??zclSampleSw_HandleKeys::?relay`; Banked call to: zclSampleSw_HandleKeys
   \                     ??zclSampleSw_event_loop_4:
   \   00005B                ; Setup parameters for call to function osal_msg_deallocate
   \   00005B   AA..         MOV       R2,?V0
   \   00005D   AB..         MOV       R3,?V1
   \   00005F   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSw_event_loop_0:
   \   000062                ; Setup parameters for call to function osal_msg_receive
   \   000062   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F9           MOV       R1,A
   \   000067   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00006A   8A..         MOV       ?V0,R2
   \   00006C   8B..         MOV       ?V1,R3
   \   00006E   EA           MOV       A,R2
   \   00006F   45..         ORL       A,?V1
   \   000071   601B         JZ        ??zclSampleSw_event_loop_5
   \   000073   8A82         MOV       DPL,R2
   \   000075   8B83         MOV       DPH,R3
   \   000077   E0           MOVX      A,@DPTR
   \   000078   24CC         ADD       A,#-0x34
   \   00007A   600D         JZ        ??zclSampleSw_event_loop_6
   \   00007C   2474         ADD       A,#0x74
   \   00007E   60CA         JZ        ??zclSampleSw_event_loop_3
   \   000080   24ED         ADD       A,#-0x13
   \   000082   70D7         JNZ       ??zclSampleSw_event_loop_4
   \   000084                ; Setup parameters for call to function zclSampleSw_ProcessZDOMsgs
   \   000084   12....       LCALL     `??zclSampleSw_ProcessZDOMsgs::?relay`; Banked call to: zclSampleSw_ProcessZDOMsgs
   \   000087   80D2         SJMP      ??zclSampleSw_event_loop_4
   \                     ??zclSampleSw_event_loop_6:
   \   000089                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   000089   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
   \   00008C   80CD         SJMP      ??zclSampleSw_event_loop_4
   \                     ??zclSampleSw_event_loop_5:
   \   00008E   EE           MOV       A,R6
   \   00008F   FA           MOV       R2,A
   \   000090   EF           MOV       A,R7
   \   000091   6480         XRL       A,#0x80
   \                     ??zclSampleSw_event_loop_2:
   \   000093   FB           MOV       R3,A
   \   000094   8004         SJMP      ??zclSampleSw_event_loop_7
    418            
    419            // Rejoin
    420          #ifdef ZDO_COORDINATOR
    421          #else
    422            if ( events & SAMPLEAPP_REJOIN_EVT )
    423            {
    424             bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING |
    425                                BDB_COMMISSIONING_MODE_FINDING_BINDING );
    426              
    427              return ( events ^ SAMPLEAPP_REJOIN_EVT );
    428            }
    429          #endif
    430            
    431            // Discard unknown events
    432            return 0;
   \                     ??zclSampleSw_event_loop_1:
   \   000096   7A00         MOV       R2,#0x0
   \   000098   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_7:
   \   00009A   7404         MOV       A,#0x4
   \   00009C                REQUIRE ?Subroutine0
   \   00009C                ; // Fall through to label ?Subroutine0
    433          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    434          
    435          //static void hexStr_2_Bytes(uint8* dest, char* str, int length)
    436          //{
    437          //  int i, n;
    438          //  for(i=0; i<length; i++)
    439          //  {
    440          //    sscanf(str+2*i, "%2X", &n);
    441          //    dest[i] = (uint8)n;
    442          //  }
    443          //}
    444          
    445          /*********************************************************************
    446           * @fn      zclSampleSw_ProcessZDOMsgs
    447           *
    448           * @brief   Called when this node receives a ZDO/ZDP response.
    449           *
    450           * @param   none
    451           *
    452           * @return  status
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          static void zclSampleSw_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zclSampleSw_ProcessZDOMsgs:
    455          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 103
   \   000005   7499         MOV       A,#-0x67
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    456            if (AssocGetWithShort(pMsg->srcAddr.addr.shortAddr) != NULL)
   \   00000E                ; Setup parameters for call to function AssocGetWithShort
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000017   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   00001A   8B..         MOV       ?V1,R3
   \   00001C   EA           MOV       A,R2
   \   00001D   45..         ORL       A,?V1
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    457            {
    458              if (pMsg->clusterID == Device_annce)
   \   000024   EE           MOV       A,R6
   \   000025   240C         ADD       A,#0xc
   \   000027   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00002A   7413         MOV       A,#0x13
   \   00002C   68           XRL       A,R0
   \   00002D   49           ORL       A,R1
   \   00002E   701D         JNZ       ??zclSampleSw_ProcessZDOMsgs_1
    459              {
    460                // Send back Device Announcement Info in format: [cmd, nwkAddr, extAddr, capabilities]
    461                ZDO_DeviceAnnce_t Annce;
    462                osal_memset(&Annce, 0, sizeof(ZDO_DeviceAnnce_t));
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C0B         MOV       R4,#0xb
   \   000032   7D00         MOV       R5,#0x0
   \   000034   7900         MOV       R1,#0x0
   \   000036   745C         MOV       A,#0x5c
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    463                ZDO_ParseDeviceAnnce(pMsg, &Annce);
   \   00003E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00003E   745C         MOV       A,#0x5c
   \   000040   12....       LCALL     ?XSTACK_DISP102_8
   \   000043   EE           MOV       A,R6
   \   000044   FA           MOV       R2,A
   \   000045   EF           MOV       A,R7
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   \   00004A   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    464              }
    465              else if (pMsg->clusterID == Node_Desc_rsp && node_cmd_rx)
   \                     ??zclSampleSw_ProcessZDOMsgs_1:
   \   00004D   7402         MOV       A,#0x2
   \   00004F   68           XRL       A,R0
   \   000050   7003         JNZ       ??zclSampleSw_ProcessZDOMsgs_2
   \   000052   7480         MOV       A,#-0x80
   \   000054   69           XRL       A,R1
   \                     ??zclSampleSw_ProcessZDOMsgs_2:
   \   000055   6003         JZ        $+5
   \   000057   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_3 & 0xFFFF
   \   00005A   90....       MOV       DPTR,#node_cmd_rx
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    466              {
    467                // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
    468                if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000063                ; Setup parameters for call to function osal_stop_timerEx
   \   000063   7A40         MOV       R2,#0x40
   \   000065   7B00         MOV       R3,#0x0
   \   000067   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F9           MOV       R1,A
   \   00006C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00006F   E9           MOV       A,R1
   \   000070   6406         XRL       A,#0x6
   \   000072   7003         JNZ       $+5
   \   000074   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    469                  // Send back Node Descriptor response in format: [cmd, stat, nwkAddr, status, LogicalType, CapabilityFlag, ManufactuerCode]
    470                  node_cmd_rx = 0;
   \   000077   90....       MOV       DPTR,#node_cmd_rx
   \   00007A   E4           CLR       A
   \   00007B   F0           MOVX      @DPTR,A
    471                  ZDO_NodeDescRsp_t pNDRsp;
    472                  ZDO_ParseNodeDescRsp(pMsg, &pNDRsp);
   \   00007C                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   00007C   7434         MOV       A,#0x34
   \   00007E   12....       LCALL     ?XSTACK_DISP102_8
   \   000081   EE           MOV       A,R6
   \   000082   FA           MOV       R2,A
   \   000083   EF           MOV       A,R7
   \   000084   FB           MOV       R3,A
   \   000085   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
    473                  uint16 rsps[20] = {0}; uint8 length = 0;
   \   000088   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00008B   AC..         MOV       R4,?XSP + 0
   \   00008D   AD..         MOV       R5,?XSP + 1
   \   00008F   7428         MOV       A,#0x28
   \   000091   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    474                  rsps[length++] = CMD_JC_NODEREQ;
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   7402         MOV       A,#0x2
   \   00009C   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    475                  rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_133:
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E4           CLR       A
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   F0           MOVX      @DPTR,A
    476                  rsps[length++] = pNDRsp.nwkAddr;
   \   0000A6   7435         MOV       A,#0x35
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000AE   7404         MOV       A,#0x4
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL     ?Subroutine21 & 0xFFFF
    477                  rsps[length++] = pNDRsp.status;
   \                     ??CrossCallReturnLabel_42:
   \   0000B6   7434         MOV       A,#0x34
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F8           MOV       R0,A
   \   0000BD   7406         MOV       A,#0x6
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL     ?Subroutine23 & 0xFFFF
    478                  rsps[length++] = pNDRsp.nodeDesc.LogicalType;
   \                     ??CrossCallReturnLabel_161:
   \   0000C5   7437         MOV       A,#0x37
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   5407         ANL       A,#0x7
   \   0000CD   F8           MOV       R0,A
   \   0000CE   7408         MOV       A,#0x8
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL     ?Subroutine23 & 0xFFFF
    479                  rsps[length++] = pNDRsp.nodeDesc.CapabilityFlags;
   \                     ??CrossCallReturnLabel_162:
   \   0000D6   7439         MOV       A,#0x39
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F8           MOV       R0,A
   \   0000DD   740A         MOV       A,#0xa
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL     ?Subroutine23 & 0xFFFF
    480                  rsps[length++] = BUILD_UINT16(pNDRsp.nodeDesc.ManufacturerCode[0], pNDRsp.nodeDesc.ManufacturerCode[1]);
   \                     ??CrossCallReturnLabel_163:
   \   0000E5   743A         MOV       A,#0x3a
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   FA           MOV       R2,A
   \   0000EC   743B         MOV       A,#0x3b
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   F9           MOV       R1,A
   \   0000F3   EA           MOV       A,R2
   \   0000F4   F8           MOV       R0,A
   \   0000F5   740C         MOV       A,#0xc
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ?Subroutine21 & 0xFFFF
    481                  HalUARTWrite(HAL_UART_PORT_0,  (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_43:
   \   0000FD                ; Setup parameters for call to function HalUARTWrite
   \   0000FD   7C0E         MOV       R4,#0xe
   \   0000FF   7D00         MOV       R5,#0x0
   \   000101   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
    482                }
    483              }
    484              else if (pMsg->clusterID == Active_EP_rsp && endpoint_cmd_rx)
   \                     ??zclSampleSw_ProcessZDOMsgs_3:
   \   000104   7405         MOV       A,#0x5
   \   000106   68           XRL       A,R0
   \   000107   7003         JNZ       ??zclSampleSw_ProcessZDOMsgs_5
   \   000109   7480         MOV       A,#-0x80
   \   00010B   69           XRL       A,R1
   \                     ??zclSampleSw_ProcessZDOMsgs_5:
   \   00010C   6003         JZ        $+5
   \   00010E   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_6 & 0xFFFF
   \   000111   90....       MOV       DPTR,#endpoint_cmd_rx
   \   000114   E0           MOVX      A,@DPTR
   \   000115   7003         JNZ       $+5
   \   000117   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    485              {
    486                  // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
    487                  if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   00011A                ; Setup parameters for call to function osal_stop_timerEx
   \   00011A   7A40         MOV       R2,#0x40
   \   00011C   7B00         MOV       R3,#0x0
   \   00011E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F9           MOV       R1,A
   \   000123   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000126   E9           MOV       A,R1
   \   000127   6406         XRL       A,#0x6
   \   000129   7003         JNZ       $+5
   \   00012B   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    488                    // Send back Node Descriptor response in format: [cmd, nwkAddr, activeEP1, activeEP2,...]
    489                    endpoint_cmd_rx = 0;
   \   00012E   90....       MOV       DPTR,#endpoint_cmd_rx
   \   000131   E4           CLR       A
   \   000132   F0           MOVX      @DPTR,A
    490                    uint16 rsps[20] = {0}; uint8 length = 0;
   \   000133   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   000136   AC..         MOV       R4,?XSP + 0
   \   000138   AD..         MOV       R5,?XSP + 1
   \   00013A   7428         MOV       A,#0x28
   \   00013C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    491                    ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \   00013F                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00013F   EE           MOV       A,R6
   \   000140   FA           MOV       R2,A
   \   000141   EF           MOV       A,R7
   \   000142   FB           MOV       R3,A
   \   000143   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000146   8A..         MOV       ?V0,R2
   \   000148   8B..         MOV       ?V1,R3
   \   00014A   AE..         MOV       R6,?V0
   \   00014C   AF..         MOV       R7,?V1
    492                    rsps[length++] = CMD_JC_AEPREQ;
   \   00014E   85..82       MOV       DPL,?XSP + 0
   \   000151   85..83       MOV       DPH,?XSP + 1
   \   000154   7403         MOV       A,#0x3
   \   000156   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    493                    rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_134:
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   E4           CLR       A
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   A3           INC       DPTR
   \   00015F   F0           MOVX      @DPTR,A
   \   000160   7A02         MOV       R2,#0x2
    494                    for(int i = 0; i < pRsp->cnt; i++)
   \   000162   F8           MOV       R0,A
   \   000163   F9           MOV       R1,A
   \   000164   8023         SJMP      ??zclSampleSw_ProcessZDOMsgs_7
    495                    {
    496                      rsps[length++] = pRsp->epList[i];
   \                     ??zclSampleSw_ProcessZDOMsgs_8:
   \   000166   EE           MOV       A,R6
   \   000167   28           ADD       A,R0
   \   000168   F582         MOV       DPL,A
   \   00016A   EF           MOV       A,R7
   \   00016B   39           ADDC      A,R1
   \   00016C   F583         MOV       DPH,A
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   E0           MOVX      A,@DPTR
   \   000173   F5..         MOV       ?V0,A
   \   000175   85..82       MOV       DPL,?XSP + 0
   \   000178   85..83       MOV       DPH,?XSP + 1
   \   00017B   12....       LCALL     ?Subroutine41 & 0xFFFF
    497                    }
   \                     ??CrossCallReturnLabel_88:
   \   00017E   E5..         MOV       A,?V0
   \   000180   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000183   0A           INC       R2
   \   000184   08           INC       R0
   \   000185   E8           MOV       A,R0
   \   000186   7001         JNZ       ??zclSampleSw_ProcessZDOMsgs_7
   \   000188   09           INC       R1
   \                     ??zclSampleSw_ProcessZDOMsgs_7:
   \   000189   EA           MOV       A,R2
   \   00018A   25E0         ADD       A,0xE0 /* A   */
   \   00018C   FC           MOV       R4,A
   \   00018D   E4           CLR       A
   \   00018E   33           RLC       A
   \   00018F   FD           MOV       R5,A
   \   000190   8E82         MOV       DPL,R6
   \   000192   8F83         MOV       DPH,R7
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F5..         MOV       ?V0,A
   \   00019A   E8           MOV       A,R0
   \   00019B   95..         SUBB      A,?V0
   \   00019D   E9           MOV       A,R1
   \   00019E   9400         SUBB      A,#0x0
   \   0001A0   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001A2   65D0         XRL       A,PSW
   \   0001A4   33           RLC       A
   \   0001A5   40BF         JC        ??zclSampleSw_ProcessZDOMsgs_8
    498                    HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \   0001A7                ; Setup parameters for call to function HalUARTWrite
   \   0001A7   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
    499                  }
    500              }
    501              else if (pMsg->clusterID == Simple_Desc_rsp && cluster_cmd_rx)
   \                     ??zclSampleSw_ProcessZDOMsgs_6:
   \   0001AA   7404         MOV       A,#0x4
   \   0001AC   68           XRL       A,R0
   \   0001AD   7003         JNZ       ??zclSampleSw_ProcessZDOMsgs_9
   \   0001AF   7480         MOV       A,#-0x80
   \   0001B1   69           XRL       A,R1
   \                     ??zclSampleSw_ProcessZDOMsgs_9:
   \   0001B2   6003         JZ        $+5
   \   0001B4   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
   \   0001B7   90....       MOV       DPTR,#cluster_cmd_rx
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   7003         JNZ       $+5
   \   0001BD   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    502              {
    503                // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
    504                if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   0001C0                ; Setup parameters for call to function osal_stop_timerEx
   \   0001C0   7A40         MOV       R2,#0x40
   \   0001C2   7B00         MOV       R3,#0x0
   \   0001C4   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   F9           MOV       R1,A
   \   0001C9   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001CC   E9           MOV       A,R1
   \   0001CD   6406         XRL       A,#0x6
   \   0001CF   7003         JNZ       $+5
   \   0001D1   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    505                  cluster_cmd_rx = 0;
   \   0001D4   90....       MOV       DPTR,#cluster_cmd_rx
   \   0001D7   E4           CLR       A
   \   0001D8   F0           MOVX      @DPTR,A
    506                  ZDO_SimpleDescRsp_t simpleDescRsp;
    507                  osal_memset(&simpleDescRsp, 0, sizeof(ZDO_SimpleDescRsp_t));
   \   0001D9                ; Setup parameters for call to function osal_memset
   \   0001D9   7C0F         MOV       R4,#0xf
   \   0001DB   FD           MOV       R5,A
   \   0001DC   F9           MOV       R1,A
   \   0001DD   744D         MOV       A,#0x4d
   \   0001DF   12....       LCALL     ?XSTACK_DISP101_8
   \   0001E2   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    508                  ZDO_ParseSimpleDescRsp(pMsg, &simpleDescRsp);
   \   0001E5                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   0001E5   744D         MOV       A,#0x4d
   \   0001E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EA   EE           MOV       A,R6
   \   0001EB   FA           MOV       R2,A
   \   0001EC   EF           MOV       A,R7
   \   0001ED   FB           MOV       R3,A
   \   0001EE   12....       LCALL     `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
    509                  zAddrType_t dstAddr;
    510                  dstAddr.addr.shortAddr = simpleDescRsp.nwkAddr;
   \   0001F1   744E         MOV       A,#0x4e
   \   0001F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0001F9   7444         MOV       A,#0x44
   \   0001FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FE   12....       LCALL     ?Subroutine21 & 0xFFFF
    511                  dstAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_44:
   \   000201   744C         MOV       A,#0x4c
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   7402         MOV       A,#0x2
   \   000208   F0           MOVX      @DPTR,A
    512                  SimpleDescriptionFormat_t simpleDesc = simpleDescRsp.simpleDesc;
   \   000209   7450         MOV       A,#0x50
   \   00020B   12....       LCALL     ?XSTACK_DISP0_8
   \   00020E   7428         MOV       A,#0x28
   \   000210   12....       LCALL     ?XSTACK_DISP102_8
   \   000213   740C         MOV       A,#0xc
   \   000215   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    513          
    514                  // Send back Simple Descriptor response in format: [cmd, nwkAddr, endpoint, AppProfId, AppDeviceID, AppDevVer, cluster1, cluster2,...]
    515                  uint16 answer[20] = {0}; uint8 length = 0;
   \   000218   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   00021B   AC..         MOV       R4,?XSP + 0
   \   00021D   AD..         MOV       R5,?XSP + 1
   \   00021F   7428         MOV       A,#0x28
   \   000221   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    516                  answer[length++] = CMD_JC_CLUREQ;
   \   000224   85..82       MOV       DPL,?XSP + 0
   \   000227   85..83       MOV       DPH,?XSP + 1
   \   00022A   7404         MOV       A,#0x4
   \   00022C   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    517                  answer[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_135:
   \   00022F   12....       LCALL     ?XSTACK_DISP0_8
   \   000232   E4           CLR       A
   \   000233   F0           MOVX      @DPTR,A
   \   000234   A3           INC       DPTR
   \   000235   F0           MOVX      @DPTR,A
    518                  answer[length++] = dstAddr.addr.shortAddr;
   \   000236   7444         MOV       A,#0x44
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00023E   7404         MOV       A,#0x4
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   12....       LCALL     ?Subroutine21 & 0xFFFF
    519                  answer[length++] = simpleDesc.EndPoint;
   \                     ??CrossCallReturnLabel_45:
   \   000246   7428         MOV       A,#0x28
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   F8           MOV       R0,A
   \   00024D   7406         MOV       A,#0x6
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   12....       LCALL     ?Subroutine23 & 0xFFFF
    520                  answer[length++] = simpleDescRsp.status;
   \                     ??CrossCallReturnLabel_164:
   \   000255   744D         MOV       A,#0x4d
   \   000257   12....       LCALL     ?XSTACK_DISP0_8
   \   00025A   E0           MOVX      A,@DPTR
   \   00025B   F8           MOV       R0,A
   \   00025C   7408         MOV       A,#0x8
   \   00025E   12....       LCALL     ?XSTACK_DISP0_8
   \   000261   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000264   7C0A         MOV       R4,#0xa
   \   000266   FD           MOV       R5,A
    521                  if(simpleDesc.AppNumInClusters > 0)
   \   000267   742E         MOV       A,#0x2e
   \   000269   12....       LCALL     ?XSTACK_DISP0_8
   \   00026C   E0           MOVX      A,@DPTR
   \   00026D   FE           MOV       R6,A
   \   00026E   7003         JNZ       $+5
   \   000270   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
    522                  {
    523                    answer[length++] = simpleDesc.AppProfId;
   \   000273   7429         MOV       A,#0x29
   \   000275   12....       LCALL     ?XSTACK_DISP0_8
   \   000278   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00027B   EC           MOV       A,R4
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   12....       LCALL     ?Subroutine21 & 0xFFFF
    524                    answer[length++] = simpleDesc.AppDeviceId;
   \                     ??CrossCallReturnLabel_46:
   \   000282   742B         MOV       A,#0x2b
   \   000284   12....       LCALL     ?XSTACK_DISP0_8
   \   000287   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00028A   740C         MOV       A,#0xc
   \   00028C   12....       LCALL     ?XSTACK_DISP0_8
   \   00028F   12....       LCALL     ?Subroutine21 & 0xFFFF
    525                    answer[length++] = simpleDesc.AppDevVer;
   \                     ??CrossCallReturnLabel_47:
   \   000292   742D         MOV       A,#0x2d
   \   000294   12....       LCALL     ?XSTACK_DISP0_8
   \   000297   E0           MOVX      A,@DPTR
   \   000298   540F         ANL       A,#0xf
   \   00029A   F8           MOV       R0,A
   \   00029B   740E         MOV       A,#0xe
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0002A3   7C08         MOV       R4,#0x8
    526                    for (int i = 0; i < simpleDesc.AppNumInClusters; i++)
   \   0002A5   FA           MOV       R2,A
   \   0002A6   FB           MOV       R3,A
    527                    {
    528                      answer[length++] = simpleDesc.pAppInClusterList[i];
   \                     ??zclSampleSw_ProcessZDOMsgs_10:
   \   0002A7   EA           MOV       A,R2
   \   0002A8   F8           MOV       R0,A
   \   0002A9   EB           MOV       A,R3
   \   0002AA   F9           MOV       R1,A
   \   0002AB   E8           MOV       A,R0
   \   0002AC   28           ADD       A,R0
   \   0002AD   F8           MOV       R0,A
   \   0002AE   E9           MOV       A,R1
   \   0002AF   33           RLC       A
   \   0002B0   F9           MOV       R1,A
   \   0002B1   742F         MOV       A,#0x2f
   \   0002B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B6   E0           MOVX      A,@DPTR
   \   0002B7   28           ADD       A,R0
   \   0002B8   FD           MOV       R5,A
   \   0002B9   A3           INC       DPTR
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   39           ADDC      A,R1
   \   0002BC   8D82         MOV       DPL,R5
   \   0002BE   F583         MOV       DPH,A
   \   0002C0   E0           MOVX      A,@DPTR
   \   0002C1   F5..         MOV       ?V0,A
   \   0002C3   A3           INC       DPTR
   \   0002C4   E0           MOVX      A,@DPTR
   \   0002C5   F5..         MOV       ?V1,A
   \   0002C7   EC           MOV       A,R4
   \   0002C8   12....       LCALL     ?Subroutine40 & 0xFFFF
    529                    }
   \                     ??CrossCallReturnLabel_86:
   \   0002CB   F582         MOV       DPL,A
   \   0002CD   E583         MOV       A,DPH
   \   0002CF   39           ADDC      A,R1
   \   0002D0   F583         MOV       DPH,A
   \   0002D2   E5..         MOV       A,?V0
   \   0002D4   F0           MOVX      @DPTR,A
   \   0002D5   A3           INC       DPTR
   \   0002D6   E5..         MOV       A,?V1
   \   0002D8   F0           MOVX      @DPTR,A
   \   0002D9   0C           INC       R4
   \   0002DA   0A           INC       R2
   \   0002DB   EA           MOV       A,R2
   \   0002DC   7001         JNZ       ??zclSampleSw_ProcessZDOMsgs_11
   \   0002DE   0B           INC       R3
   \                     ??zclSampleSw_ProcessZDOMsgs_11:
   \   0002DF   EE           MOV       A,R6
   \   0002E0   F8           MOV       R0,A
   \   0002E1   C3           CLR       C
   \   0002E2   EA           MOV       A,R2
   \   0002E3   98           SUBB      A,R0
   \   0002E4   EB           MOV       A,R3
   \   0002E5   9400         SUBB      A,#0x0
   \   0002E7   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0002E9   65D0         XRL       A,PSW
   \   0002EB   33           RLC       A
   \   0002EC   40B9         JC        ??zclSampleSw_ProcessZDOMsgs_10
   \   0002EE   EC           MOV       A,R4
   \   0002EF   2C           ADD       A,R4
   \   0002F0   FC           MOV       R4,A
   \   0002F1   E4           CLR       A
   \   0002F2   33           RLC       A
   \   0002F3   FD           MOV       R5,A
    530                  }
    531                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)answer, length*2);
   \                     ??zclSampleSw_ProcessZDOMsgs_4:
   \   0002F4                ; Setup parameters for call to function HalUARTWrite
   \   0002F4   AA..         MOV       R2,?XSP + 0
   \   0002F6   AB..         MOV       R3,?XSP + 1
   \   0002F8   7900         MOV       R1,#0x0
   \   0002FA   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    532                }
    533              }
    534            }
    535            else
    536            {
    537              //printf("A ZDO message is received from device %X, but it is not in the association list!\n", pMsg->srcAddr.addr.shortAddr);
    538            }
    539          }
   \                     ??zclSampleSw_ProcessZDOMsgs_0:
   \   0002FD   7467         MOV       A,#0x67
   \   0002FF                REQUIRE ?Subroutine1
   \   0002FF                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine63_0
   \   000006                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine64_0
   \   000001                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   E582         MOV       A,DPL
   \   00000E   28           ADD       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    540          
    541          /*********************************************************************
    542           * @fn      zclSampleSw_HandleKeys
    543           *
    544           * @brief   Handles all key events for this device.
    545           *
    546           * @param   shift - true if in shift/alt.
    547           * @param   keys - bit field for key events. Valid entries:
    548           *                 HAL_KEY_SW_5
    549           *                 HAL_KEY_SW_4
    550           *                 HAL_KEY_SW_2
    551           *                 HAL_KEY_SW_1
    552           *
    553           * @return  none
    554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          static void zclSampleSw_HandleKeys( byte shift, byte keys )
   \                     zclSampleSw_HandleKeys:
    556          { 
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 61
   \   000005   74C3         MOV       A,#-0x3d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    557            if(keys & HAL_KEY_SW_6)
   \   00000A   EA           MOV       A,R2
   \   00000B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00000D   4003         JC        $+5
   \   00000F   02....       LJMP      ??zclSampleSw_HandleKeys_0 & 0xFFFF
    558            {
    559              uint8 readVal;
    560              static uint8 writeVal = 0;
    561              
    562              char readValStr[30];
    563              char writeValStr[30];
    564              
    565              // init USER_NV_TEST
    566              osal_nv_item_init(USER_NV_TEST, 1, NULL);
   \   000012                ; Setup parameters for call to function osal_nv_item_init
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C01         MOV       R4,#0x1
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A01         MOV       R2,#0x1
   \   000022   7B04         MOV       R3,#0x4
   \   000024   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    567              
    568              // write
    569              sprintf(writeValStr, "Write: %d", writeVal);
   \   00002C                ; Setup parameters for call to function sprintf
   \   00002C   90....       MOV       DPTR,#??writeVal
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7C..         MOV       R4,#`?<Constant "Write: %d">` & 0xff
   \   000039   7D..         MOV       R5,#(`?<Constant "Write: %d">` >> 8) & 0xff
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
    570              osal_nv_write( USER_NV_TEST, 0, 1, &writeVal );
   \   000048                ; Setup parameters for call to function osal_nv_write
   \   000048   75....       MOV       ?V2,#??writeVal & 0xff
   \   00004B   75....       MOV       ?V3,#(??writeVal >> 8) & 0xff
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   75..01       MOV       ?V2,#0x1
   \   000056   75..00       MOV       ?V3,#0x0
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7C00         MOV       R4,#0x0
   \   000060   7D00         MOV       R5,#0x0
   \   000062   7A01         MOV       R2,#0x1
   \   000064   7B04         MOV       R3,#0x4
   \   000066   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
    571              
    572              writeVal++;
   \   00006E   90....       MOV       DPTR,#??writeVal
   \   000071   E0           MOVX      A,@DPTR
   \   000072   04           INC       A
   \   000073   F0           MOVX      @DPTR,A
    573              
    574              // read
    575              osal_nv_read( USER_NV_TEST, 0, 1, &readVal );
   \   000074                ; Setup parameters for call to function osal_nv_read
   \   000074   A8..         MOV       R0,?XSP + 0
   \   000076   A9..         MOV       R1,?XSP + 1
   \   000078   88..         MOV       ?V2,R0
   \   00007A   89..         MOV       ?V3,R1
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   75..01       MOV       ?V2,#0x1
   \   000084   75..00       MOV       ?V3,#0x0
   \   000087   78..         MOV       R0,#?V2
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   7C00         MOV       R4,#0x0
   \   00008E   7D00         MOV       R5,#0x0
   \   000090   7A01         MOV       R2,#0x1
   \   000092   7B04         MOV       R3,#0x4
   \   000094   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000097   7404         MOV       A,#0x4
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
    576              sprintf(readValStr, "Read: %d", readVal);
   \   00009C                ; Setup parameters for call to function sprintf
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F5..         MOV       ?V2,A
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   7C..         MOV       R4,#`?<Constant "Read: %d">` & 0xff
   \   0000AC   7D..         MOV       R5,#(`?<Constant "Read: %d">` >> 8) & 0xff
   \   0000AE   7421         MOV       A,#0x21
   \   0000B0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B3   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
    577              
    578              // lcd show
    579              //HalLcdWriteString(writeValStr, HAL_LCD_LINE_1);
    580              //HalLcdWriteString(readValStr,  HAL_LCD_LINE_2);
    581              
    582              // uart show
    583              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)writeValStr, osal_strlen(writeValStr));
   \   0000BB                ; Setup parameters for call to function osal_strlen
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C0   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000C3   8A..         MOV       ?V2,R2
   \   0000C5   8B..         MOV       ?V3,R3
   \   0000C7   AC..         MOV       R4,?V2
   \   0000C9   AD..         MOV       R5,?V3
   \   0000CB                ; Setup parameters for call to function HalUARTWrite
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D0   7900         MOV       R1,#0x0
   \   0000D2   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    584              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 2);
   \   0000D5                ; Setup parameters for call to function HalUARTWrite
   \   0000D5   7C02         MOV       R4,#0x2
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000DB   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    585              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)readValStr, osal_strlen(readValStr));
   \   0000E2                ; Setup parameters for call to function osal_strlen
   \   0000E2   741F         MOV       A,#0x1f
   \   0000E4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E7   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000EA   8A..         MOV       ?V2,R2
   \   0000EC   8B..         MOV       ?V3,R3
   \   0000EE   AC..         MOV       R4,?V2
   \   0000F0   AD..         MOV       R5,?V3
   \   0000F2                ; Setup parameters for call to function HalUARTWrite
   \   0000F2   741F         MOV       A,#0x1f
   \   0000F4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F7   7900         MOV       R1,#0x0
   \   0000F9   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    586              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 2);
   \   0000FC                ; Setup parameters for call to function HalUARTWrite
   \   0000FC   7C02         MOV       R4,#0x2
   \   0000FE   7D00         MOV       R5,#0x0
   \   000100   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000102   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000104   7900         MOV       R1,#0x0
   \   000106   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    587              
    588              // led indication
    589              HalLedSet(HAL_LED_1, HAL_LED_MODE_TOGGLE);
   \   000109                ; Setup parameters for call to function HalLedSet
   \   000109   7A08         MOV       R2,#0x8
   \   00010B   7901         MOV       R1,#0x1
   \   00010D   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    590            }
    591          }
   \                     ??zclSampleSw_HandleKeys_0:
   \   000110   743D         MOV       A,#0x3d
   \   000112   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??writeVal:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    592            
    593          /*********************************************************************
    594           * @fn      zclSampleSw_ProcessCommissioningStatus
    595           *
    596           * @brief   Callback in which the status of the commissioning process are reported
    597           *
    598           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    599           *
    600           * @return  none
    601           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    603          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    604            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7010         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    605            {
    606              case BDB_COMMISSIONING_FORMATION:
    607                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    608                {
    609                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    610                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000015                ; Setup parameters for call to function bdb_StartCommissioning
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   4402         ORL       A,#0x2
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    611                  //printf("The BDB formation operation succeeds.\n");
    612                }
    613                else
    614                {
    615                  //Want to try other channels?
    616                  //try with bdb_setChannelAttribute
    617                }
    618              break;
    619              case BDB_COMMISSIONING_NWK_STEERING:
    620                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    621                {
    622                  //YOUR JOB:
    623                  //We are on the nwk, what now?
    624                }
    625                else
    626                {
    627                  #ifdef ZDO_COORDINATOR
    628                  #else
    629                  osal_start_timerEx(zclSampleSw_TaskID, 
    630                                     SAMPLEAPP_REJOIN_EVT, 
    631                                     SAMPLEAPP_REJOIN_PERIOD);
    632                  #endif
    633                   
    634                  //See the possible errors for nwk steering procedure
    635                  //No suitable networks found
    636                  //Want to try other channels?
    637                  //try with bdb_setChannelAttribute
    638                }
    639              break;
    640              case BDB_COMMISSIONING_FINDING_BINDING:
    641                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    642                {
    643                  //printf("[BDB finding and binding] Succeed.\n");
    644                }
    645                else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE)
    646                {
    647                  //printf("[BDB finding and binding] No identify query response is identified.\n");
    648                }
    649                else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_FAILURE)
    650                {
    651                  //printf("[BDB finding and binding] Fail.");
    652                }
    653                else
    654                {
    655                  //YOUR JOB:
    656                  //retry?, wait for user interaction?
    657                }
    658              break;
    659              case BDB_COMMISSIONING_INITIALIZATION:
    660                //Initialization notification can only be successful. Failure on initialization 
    661                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    662                
    663                //YOUR JOB:
    664                //We are on a network, what now?
    665                
    666              break;
    667          #if ZG_BUILD_ENDDEVICE_TYPE    
    668              case BDB_COMMISSIONING_PARENT_LOST:
    669                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    670                {
    671                  //We did recover from losing parent
    672                }
    673                else
    674                {
    675                  //Parent not found, attempt to rejoin again after a fixed delay
    676                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    677                }
    678              break;
    679          #endif 
    680            }
    681          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   00001E                REQUIRE ?Subroutine2
   \   00001E                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    682          
    683          /*********************************************************************
    684           * @fn      zclSampleSw_BasicResetCB
    685           *
    686           * @brief   Callback from the ZCL General Cluster Library
    687           *          to set all the Basic Cluster attributes to  default values.
    688           *
    689           * @param   none
    690           *
    691           * @return  none
    692           */
    693          static void zclSampleSw_BasicResetCB( void )
                             ^
Warning[Pe177]: function "zclSampleSw_BasicResetCB" was declared but never
          referenced
    694          {
    695            zclSampleSw_ResetAttributesToDefaultValues();
    696          }
    697          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    698          ZStatus_t zclSampleSw_handleDoorLockRsp(zclIncoming_t *pInMsg, uint8 status)
   \                     zclSampleSw_handleDoorLockRsp:
    699          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    700            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    701            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000C   75..88       MOV       ?V4,#-0x78
   \   00000F   75..13       MOV       ?V5,#0x13
   \   000012   75..00       MOV       ?V6,#0x0
   \   000015   75..00       MOV       ?V7,#0x0
   \   000018                ; Setup parameters for call to function osal_get_timeoutEx
   \   000018   7A40         MOV       R2,#0x40
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   \   000028   8C..         MOV       ?V2,R4
   \   00002A   8D..         MOV       ?V3,R5
   \   00002C   78..         MOV       R0,#?V4
   \   00002E   79..         MOV       R1,#?V0
   \   000030   12....       LCALL     ?L_SUB
    702          
    703            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000033                ; Setup parameters for call to function osal_stop_timerEx
   \   000033   7A40         MOV       R2,#0x40
   \   000035   7B00         MOV       R3,#0x0
   \   000037   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00003F   E9           MOV       A,R1
   \   000040   6406         XRL       A,#0x6
   \   000042   603B         JZ        ??zclSampleSw_handleDoorLockRsp_0
    704              uint16 rsps[10] = {0}; uint8 length = 0;
   \   000044   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`
   \   000047   AC..         MOV       R4,?XSP + 0
   \   000049   AD..         MOV       R5,?XSP + 1
   \   00004B   7414         MOV       A,#0x14
   \   00004D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    705              rsps[length++] = CMD_JC_ZCLREQ;
   \   000050   12....       LCALL     ?Subroutine8 & 0xFFFF
    706              rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_125:
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine17 & 0xFFFF
    707              rsps[length++] = CMD_JC_ZCLREQ;
   \                     ??CrossCallReturnLabel_29:
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   7407         MOV       A,#0x7
   \   00005E   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    708              rsps[length++] = status;
   \                     ??CrossCallReturnLabel_153:
   \   000061   EE           MOV       A,R6
   \   000062   F8           MOV       R0,A
   \   000063   7406         MOV       A,#0x6
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   12....       LCALL     ?Subroutine19 & 0xFFFF
    709              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
    710              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
    711              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    712            }
   \                     ??CrossCallReturnLabel_36:
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000071   12....       LCALL     ?UL_SHR
   \   000074   740A         MOV       A,#0xa
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00007C   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    713            return SUCCESS;
   \                     ??zclSampleSw_handleDoorLockRsp_0:
   \   00007F   7900         MOV       R1,#0x0
   \   000081   02....       LJMP      ?Subroutine4 & 0xFFFF
    714          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   7408         MOV       A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7414         MOV       A,#0x14
   \   000002   02....       LJMP      ??Subroutine59_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   7410         MOV       A,#0x10
   \   000005   78..         MOV       R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7407         MOV       A,#0x7
   \   000008                REQUIRE ??Subroutine60_0
   \   000008                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   AA..         MOV       R2,?XSP + 0
   \   000005   AB..         MOV       R3,?XSP + 1
   \   000007   7900         MOV       R1,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E5..         MOV       A,?V4
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V5
   \   000006   F0           MOVX      @DPTR,A
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007                ; Setup parameters for call to function HalUARTWrite
   \   000007   7C0C         MOV       R4,#0xc
   \   000009   7D00         MOV       R5,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   7404         MOV       A,#0x4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E5..         MOV       A,?V4
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V5
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine66_0
   \   000001                ; // Fall through to label ??Subroutine66_0
    715          
    716          // JC NOTE: Implemented function for handling Group Response
    717          /*********************************************************************
    718           * @fn      zclSampleSw_handleGroupRsp
    719           *
    720           * @brief   Callback from the ZCL General Cluster Library
    721           *          to handle ZCL Group Response.
    722           *          Callback logic:
    723           *          (1) In sampleswInit, we registered CmdCallbacks (encoding this function) under various endpoints.
    724           *          (2) When a ZCL Group Response comes, ZCL will call zclGeneral_ProcessInGroupsClient (Line 2039) to process the message, and return the zclGroupRsp_t result to the callback function.
    725           *          (3) Since we previously registered the callback function as this function, eventually this function gets called.
    726           *
    727           * @param   none
    728           *
    729           * @return  none
    730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          static void zclSampleSw_handleGroupRsp(zclGroupRsp_t* zclGroupRsp)
   \                     zclSampleSw_handleGroupRsp:
    732          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    733            // Calculate the elpased time and stop the Timeout watchdog
    734            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    735            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000E   75..88       MOV       ?V4,#-0x78
   \   000011   75..13       MOV       ?V5,#0x13
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001A   7A40         MOV       R2,#0x40
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   8C..         MOV       ?V2,R4
   \   00002C   8D..         MOV       ?V3,R5
   \   00002E   78..         MOV       R0,#?V4
   \   000030   79..         MOV       R1,#?V0
   \   000032   12....       LCALL     ?L_SUB
    736          
    737            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000035                ; Setup parameters for call to function osal_stop_timerEx
   \   000035   7A40         MOV       R2,#0x40
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000041   E9           MOV       A,R1
   \   000042   6406         XRL       A,#0x6
   \   000044   6035         JZ        ??zclSampleSw_handleGroupRsp_0
    738              uint16 rsps[10] = {0}; uint8 length = 0;
   \   000046   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_1`
   \   000049   AC..         MOV       R4,?XSP + 0
   \   00004B   AD..         MOV       R5,?XSP + 1
   \   00004D   7414         MOV       A,#0x14
   \   00004F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    739              rsps[length++] = CMD_JC_ZCLREQ;
   \   000052   12....       LCALL     ?Subroutine8 & 0xFFFF
    740              rsps[length++] = SUCCESS;
    741              rsps[length++] = zclGroupRsp->cmdID;
    742              rsps[length++] = zclGroupRsp->status;
    743              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
    744              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
    745              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    746            }
   \                     ??CrossCallReturnLabel_126:
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006D   12....       LCALL     ?UL_SHR
   \   000070   740A         MOV       A,#0xa
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000078   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    747          }
   \                     ??zclSampleSw_handleGroupRsp_0:
   \   00007B   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   7404         MOV       A,#0x4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   7406         MOV       A,#0x6
   \   00000E   22           RET
    748          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    749          static void zclSampleSw_handleSceneRsp(zclSceneRsp_t* zclSceneRsp)
   \                     zclSampleSw_handleSceneRsp:
    750          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    751            // Calculate the elpased time and stop the Timeout watchdog
    752            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    753            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000E   75..88       MOV       ?V4,#-0x78
   \   000011   75..13       MOV       ?V5,#0x13
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001A   7A40         MOV       R2,#0x40
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   8C..         MOV       ?V2,R4
   \   00002C   8D..         MOV       ?V3,R5
   \   00002E   78..         MOV       R0,#?V4
   \   000030   79..         MOV       R1,#?V0
   \   000032   12....       LCALL     ?L_SUB
    754          
    755            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000035                ; Setup parameters for call to function osal_stop_timerEx
   \   000035   7A40         MOV       R2,#0x40
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000041   E9           MOV       A,R1
   \   000042   6406         XRL       A,#0x6
   \   000044   6035         JZ        ??zclSampleSw_handleSceneRsp_0
    756              uint16 rsps[10] = {0}; uint8 length = 0;
   \   000046   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_2`
   \   000049   AC..         MOV       R4,?XSP + 0
   \   00004B   AD..         MOV       R5,?XSP + 1
   \   00004D   7414         MOV       A,#0x14
   \   00004F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    757              rsps[length++] = CMD_JC_ZCLREQ;
   \   000052   12....       LCALL     ?Subroutine8 & 0xFFFF
    758              rsps[length++] = SUCCESS;
    759              rsps[length++] = zclSceneRsp->cmdID;
    760              rsps[length++] = zclSceneRsp->status;
    761              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
    762              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
    763              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    764            }
   \                     ??CrossCallReturnLabel_127:
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00006D   12....       LCALL     ?UL_SHR
   \   000070   740A         MOV       A,#0xa
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000078   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    765          }
   \                     ??zclSampleSw_handleSceneRsp_0:
   \   00007B                REQUIRE ?Subroutine4
   \   00007B                ; // Fall through to label ?Subroutine4
    766          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    767          static void zclSampleSw_handleIdentifyQueryRsp(zclIdentifyQueryRsp_t* zclIdentifyRsp)
   \                     zclSampleSw_handleIdentifyQueryRsp:
    768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    769          
    770            // Calculate the elpased time and stop the Timeout watchdog
    771            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    772            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000A   75..88       MOV       ?V4,#-0x78
   \   00000D   75..13       MOV       ?V5,#0x13
   \   000010   75..00       MOV       ?V6,#0x0
   \   000013   75..00       MOV       ?V7,#0x0
   \   000016                ; Setup parameters for call to function osal_get_timeoutEx
   \   000016   7A40         MOV       R2,#0x40
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000022   8A..         MOV       ?V0,R2
   \   000024   8B..         MOV       ?V1,R3
   \   000026   8C..         MOV       ?V2,R4
   \   000028   8D..         MOV       ?V3,R5
   \   00002A   78..         MOV       R0,#?V4
   \   00002C   79..         MOV       R1,#?V0
   \   00002E   12....       LCALL     ?L_SUB
    773          
    774            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000031                ; Setup parameters for call to function osal_stop_timerEx
   \   000031   7A40         MOV       R2,#0x40
   \   000033   7B00         MOV       R3,#0x0
   \   000035   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00003D   E9           MOV       A,R1
   \   00003E   6406         XRL       A,#0x6
   \   000040   6049         JZ        ??zclSampleSw_handleIdentifyQueryRsp_0
    775              uint16 rsps[10] = {0}; uint8 length = 0;
   \   000042   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_3`
   \   000045   AC..         MOV       R4,?XSP + 0
   \   000047   AD..         MOV       R5,?XSP + 1
   \   000049   7414         MOV       A,#0x14
   \   00004B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    776              rsps[length++] = CMD_JC_ZCLREQ;
   \   00004E   12....       LCALL     ?Subroutine8 & 0xFFFF
    777              rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_128:
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ?Subroutine17 & 0xFFFF
    778              rsps[length++] = 0;
   \                     ??CrossCallReturnLabel_30:
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E4           CLR       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
    779              rsps[length++] = SUCCESS;
   \   00005E   7406         MOV       A,#0x6
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   E4           CLR       A
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   F0           MOVX      @DPTR,A
    780              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
   \   000067   85....       MOV       ?V0,?V4
   \   00006A   85....       MOV       ?V1,?V5
   \   00006D   7408         MOV       A,#0x8
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E5..         MOV       A,?V0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E5..         MOV       A,?V1
   \   000078   F0           MOVX      @DPTR,A
    781              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
   \   000079   7410         MOV       A,#0x10
   \   00007B   78..         MOV       R0,#?V4
   \   00007D   12....       LCALL     ?UL_SHR
   \   000080   740A         MOV       A,#0xa
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ?Subroutine6 & 0xFFFF
    782              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    783            }
   \                     ??CrossCallReturnLabel_5:
   \   000088   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    784          
    785          }
   \                     ??zclSampleSw_handleIdentifyQueryRsp_0:
   \   00008B   02....       LJMP      ?Subroutine4 & 0xFFFF
    786          
    787          /*********************************************************************
    788           * @fn      zclSampleSw_ProcessIncomingMsg
    789           *
    790           * @brief   Process ZCL Foundation incoming message
    791           *
    792           * @param   pInMsg - pointer to the received message
    793           *
    794           * @return  none
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    798            switch ( pInMsg->zclHdr.commandID )
   \   00000A   EA           MOV       A,R2
   \   00000B   2417         ADD       A,#0x17
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   FF           MOV       R7,A
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   14           DEC       A
   \   00001E   602B         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   000020   24FD         ADD       A,#-0x3
   \   000022   602D         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   000024   24FD         ADD       A,#-0x3
   \   000026   602F         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000028   24FC         ADD       A,#-0x4
   \   00002A   6031         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002C   24FE         ADD       A,#-0x2
   \   00002E   7003         JNZ       $+5
   \   000030   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_4 & 0xFFFF
   \   000033   24FB         ADD       A,#-0x5
   \   000035   7003         JNZ       $+5
   \   000037   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_5 & 0xFFFF
   \   00003A   24FE         ADD       A,#-0x2
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_5 & 0xFFFF
   \   000041   24FE         ADD       A,#-0x2
   \   000043   7003         JNZ       $+5
   \   000045   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_6 & 0xFFFF
   \   000048   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
    799            {
    800              case ZCL_CMD_READ_RSP:
    801                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   00004B                ; Setup parameters for call to function zclSampleSw_ProcessInReadRspCmd
   \   00004B   12....       LCALL     `??zclSampleSw_ProcessInReadRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInReadRspCmd
    802                break;
   \   00004E   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
    803              case ZCL_CMD_WRITE_RSP:
    804                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   000051                ; Setup parameters for call to function zclSampleSw_ProcessInWriteRspCmd
   \   000051   12....       LCALL     `??zclSampleSw_ProcessInWriteRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInWriteRspCmd
    805                break;
   \   000054   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
    806              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    807              case ZCL_CMD_CONFIG_REPORT:
    808                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    809                break;
    810          
    811              case ZCL_CMD_CONFIG_REPORT_RSP:
    812                zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000057                ; Setup parameters for call to function zclSampleSw_ProcessInConfigReportRspCmd
   \   000057   12....       LCALL     `??zclSampleSw_ProcessInConfigReportRspCmd::?rel`; Banked call to: zclSampleSw_ProcessInConfigReportRspCmd
    813                break;
   \   00005A   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
    814          
    815              case ZCL_CMD_READ_REPORT_CFG:
    816                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    817                break;
    818          
    819              case ZCL_CMD_READ_REPORT_CFG_RSP:
    820                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    821                break;
    822          
    823              case ZCL_CMD_REPORT:
    824                //zclSampleSw_ProcessInReportCmd( pInMsg );
    825                break;
    826              case ZCL_CMD_DEFAULT_RSP:
    827                zclSampleSw_ProcessInDefaultRspCmd(pInMsg);
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000064   85..82       MOV       DPL,?XSP + 0
   \   000067   85..83       MOV       DPH,?XSP + 1
   \   00006A   E8           MOV       A,R0
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   E9           MOV       A,R1
   \   00006E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000071   90....       MOV       DPTR,#rx_zcl_cmd_id
   \   000074   E0           MOVX      A,@DPTR
   \   000075   68           XRL       A,R0
   \   000076   6003         JZ        $+5
   \   000078   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_7 & 0xFFFF
   \   00007B   75..88       MOV       ?V4,#-0x78
   \   00007E   75..13       MOV       ?V5,#0x13
   \   000081   75..00       MOV       ?V6,#0x0
   \   000084   75..00       MOV       ?V7,#0x0
   \   000087                ; Setup parameters for call to function osal_get_timeoutEx
   \   000087   7A40         MOV       R2,#0x40
   \   000089   7B00         MOV       R3,#0x0
   \   00008B   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F9           MOV       R1,A
   \   000090   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000093   8A..         MOV       ?V0,R2
   \   000095   8B..         MOV       ?V1,R3
   \   000097   8C..         MOV       ?V2,R4
   \   000099   8D..         MOV       ?V3,R5
   \   00009B   78..         MOV       R0,#?V4
   \   00009D   79..         MOV       R1,#?V0
   \   00009F   12....       LCALL     ?L_SUB
   \   0000A2                ; Setup parameters for call to function osal_stop_timerEx
   \   0000A2   7A40         MOV       R2,#0x40
   \   0000A4   7B00         MOV       R3,#0x0
   \   0000A6   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F9           MOV       R1,A
   \   0000AB   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000AE   E9           MOV       A,R1
   \   0000AF   6406         XRL       A,#0x6
   \   0000B1   607D         JZ        ??zclSampleSw_ProcessIncomingMsg_7
   \   0000B3   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP102_8
   \   0000BB   7428         MOV       A,#0x28
   \   0000BD   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   7407         MOV       A,#0x7
   \   0000C7   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   E4           CLR       A
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000D3   7406         MOV       A,#0x6
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   E8           MOV       A,R0
   \   0000D9   F0           MOVX      @DPTR,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E4           CLR       A
   \   0000DC   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000DF   F8           MOV       R0,A
   \   0000E0   7408         MOV       A,#0x8
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000E8   740A         MOV       A,#0xa
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000F0   12....       LCALL     ?UL_SHR
   \   0000F3   740C         MOV       A,#0xc
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000FB   7402         MOV       A,#0x2
   \   0000FD   12....       LCALL     ?XSTACK_DISP101_8
   \   000100   7900         MOV       R1,#0x0
   \   000102   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000105   8029         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    828                break;
    829          #ifdef ZCL_DISCOVER
    830              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    831                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   000107                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
    832                break;
    833          
    834              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    835                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \   000107                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000107   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
    836                break;
   \   00010A   8024         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    837          
    838              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    839                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   00010C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00010F   8882         MOV       DPL,R0
   \   000111   8983         MOV       DPH,R1
   \   000113   A3           INC       DPTR
   \   000114   E0           MOVX      A,@DPTR
   \   000115   FB           MOV       R3,A
   \   000116   EA           MOV       A,R2
   \   000117   C3           CLR       C
   \   000118   9B           SUBB      A,R3
   \   000119   5015         JNC       ??zclSampleSw_ProcessIncomingMsg_7
   \   00011B   0A           INC       R2
   \   00011C   80F1         SJMP      ??CrossCallReturnLabel_137
    840                break;
    841          
    842              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    843                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00011E   12....       LCALL     ?Subroutine31 & 0xFFFF
    844                break;
    845          #endif
    846              default:
    847                break;
    848            }
   \                     ??CrossCallReturnLabel_138:
   \   000121   8001         SJMP      ??zclSampleSw_ProcessIncomingMsg_8
   \                     ??zclSampleSw_ProcessIncomingMsg_9:
   \   000123   0A           INC       R2
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   000124   8882         MOV       DPL,R0
   \   000126   8983         MOV       DPH,R1
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   FB           MOV       R3,A
   \   00012B   EA           MOV       A,R2
   \   00012C   C3           CLR       C
   \   00012D   9B           SUBB      A,R3
   \   00012E   40F3         JC        ??zclSampleSw_ProcessIncomingMsg_9
    849            if (pInMsg->attrCmd)
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   000130   8E82         MOV       DPL,R6
   \   000132   8F83         MOV       DPH,R7
   \   000134   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000137   EA           MOV       A,R2
   \   000138   4B           ORL       A,R3
   \   000139   6003         JZ        ??zclSampleSw_ProcessIncomingMsg_10
    850              osal_mem_free( pInMsg->attrCmd );
   \   00013B                ; Setup parameters for call to function osal_mem_free
   \   00013B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    851          }
   \                     ??zclSampleSw_ProcessIncomingMsg_10:
   \   00013E   742A         MOV       A,#0x2a
   \   000140   02....       LJMP      ??Subroutine59_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine61_0
   \   000004                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   22           RET
    852          
    853          /*********************************************************************
    854           * @fn      zclSampleSw_ProcessInReadRspCmd
    855           *
    856           * @brief   Process the "Profile" Read Response Command
    857           *
    858           * @param   pInMsg - incoming message to process
    859           *
    860           * @return  none
    861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7901         MOV       R1,#0x1
   \   000002   7428         MOV       A,#0x28
   \   000004                REQUIRE ??Subroutine59_0
   \   000004                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    862          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInReadRspCmd:
    863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    864            zclReadRspCmd_t *readRspCmd;
    865            uint8 i;
    866          
    867            // Calculate the elpased time and stop the Timeout watchdog
    868            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    869            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000E   75..88       MOV       ?V4,#-0x78
   \   000011   75..13       MOV       ?V5,#0x13
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001A   7A40         MOV       R2,#0x40
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   8C..         MOV       ?V2,R4
   \   00002C   8D..         MOV       ?V3,R5
   \   00002E   78..         MOV       R0,#?V4
   \   000030   79..         MOV       R1,#?V0
   \   000032   12....       LCALL     ?L_SUB
    870          
    871            // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
    872            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000035                ; Setup parameters for call to function osal_stop_timerEx
   \   000035   7A40         MOV       R2,#0x40
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000041   E9           MOV       A,R1
   \   000042   6406         XRL       A,#0x6
   \   000044   6046         JZ        ??zclSampleSw_ProcessInReadRspCmd_0
    873              readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   \   000046   12....       LCALL     ?Subroutine32 & 0xFFFF
    874              uint16 rsps[20] = {0}; uint8 length = 0;
   \                     ??CrossCallReturnLabel_146:
   \   000049   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
   \   00004C   AC..         MOV       R4,?XSP + 0
   \   00004E   AD..         MOV       R5,?XSP + 1
   \   000050   7428         MOV       A,#0x28
   \   000052   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    875              rsps[length++] = CMD_JC_ZCLREQ;
   \   000055   12....       LCALL     ?Subroutine8 & 0xFFFF
    876              rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_129:
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine17 & 0xFFFF
    877              rsps[length++] = ZCL_CMD_READ_RSP; // This field is not necessary, which is kept just for uninformity of response UART message formats
   \                     ??CrossCallReturnLabel_31:
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7401         MOV       A,#0x1
   \   000063   12....       LCALL     ?Subroutine22 & 0xFFFF
    878              for (i = 0; i < readRspCmd->numAttr; i++) {
   \                     ??CrossCallReturnLabel_49:
   \   000066   8013         SJMP      ??zclSampleSw_ProcessInReadRspCmd_1
    879                rsps[length++] = readRspCmd->attrList[i].status;
   \                     ??zclSampleSw_ProcessInReadRspCmd_2:
   \   000068   ED           MOV       A,R5
   \   000069   75F006       MOV       B,#0x6
   \   00006C   12....       LCALL     ?Subroutine42 & 0xFFFF
    880              }
   \                     ??CrossCallReturnLabel_90:
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000079   0C           INC       R4
   \   00007A   0D           INC       R5
   \                     ??zclSampleSw_ProcessInReadRspCmd_1:
   \   00007B   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00007E   40E8         JC        ??zclSampleSw_ProcessInReadRspCmd_2
    881              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
   \   000080   12....       LCALL     ?Subroutine18 & 0xFFFF
    882              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
    883              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    884            }
   \                     ??CrossCallReturnLabel_34:
   \   000083   12....       LCALL     ?UL_SHR
   \   000086   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000089   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    885          
    886            return TRUE;
   \                     ??zclSampleSw_ProcessInReadRspCmd_0:
   \   00008C   02....       LJMP      ?Subroutine3 & 0xFFFF
    887          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EE           MOV       A,R6
   \   000001   2417         ADD       A,#0x17
   \   000003                REQUIRE ??Subroutine62_0
   \   000003                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A4           MUL       AB
   \   000001   FE           MOV       R6,A
   \   000002   85F0..       MOV       ?V0,B
   \   000005   AF..         MOV       R7,?V0
   \   000007   E8           MOV       A,R0
   \   000008   2E           ADD       A,R6
   \   000009   F582         MOV       DPL,A
   \   00000B   E9           MOV       A,R1
   \   00000C   3F           ADDC      A,R7
   \   00000D   F583         MOV       DPH,A
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EC           MOV       A,R4
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   FB           MOV       R3,A
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   E582         MOV       A,DPL
   \   00000F   2A           ADD       A,R2
   \   000010   FA           MOV       R2,A
   \   000011   E583         MOV       A,DPH
   \   000013   3B           ADDC      A,R3
   \   000014   FB           MOV       R3,A
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FE           MOV       R6,A
   \   00001B   ED           MOV       A,R5
   \   00001C   C3           CLR       C
   \   00001D   9E           SUBB      A,R6
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   7C03         MOV       R4,#0x3
   \   000005   7D00         MOV       R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000007   0C           INC       R4
   \   000008   7410         MOV       A,#0x10
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EC           MOV       A,R4
   \   000001   2C           ADD       A,R4
   \   000002   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7401         MOV       A,#0x1
   \   000007   2C           ADD       A,R4
   \   000008   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FD           MOV       R5,A
   \   000006   AA..         MOV       R2,?XSP + 0
   \   000008   AB..         MOV       R3,?XSP + 1
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   E582         MOV       A,DPL
   \   00000C   28           ADD       A,R0
   \   00000D   F582         MOV       DPL,A
   \   00000F   E583         MOV       A,DPH
   \   000011   39           ADDC      A,R1
   \   000012   F583         MOV       DPH,A
   \   000014                REQUIRE ??Subroutine65_0
   \   000014                ; // Fall through to label ??Subroutine65_0
    888          
    889          /*********************************************************************
    890           * @fn      zclSampleSw_ProcessInWriteRspCmd
    891           *
    892           * @brief   Process the "Profile" Write Response Command
    893           *
    894           * @param   pInMsg - incoming message to process
    895           *
    896           * @return  none
    897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInWriteRspCmd:
    899          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    900            zclWriteRspCmd_t *writeRspCmd;
    901            uint8 i;
    902          
    903            // Calculate the elpased time and stop the Timeout watchdog
    904            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    905            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000E   75..88       MOV       ?V4,#-0x78
   \   000011   75..13       MOV       ?V5,#0x13
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001A   7A40         MOV       R2,#0x40
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   8C..         MOV       ?V2,R4
   \   00002C   8D..         MOV       ?V3,R5
   \   00002E   78..         MOV       R0,#?V4
   \   000030   79..         MOV       R1,#?V0
   \   000032   12....       LCALL     ?L_SUB
    906          
    907            // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
    908            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000035                ; Setup parameters for call to function osal_stop_timerEx
   \   000035   7A40         MOV       R2,#0x40
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000041   E9           MOV       A,R1
   \   000042   6406         XRL       A,#0x6
   \   000044   6044         JZ        ??zclSampleSw_ProcessInWriteRspCmd_0
    909              writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   \   000046   12....       LCALL     ?Subroutine32 & 0xFFFF
    910              uint16 rsps[20] = {0}; uint8 length = 0;
   \                     ??CrossCallReturnLabel_147:
   \   000049   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`
   \   00004C   AC..         MOV       R4,?XSP + 0
   \   00004E   AD..         MOV       R5,?XSP + 1
   \   000050   7428         MOV       A,#0x28
   \   000052   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    911              rsps[length++] = CMD_JC_ZCLREQ;
   \   000055   12....       LCALL     ?Subroutine8 & 0xFFFF
    912              rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_130:
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine17 & 0xFFFF
    913              rsps[length++] = ZCL_CMD_WRITE_RSP; // This field is not necessary, which is kept just for uninformity of response UART message formats
   \                     ??CrossCallReturnLabel_32:
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7404         MOV       A,#0x4
   \   000063   12....       LCALL     ?Subroutine22 & 0xFFFF
    914              for (i = 0; i < writeRspCmd->numAttr; i++) {
   \                     ??CrossCallReturnLabel_50:
   \   000066   8011         SJMP      ??zclSampleSw_ProcessInWriteRspCmd_1
    915                rsps[length++] = writeRspCmd->attrList[i].status;
   \                     ??zclSampleSw_ProcessInWriteRspCmd_2:
   \   000068   ED           MOV       A,R5
   \   000069   75F003       MOV       B,#0x3
   \   00006C   12....       LCALL     ?Subroutine42 & 0xFFFF
    916              }
   \                     ??CrossCallReturnLabel_91:
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   8A82         MOV       DPL,R2
   \   000072   8B83         MOV       DPH,R3
   \   000074   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000077   0C           INC       R4
   \   000078   0D           INC       R5
   \                     ??zclSampleSw_ProcessInWriteRspCmd_1:
   \   000079   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00007C   40EA         JC        ??zclSampleSw_ProcessInWriteRspCmd_2
    917              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
   \   00007E   12....       LCALL     ?Subroutine18 & 0xFFFF
    918              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
    919              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    920            }
   \                     ??CrossCallReturnLabel_35:
   \   000081   12....       LCALL     ?UL_SHR
   \   000084   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000087   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    921          
    922            return TRUE;
   \                     ??zclSampleSw_ProcessInWriteRspCmd_0:
   \   00008A   02....       LJMP      ?Subroutine3 & 0xFFFF
    923          }
    924          
    925          /*********************************************************************
    926           * @fn      zclSampleSw_ProcessInConfigReportRspCmd
    927           *
    928           * @brief   Process the "Profile" Configure Reporting Response Command
    929           *
    930           * @param   pInMsg - incoming message to process
    931           *
    932           * @return  none
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          static uint8 zclSampleSw_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInConfigReportRspCmd:
    935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    936            zclCfgReportRspCmd_t *cfgReportRspCmd;
    937            uint8 i;
    938          
    939            // Calculate the elpased time and stop the Timeout watchdog
    940            uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    941            uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
   \   00000E   75..88       MOV       ?V4,#-0x78
   \   000011   75..13       MOV       ?V5,#0x13
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   75..00       MOV       ?V7,#0x0
   \   00001A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001A   7A40         MOV       R2,#0x40
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   8C..         MOV       ?V2,R4
   \   00002C   8D..         MOV       ?V3,R5
   \   00002E   78..         MOV       R0,#?V4
   \   000030   79..         MOV       R1,#?V0
   \   000032   12....       LCALL     ?L_SUB
    942          
    943            // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
    944            if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000035                ; Setup parameters for call to function osal_stop_timerEx
   \   000035   7A40         MOV       R2,#0x40
   \   000037   7B00         MOV       R3,#0x0
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000041   E9           MOV       A,R1
   \   000042   6406         XRL       A,#0x6
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??zclSampleSw_ProcessInConfigReportRspCmd_0 & 0xFFFF
    945              cfgReportRspCmd = (zclCfgReportRspCmd_t *)pInMsg->attrCmd;
   \   000049   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00004C   E8           MOV       A,R0
   \   00004D   FA           MOV       R2,A
   \   00004E   E9           MOV       A,R1
   \   00004F   FB           MOV       R3,A
    946              uint16 rsps[20] = {0}; uint8 length = 0;
   \   000050   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`
   \   000053   AC..         MOV       R4,?XSP + 0
   \   000055   AD..         MOV       R5,?XSP + 1
   \   000057   7428         MOV       A,#0x28
   \   000059   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    947              rsps[length++] = CMD_JC_ZCLREQ;
   \   00005C   12....       LCALL     ?Subroutine8 & 0xFFFF
    948              rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_131:
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine17 & 0xFFFF
    949              rsps[length++] = ZCL_CMD_WRITE_RSP; // This field is not necessary, which is kept just for uninformity of response UART message formats
   \                     ??CrossCallReturnLabel_33:
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00006D   7E03         MOV       R6,#0x3
    950              for (i = 0; i < cfgReportRspCmd->numAttr; i++) {
   \   00006F   7F00         MOV       R7,#0x0
   \   000071   8022         SJMP      ??zclSampleSw_ProcessInConfigReportRspCmd_1
    951                rsps[length++] = cfgReportRspCmd->attrList[i].status;
   \                     ??zclSampleSw_ProcessInConfigReportRspCmd_2:
   \   000073   EF           MOV       A,R7
   \   000074   F5..         MOV       ?V0,A
   \   000076   75..00       MOV       ?V1,#0x0
   \   000079   7402         MOV       A,#0x2
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?S_SHL
   \   000080   EA           MOV       A,R2
   \   000081   25..         ADD       A,?V0
   \   000083   F582         MOV       DPL,A
   \   000085   EB           MOV       A,R3
   \   000086   35..         ADDC      A,?V1
   \   000088   F583         MOV       DPH,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   8C82         MOV       DPL,R4
   \   00008E   8D83         MOV       DPH,R5
   \   000090   12....       LCALL     ??Subroutine64_0 & 0xFFFF
    952              }
   \                     ??CrossCallReturnLabel_157:
   \   000093   0E           INC       R6
   \   000094   0F           INC       R7
   \                     ??zclSampleSw_ProcessInConfigReportRspCmd_1:
   \   000095   EE           MOV       A,R6
   \   000096   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000099   F8           MOV       R0,A
   \   00009A   E583         MOV       A,DPH
   \   00009C   39           ADDC      A,R1
   \   00009D   F9           MOV       R1,A
   \   00009E   E8           MOV       A,R0
   \   00009F   FC           MOV       R4,A
   \   0000A0   E9           MOV       A,R1
   \   0000A1   FD           MOV       R5,A
   \   0000A2   8A82         MOV       DPL,R2
   \   0000A4   8B83         MOV       DPH,R3
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F8           MOV       R0,A
   \   0000A8   EF           MOV       A,R7
   \   0000A9   C3           CLR       C
   \   0000AA   98           SUBB      A,R0
   \   0000AB   40C6         JC        ??zclSampleSw_ProcessInConfigReportRspCmd_2
    953              rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
   \   0000AD   8C82         MOV       DPL,R4
   \   0000AF   8D83         MOV       DPH,R5
   \   0000B1   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000B4   0E           INC       R6
    954              rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
   \   0000B5   7410         MOV       A,#0x10
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?UL_SHR
   \   0000BC   EE           MOV       A,R6
   \   0000BD   2E           ADD       A,R6
   \   0000BE   12....       LCALL     ?Subroutine46 & 0xFFFF
    955              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_171:
   \   0000C1                ; Setup parameters for call to function HalUARTWrite
   \   0000C1   7401         MOV       A,#0x1
   \   0000C3   2E           ADD       A,R6
   \   0000C4   12....       LCALL     ?Subroutine52 & 0xFFFF
    956            }
   \                     ??CrossCallReturnLabel_109:
   \   0000C7   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    957          
    958            return TRUE;
   \                     ??zclSampleSw_ProcessInConfigReportRspCmd_0:
   \   0000CA   02....       LJMP      ?Subroutine3 & 0xFFFF
    959          }
    960          
    961          /*********************************************************************
    962           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    963           *
    964           * @brief   Process the "Profile" Default Response Command
    965           *
    966           * @param   pInMsg - incoming message to process
    967           *
    968           * @return  none
    969           */
    970          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    971          {
    972            zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    973            if (defaultRspCmd->commandID != rx_zcl_cmd_id) {
    974                // If the default response is not related with our injected ZCL command: Just skip it.
    975            }
    976            else {
    977                // Calculate the elpased time and stop the Timeout watchdog
    978                uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    979                uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
    980                // Stop the Timeout watchdog and check its status. If it has not reached timeouts, do not send UART message back to fuzzer.
    981                if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
    982                  // Generate the response
    983                  // Device is notified of the Default Response command.
    984                  uint16 rsps[20] = {0}; uint8 length = 0;
    985                  rsps[length++] = CMD_JC_ZCLREQ;
    986                  rsps[length++] = SUCCESS;
    987                  rsps[length++] = defaultRspCmd->commandID;
    988                  rsps[length++] = defaultRspCmd->statusCode;
    989                  rsps[length++] = (uint16)(elapsed_tick_count & 0xffff);
    990                  rsps[length++] = (uint16)((elapsed_tick_count >> 16) & 0xffff);
    991                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    992                }
    993            }
    994            return TRUE;
    995          }
    996          
    997          #ifdef ZCL_DISCOVER
    998          /*********************************************************************
    999           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
   1000           *
   1001           * @brief   Process the Discover Commands Response Command
   1002           *
   1003           * @param   pInMsg - incoming message to process
   1004           *
   1005           * @return  none
   1006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1007          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
   1008          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1009            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1010            uint8 i;
   1011          
   1012            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1013            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_136:
   \   000010   8001         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
   1014            {
   1015              // Device is notified of the result of its attribute discovery command.
   1016            }
   1017          
   1018            return TRUE;
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine2 & 0xFFFF
   1019          }
   1020          
   1021          /*********************************************************************
   1022           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
   1023           *
   1024           * @brief   Process the "Profile" Discover Attributes Response Command
   1025           *
   1026           * @param   pInMsg - incoming message to process
   1027           *
   1028           * @return  none
   1029           */
   1030          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1031          {
   1032            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1033            uint8 i;
   1034          
   1035            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1036            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1037            {
   1038              // Device is notified of the result of its attribute discovery command.
   1039            }
   1040          
   1041            return TRUE;
   1042          }
   1043          
   1044          /*********************************************************************
   1045           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
   1046           *
   1047           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1048           *
   1049           * @param   pInMsg - incoming message to process
   1050           *
   1051           * @return  none
   1052           */
   1053          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1054          {
   1055            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1056            uint8 i;
   1057          
   1058            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1059            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1060            {
   1061              // Device is notified of the result of its attribute discovery command.
   1062            }
   1063          
   1064            return TRUE;
   1065          }
   1066          #endif // ZCL_DISCOVER
   1067          
   1068          /**
   1069           * @fn      zclSampleSw_InitUart
   1070           *
   1071           * @brief   init. and open Uart
   1072           */
   1073          static void zclSampleSw_InitUart(void)
   1074          {
   1075            halUARTCfg_t uartConfig;
   1076          
   1077            /* UART Configuration */
   1078            uartConfig.configured           = TRUE;
   1079            uartConfig.baudRate             = HAL_UART_BR_115200;
   1080            uartConfig.flowControl          = FALSE;
   1081            uartConfig.flowControlThreshold = 0;
   1082            uartConfig.rx.maxBufSize        = ZCLSAMPLESW_UART_BUF_LEN;
   1083            uartConfig.tx.maxBufSize        = 0;
   1084            uartConfig.idleTimeout          = 6;
   1085            uartConfig.intEnable            = TRUE;
   1086            uartConfig.callBackFunc         = zclSampleSw_UartCB;
   1087          
   1088            /* Start UART */
   1089            HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
   1090          }
   1091          
   1092          /*********************************************************************
   1093           * @fn      zclSampleSw_ProcessUartMsgs
   1094           *
   1095           * @brief   Called when this node receives a ZDO/ZDP response.
   1096           *
   1097           * @param   uint8 *uartMsg
   1098           *
   1099           * @return  status
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          static uint8 zclSampleSw_ProcessUartMsgs( uint8 *uartMsg, uint8 msgLen)
   \                     zclSampleSw_ProcessUartMsgs:
   1102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV       A,#-0x41
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   740A         MOV       A,#0xa
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E9           MOV       A,R1
   \   00001B   F0           MOVX      @DPTR,A
   1103            uint8 stat = SUCCESS;
   \   00001C   75..00       MOV       ?V0,#0x0
   1104            current_cmd_type = uartMsg[0];
   \   00001F   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000022   FC           MOV       R4,A
   \   000023   90....       MOV       DPTR,#current_cmd_type
   \   000026   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000029   2403         ADD       A,#0x3
   \   00002B   F8           MOV       R0,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   3400         ADDC      A,#0x0
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   FA           MOV       R2,A
   \   000033   E9           MOV       A,R1
   \   000034   FB           MOV       R3,A
   \   000035   EC           MOV       A,R4
   \   000036   602B         JZ        ??zclSampleSw_ProcessUartMsgs_0
   \   000038   14           DEC       A
   \   000039   604A         JZ        ??zclSampleSw_ProcessUartMsgs_1
   \   00003B   14           DEC       A
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_2 & 0xFFFF
   \   000041   14           DEC       A
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_3 & 0xFFFF
   \   000047   14           DEC       A
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_4 & 0xFFFF
   \   00004D   14           DEC       A
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_5 & 0xFFFF
   \   000053   24FE         ADD       A,#-0x2
   \   000055   7003         JNZ       $+5
   \   000057   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_6 & 0xFFFF
   \   00005A   14           DEC       A
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_7 & 0xFFFF
   \   000060   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_8 & 0xFFFF
   1105            switch (uartMsg[0])
   1106            {
   1107              case CMD_JC_STEER:         // RX: (uint8)CMD_JC_STEER+(uint8)period  TX: [CMD_JC_STEER,stat]
   1108              {
   1109                stat = NLME_PermitJoiningRequest(uartMsg[1]);
   \                     ??zclSampleSw_ProcessUartMsgs_0:
   \   000063                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000063   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000066   F9           MOV       R1,A
   \   000067   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   00006A   E9           MOV       A,R1
   \   00006B   F5..         MOV       ?V0,A
   1110                uint16 rsps[2] = {0}; uint8 length = 0;
   \   00006D   90....       MOV       DPTR,#`?<Constant {0, 0}>_1`
   \   000070   7402         MOV       A,#0x2
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7404         MOV       A,#0x4
   \   000077   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1111                rsps[length++] = CMD_JC_STEER;
   \   00007A   7402         MOV       A,#0x2
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E4           CLR       A
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_9 & 0xFFFF
   1112                rsps[length++] = stat;
   1113                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1114                break;
   1115              }
   1116              case CMD_JC_LIST:         // RX: (uint8)CMD_JC_LIST   TX: [CMD_JC_LIST,Nwkaddr,nodeRelation]
   1117              {
   1118                uint16 n_asso = AssocCount(PARENT, CHILD_RFD) + AssocCount(PARENT, CHILD_RFD_RX_IDLE) +\
   1119                                AssocCount(PARENT, CHILD_FFD) + AssocCount(PARENT, CHILD_FFD_RX_IDLE);
   \                     ??zclSampleSw_ProcessUartMsgs_1:
   \   000085                ; Setup parameters for call to function AssocCount
   \   000085   7A01         MOV       R2,#0x1
   \   000087   7900         MOV       R1,#0x0
   \   000089   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   00008C   8A..         MOV       ?V2,R2
   \   00008E   8B..         MOV       ?V3,R3
   \   000090   AF..         MOV       R7,?V3
   \   000092                ; Setup parameters for call to function AssocCount
   \   000092   7A02         MOV       R2,#0x2
   \   000094   7900         MOV       R1,#0x0
   \   000096   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000099   8B..         MOV       ?V3,R3
   \   00009B   E5..         MOV       A,?V2
   \   00009D   2A           ADD       A,R2
   \   00009E   FE           MOV       R6,A
   \   00009F   EF           MOV       A,R7
   \   0000A0   35..         ADDC      A,?V3
   \   0000A2   FF           MOV       R7,A
   \   0000A3                ; Setup parameters for call to function AssocCount
   \   0000A3   7A03         MOV       R2,#0x3
   \   0000A5   7900         MOV       R1,#0x0
   \   0000A7   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   0000AA   8B..         MOV       ?V3,R3
   \   0000AC   A9..         MOV       R1,?V3
   \   0000AE   EE           MOV       A,R6
   \   0000AF   2A           ADD       A,R2
   \   0000B0   FE           MOV       R6,A
   \   0000B1   EF           MOV       A,R7
   \   0000B2   39           ADDC      A,R1
   \   0000B3   FF           MOV       R7,A
   \   0000B4                ; Setup parameters for call to function AssocCount
   \   0000B4   7A04         MOV       R2,#0x4
   \   0000B6   7900         MOV       R1,#0x0
   \   0000B8   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   0000BB   8B..         MOV       ?V3,R3
   \   0000BD   EE           MOV       A,R6
   \   0000BE   2A           ADD       A,R2
   \   0000BF   FE           MOV       R6,A
   \   0000C0   EF           MOV       A,R7
   \   0000C1   35..         ADDC      A,?V3
   \   0000C3   FF           MOV       R7,A
   1120                
   1121                uint16 rsps[10] = {0}; uint8 length = 0;
   \   0000C4   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_4`
   \   0000C7   742D         MOV       A,#0x2d
   \   0000C9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CC   7414         MOV       A,#0x14
   \   0000CE   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1122                rsps[length++] = CMD_JC_LIST;
   \   0000D1   742D         MOV       A,#0x2d
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   7401         MOV       A,#0x1
   \   0000D8   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   1123                rsps[length++] = stat;
   \                     ??CrossCallReturnLabel_158:
   \   0000DB   742F         MOV       A,#0x2f
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   E4           CLR       A
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   75..02       MOV       ?V1,#0x2
   1124                for (uint16 i = 0; i < n_asso; i++)
   \   0000E7   F8           MOV       R0,A
   \   0000E8   F9           MOV       R1,A
   \   0000E9   8065         SJMP      ??zclSampleSw_ProcessUartMsgs_10
   1125                {
   1126                  rsps[length++] = AssociatedDevList[i].shortAddr;
   \                     ??zclSampleSw_ProcessUartMsgs_11:
   \   0000EB   E8           MOV       A,R0
   \   0000EC   FA           MOV       R2,A
   \   0000ED   E9           MOV       A,R1
   \   0000EE   FB           MOV       R3,A
   \   0000EF   EA           MOV       A,R2
   \   0000F0   75F01C       MOV       B,#0x1c
   \   0000F3   A4           MUL       AB
   \   0000F4   FA           MOV       R2,A
   \   0000F5   85F0..       MOV       ?V2,B
   \   0000F8   75F01C       MOV       B,#0x1c
   \   0000FB   EB           MOV       A,R3
   \   0000FC   A4           MUL       AB
   \   0000FD   25..         ADD       A,?V2
   \   0000FF   FB           MOV       R3,A
   \   000100   74..         MOV       A,#AssociatedDevList & 0xff
   \   000102   2A           ADD       A,R2
   \   000103   FA           MOV       R2,A
   \   000104   74..         MOV       A,#(AssociatedDevList >> 8) & 0xff
   \   000106   3B           ADDC      A,R3
   \   000107   FB           MOV       R3,A
   \   000108   8A82         MOV       DPL,R2
   \   00010A   8B83         MOV       DPH,R3
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F5..         MOV       ?V2,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   F5..         MOV       ?V3,A
   \   000113   742D         MOV       A,#0x2d
   \   000115   12....       LCALL     ?XSTACK_DISP0_8
   \   000118   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00011B   E5..         MOV       A,?V2
   \   00011D   F0           MOVX      @DPTR,A
   \   00011E   A3           INC       DPTR
   \   00011F   E5..         MOV       A,?V3
   \   000121   F0           MOVX      @DPTR,A
   \   000122   05..         INC       ?V1
   1127                  rsps[length++] = AssociatedDevList[i].nodeRelation;
   \   000124   8A82         MOV       DPL,R2
   \   000126   8B83         MOV       DPH,R3
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   FC           MOV       R4,A
   \   00012E   AA..         MOV       R2,?V1
   \   000130   EA           MOV       A,R2
   \   000131   2A           ADD       A,R2
   \   000132   FA           MOV       R2,A
   \   000133   E4           CLR       A
   \   000134   33           RLC       A
   \   000135   FB           MOV       R3,A
   \   000136   742D         MOV       A,#0x2d
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   E582         MOV       A,DPL
   \   00013D   2A           ADD       A,R2
   \   00013E   F582         MOV       DPL,A
   \   000140   E583         MOV       A,DPH
   \   000142   3B           ADDC      A,R3
   \   000143   F583         MOV       DPH,A
   \   000145   EC           MOV       A,R4
   \   000146   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   1128                }
   \                     ??CrossCallReturnLabel_159:
   \   000149   05..         INC       ?V1
   \   00014B   08           INC       R0
   \   00014C   E8           MOV       A,R0
   \   00014D   7001         JNZ       ??zclSampleSw_ProcessUartMsgs_10
   \   00014F   09           INC       R1
   \                     ??zclSampleSw_ProcessUartMsgs_10:
   \   000150   AC..         MOV       R4,?V1
   \   000152   EC           MOV       A,R4
   \   000153   2C           ADD       A,R4
   \   000154   FC           MOV       R4,A
   \   000155   E4           CLR       A
   \   000156   33           RLC       A
   \   000157   FD           MOV       R5,A
   \   000158   E8           MOV       A,R0
   \   000159   9E           SUBB      A,R6
   \   00015A   E9           MOV       A,R1
   \   00015B   9F           SUBB      A,R7
   \   00015C   408D         JC        ??zclSampleSw_ProcessUartMsgs_11
   1129                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \   00015E                ; Setup parameters for call to function HalUARTWrite
   \   00015E   742D         MOV       A,#0x2d
   \   000160   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_12 & 0xFFFF
   1130                break;
   1131              }
   1132              case CMD_JC_NODEREQ:         // RX: (uint8)CMD_JC_NODEREQ+(uint16)nwkAddr
   1133              {
   1134                node_cmd_rx = 1;
   \                     ??zclSampleSw_ProcessUartMsgs_2:
   \   000163   90....       MOV       DPTR,#node_cmd_rx
   \   000166   12....       LCALL     ?Subroutine7 & 0xFFFF
   1135                zAddrType_t srcAddr;
   1136                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??CrossCallReturnLabel_6:
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   12....       LCALL     ?Subroutine16 & 0xFFFF
   1137                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_25:
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   7402         MOV       A,#0x2
   \   000174   F0           MOVX      @DPTR,A
   1138                stat = ZDP_NodeDescReq(&srcAddr, srcAddr.addr.shortAddr, 0);
   \   000175                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000175   78..         MOV       R0,#?V0
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017A   7902         MOV       R1,#0x2
   \   00017C   740E         MOV       A,#0xe
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000184   12....       LCALL     ?XSTACK_DISP101_8
   \   000187   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00018A   7401         MOV       A,#0x1
   \   00018C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018F   E9           MOV       A,R1
   \   000190   F5..         MOV       ?V0,A
   1139                if (stat != afStatus_SUCCESS) {
   \   000192   7003         JNZ       $+5
   \   000194   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
   1140                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   000197   90....       MOV       DPTR,#`?<Constant {0, 0}>_2`
   \   00019A   7402         MOV       A,#0x2
   \   00019C   12....       LCALL     ?XSTACK_DISP102_8
   \   00019F   7404         MOV       A,#0x4
   \   0001A1   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1141                  rsps[length++] = CMD_JC_NODEREQ;
   \   0001A4   7402         MOV       A,#0x2
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   7402         MOV       A,#0x2
   \   0001AB   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_14 & 0xFFFF
   1142                  rsps[length++] = stat;
   1143                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1144                }
   1145                else {
   1146                  // The successfull UART response is generated in function
   1147                  // Set a timer for TIMEOUT detection
   1148                  osal_start_timerEx(zclSampleSw_TaskID, 
   1149                                     SAMPLEAPP_ACT_EVT, 
   1150                                     SAMPLEAPP_ACT_TIMEOUT);
   1151                }
   1152                break;
   1153              }
   1154              case CMD_JC_AEPREQ:         // RX: (uint8)CMD_JC_AEPREQ+(uint16)nwkAddr
   1155              {
   1156                endpoint_cmd_rx = 1;
   \                     ??zclSampleSw_ProcessUartMsgs_3:
   \   0001AE   90....       MOV       DPTR,#endpoint_cmd_rx
   \   0001B1   12....       LCALL     ?Subroutine7 & 0xFFFF
   1157                zAddrType_t srcAddr;
   1158                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??CrossCallReturnLabel_7:
   \   0001B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B7   12....       LCALL     ?Subroutine16 & 0xFFFF
   1159                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_26:
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   7402         MOV       A,#0x2
   \   0001BF   F0           MOVX      @DPTR,A
   1160                stat = ZDP_ActiveEPReq(&srcAddr, srcAddr.addr.shortAddr, 0);
   \   0001C0                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   0001C0   78..         MOV       R0,#?V0
   \   0001C2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C5   7905         MOV       R1,#0x5
   \   0001C7   740E         MOV       A,#0xe
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D2   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   0001D5   7401         MOV       A,#0x1
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DA   E9           MOV       A,R1
   \   0001DB   F5..         MOV       ?V0,A
   1161                if (stat != afStatus_SUCCESS) {
   \   0001DD   7003         JNZ       $+5
   \   0001DF   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
   1162                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   0001E2   90....       MOV       DPTR,#`?<Constant {0, 0}>_3`
   \   0001E5   7402         MOV       A,#0x2
   \   0001E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EA   7404         MOV       A,#0x4
   \   0001EC   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1163                  rsps[length++] = CMD_JC_AEPREQ;
   \   0001EF   7402         MOV       A,#0x2
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   7403         MOV       A,#0x3
   \   0001F6   8056         SJMP      ??zclSampleSw_ProcessUartMsgs_14
   1164                  rsps[length++] = stat;
   1165                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1166                }
   1167                else {
   1168                  // The successfull UART response is generated in function
   1169                  // Set a timer for TIMEOUT detection
   1170                  osal_start_timerEx(zclSampleSw_TaskID, 
   1171                                     SAMPLEAPP_ACT_EVT, 
   1172                                     SAMPLEAPP_ACT_TIMEOUT);
   1173                }
   1174                break;
   1175              }
   1176              case CMD_JC_CLUREQ:         // RX: (uint8)CMD_JC_AEPREQ+(uint16)nwkAddr+(uint8)ep
   1177              {
   1178                cluster_cmd_rx = 1;
   \                     ??zclSampleSw_ProcessUartMsgs_4:
   \   0001F8   90....       MOV       DPTR,#cluster_cmd_rx
   \   0001FB   7401         MOV       A,#0x1
   \   0001FD   12....       LCALL     ?Subroutine13 & 0xFFFF
   1179                zAddrType_t srcAddr;
   1180                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??CrossCallReturnLabel_19:
   \   000200   FC           MOV       R4,A
   \   000201   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000204   EC           MOV       A,R4
   \   000205   F8           MOV       R0,A
   \   000206   740D         MOV       A,#0xd
   \   000208   12....       LCALL     ?XSTACK_DISP0_8
   \   00020B   12....       LCALL     ?Subroutine16 & 0xFFFF
   1181                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_27:
   \   00020E   12....       LCALL     ?XSTACK_DISP0_8
   \   000211   7402         MOV       A,#0x2
   \   000213   F0           MOVX      @DPTR,A
   1182                stat = ZDP_SimpleDescReq(&srcAddr, srcAddr.addr.shortAddr, uartMsg[3], 0);
   \   000214                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000214   78..         MOV       R0,#?V0
   \   000216   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000219   8A82         MOV       DPL,R2
   \   00021B   8B83         MOV       DPH,R3
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   F9           MOV       R1,A
   \   00021F   740E         MOV       A,#0xe
   \   000221   12....       LCALL     ?XSTACK_DISP0_8
   \   000224   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000227   12....       LCALL     ?XSTACK_DISP101_8
   \   00022A   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00022D   7401         MOV       A,#0x1
   \   00022F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000232   E9           MOV       A,R1
   \   000233   F5..         MOV       ?V0,A
   1183                if (stat != afStatus_SUCCESS) {
   \   000235   7003         JNZ       $+5
   \   000237   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
   1184                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   00023A   90....       MOV       DPTR,#`?<Constant {0, 0}>_4`
   \   00023D   7402         MOV       A,#0x2
   \   00023F   12....       LCALL     ?XSTACK_DISP102_8
   \   000242   7404         MOV       A,#0x4
   \   000244   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1185                  rsps[length++] = CMD_JC_CLUREQ;
   \   000247   7402         MOV       A,#0x2
   \   000249   12....       LCALL     ?XSTACK_DISP0_8
   \   00024C   7404         MOV       A,#0x4
   \                     ??zclSampleSw_ProcessUartMsgs_14:
   \   00024E   F0           MOVX      @DPTR,A
   \   00024F   A3           INC       DPTR
   \   000250   E4           CLR       A
   \                     ??zclSampleSw_ProcessUartMsgs_9:
   \   000251   F0           MOVX      @DPTR,A
   1186                  rsps[length++] = stat;
   \   000252   7404         MOV       A,#0x4
   \   000254   12....       LCALL     ?XSTACK_DISP0_8
   \   000257   E9           MOV       A,R1
   \   000258   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_15 & 0xFFFF
   1187                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1188                }
   1189                else {
   1190                  // The successfull UART response is generated in function
   1191                  // Set a timer for TIMEOUT detection
   1192                  osal_start_timerEx(zclSampleSw_TaskID, 
   1193                                     SAMPLEAPP_ACT_EVT, 
   1194                                     SAMPLEAPP_ACT_TIMEOUT);
   1195                }
   1196                break;
   1197              }
   1198              case CMD_JC_CMDREQ:         // RX: (uint8)CMD_JC_CMDREQ+(uint16)nwkAddr+(uint8)flag+(uint8)ep+(uint16)cid+(uint16)pid+(uint8)len+(byte *)payload
   1199              {
   1200                uint16 nwkAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??zclSampleSw_ProcessUartMsgs_5:
   \   00025B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00025E   F8           MOV       R0,A
   \   00025F   E4           CLR       A
   \   000260   C8           XCH       A,R0
   \   000261   F9           MOV       R1,A
   \   000262   EC           MOV       A,R4
   \   000263   28           ADD       A,R0
   \   000264   F5..         MOV       ?V2,A
   \   000266   E4           CLR       A
   \   000267   39           ADDC      A,R1
   \   000268   F5..         MOV       ?V3,A
   1201                uint8 flag = uartMsg[3];
   \   00026A   8A82         MOV       DPL,R2
   \   00026C   8B83         MOV       DPH,R3
   \   00026E   E0           MOVX      A,@DPTR
   \   00026F   F5..         MOV       ?V4,A
   1202                uint8 endpoint = uartMsg[4];
   \   000271   85..82       MOV       DPL,?XSP + 0
   \   000274   85..83       MOV       DPH,?XSP + 1
   \   000277   E0           MOVX      A,@DPTR
   \   000278   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00027B   C0E0         PUSH      A
   \   00027D   7406         MOV       A,#0x6
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   D0E0         POP       A
   \   000284   12....       LCALL     ?Subroutine5 & 0xFFFF
   1203                uint16 cid = BUILD_UINT16(uartMsg[5], uartMsg[6]);
   \                     ??CrossCallReturnLabel_0:
   \   000287   12....       LCALL     ?Subroutine28 & 0xFFFF
   1204                uint16 pid = BUILD_UINT16(uartMsg[7], uartMsg[8]);
   1205                uint8 len = uartMsg[9];
   \                     ??CrossCallReturnLabel_60:
   \   00028A   F5..         MOV       ?V5,A
   1206                uint8 *payload = osal_mem_alloc(len);
   \   00028C   FE           MOV       R6,A
   \   00028D                ; Setup parameters for call to function osal_mem_alloc
   \   00028D   FA           MOV       R2,A
   \   00028E   7B00         MOV       R3,#0x0
   \   000290   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000293   7408         MOV       A,#0x8
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   12....       LCALL     ?Subroutine24 & 0xFFFF
   1207                for (int i = 1; i <= len; i++)
   \                     ??CrossCallReturnLabel_51:
   \   00029B   AA..         MOV       R2,?V5
   \   00029D   802F         SJMP      ??zclSampleSw_ProcessUartMsgs_16
   1208                {
   1209                  payload[len-i] = uartMsg[msgLen-i];
   \                     ??zclSampleSw_ProcessUartMsgs_17:
   \   00029F   740A         MOV       A,#0xa
   \   0002A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   C3           CLR       C
   \   0002A6   98           SUBB      A,R0
   \   0002A7   FC           MOV       R4,A
   \   0002A8   E4           CLR       A
   \   0002A9   99           SUBB      A,R1
   \   0002AA   FD           MOV       R5,A
   \   0002AB   85..82       MOV       DPL,?XSP + 0
   \   0002AE   85..83       MOV       DPH,?XSP + 1
   \   0002B1   12....       LCALL     ?Subroutine30 & 0xFFFF
   1210                }
   \                     ??CrossCallReturnLabel_68:
   \   0002B4   E0           MOVX      A,@DPTR
   \   0002B5   C0E0         PUSH      A
   \   0002B7   EA           MOV       A,R2
   \   0002B8   C3           CLR       C
   \   0002B9   98           SUBB      A,R0
   \   0002BA   FC           MOV       R4,A
   \   0002BB   E4           CLR       A
   \   0002BC   99           SUBB      A,R1
   \   0002BD   FD           MOV       R5,A
   \   0002BE   7408         MOV       A,#0x8
   \   0002C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C3   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0002C6   D0E0         POP       A
   \   0002C8   F0           MOVX      @DPTR,A
   \   0002C9   08           INC       R0
   \   0002CA   E8           MOV       A,R0
   \   0002CB   7001         JNZ       ??zclSampleSw_ProcessUartMsgs_16
   \   0002CD   09           INC       R1
   \                     ??zclSampleSw_ProcessUartMsgs_16:
   \   0002CE   C3           CLR       C
   \   0002CF   EA           MOV       A,R2
   \   0002D0   98           SUBB      A,R0
   \   0002D1   E4           CLR       A
   \   0002D2   99           SUBB      A,R1
   \   0002D3   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0002D5   65D0         XRL       A,PSW
   \   0002D7   33           RLC       A
   \   0002D8   50C5         JNC       ??zclSampleSw_ProcessUartMsgs_17
   1211                stat = inject_afData(nwkAddr, flag, endpoint, cid, pid, len, payload);
   \   0002DA   7406         MOV       A,#0x6
   \   0002DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DF   E0           MOVX      A,@DPTR
   \   0002E0   F8           MOV       R0,A
   \   0002E1   E5..         MOV       A,?V4
   \   0002E3   7013         JNZ       ??zclSampleSw_ProcessUartMsgs_18
   \   0002E5   7421         MOV       A,#0x21
   \   0002E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EA   740F         MOV       A,#0xf
   \   0002EC   F0           MOVX      @DPTR,A
   \   0002ED   7419         MOV       A,#0x19
   \   0002EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F2   74FF         MOV       A,#-0x1
   \   0002F4   F0           MOVX      @DPTR,A
   \   0002F5   A3           INC       DPTR
   \   0002F6   8028         SJMP      ??zclSampleSw_ProcessUartMsgs_19
   \                     ??zclSampleSw_ProcessUartMsgs_18:
   \   0002F8   7401         MOV       A,#0x1
   \   0002FA   65..         XRL       A,?V4
   \   0002FC   7009         JNZ       ??zclSampleSw_ProcessUartMsgs_20
   \   0002FE   7421         MOV       A,#0x21
   \   000300   12....       LCALL     ?XSTACK_DISP0_8
   \   000303   7401         MOV       A,#0x1
   \   000305   800D         SJMP      ??zclSampleSw_ProcessUartMsgs_21
   \                     ??zclSampleSw_ProcessUartMsgs_20:
   \   000307   7410         MOV       A,#0x10
   \   000309   65..         XRL       A,?V4
   \   00030B   7014         JNZ       ??zclSampleSw_ProcessUartMsgs_22
   \   00030D   7421         MOV       A,#0x21
   \   00030F   12....       LCALL     ?XSTACK_DISP0_8
   \   000312   7402         MOV       A,#0x2
   \                     ??zclSampleSw_ProcessUartMsgs_21:
   \   000314   F0           MOVX      @DPTR,A
   \   000315   7419         MOV       A,#0x19
   \   000317   12....       LCALL     ?XSTACK_DISP0_8
   \   00031A   E5..         MOV       A,?V2
   \   00031C   F0           MOVX      @DPTR,A
   \   00031D   A3           INC       DPTR
   \   00031E   E5..         MOV       A,?V3
   \                     ??zclSampleSw_ProcessUartMsgs_19:
   \   000320   F0           MOVX      @DPTR,A
   \                     ??zclSampleSw_ProcessUartMsgs_22:
   \   000321   7422         MOV       A,#0x22
   \   000323   12....       LCALL     ?XSTACK_DISP0_8
   \   000326   E8           MOV       A,R0
   \   000327   F0           MOVX      @DPTR,A
   \   000328   90....       MOV       DPTR,#af_transferId
   \   00032B   E0           MOVX      A,@DPTR
   \   00032C   04           INC       A
   \   00032D   F0           MOVX      @DPTR,A
   \   00032E                ; Setup parameters for call to function AF_DataRequest
   \   00032E   75..1E       MOV       ?V2,#0x1e
   \   000331   78..         MOV       R0,#?V2
   \   000333   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000336   75....       MOV       ?V2,#af_transferId & 0xff
   \   000339   75....       MOV       ?V3,#(af_transferId >> 8) & 0xff
   \   00033C   78..         MOV       R0,#?V2
   \   00033E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000341   740B         MOV       A,#0xb
   \   000343   12....       LCALL     ?XSTACK_DISP0_8
   \   000346   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000349   8E..         MOV       ?V2,R6
   \   00034B   75..00       MOV       ?V3,#0x0
   \   00034E   78..         MOV       R0,#?V2
   \   000350   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000353   78..         MOV       R0,#?V0
   \   000355   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000358   7980         MOV       R1,#-0x80
   \   00035A   7C..         MOV       R4,#sampleSw_HAEp & 0xff
   \   00035C   7D..         MOV       R5,#(sampleSw_HAEp >> 8) & 0xff
   \   00035E   7422         MOV       A,#0x22
   \   000360   12....       LCALL     ?XSTACK_DISP101_8
   \   000363   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000366   7409         MOV       A,#0x9
   \   000368   12....       LCALL     ?DEALLOC_XSTACK8
   \   00036B   E9           MOV       A,R1
   \   00036C   F5..         MOV       ?V0,A
   1212                osal_mem_free(payload);
   \   00036E                ; Setup parameters for call to function osal_mem_free
   \   00036E   7408         MOV       A,#0x8
   \   000370   12....       LCALL     ?XSTACK_DISP0_8
   \   000373   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000376   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1213                if (stat != afStatus_SUCCESS) {
   \   000379   E5..         MOV       A,?V0
   \   00037B   7003         JNZ       $+5
   \   00037D   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
   1214                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   000380   90....       MOV       DPTR,#`?<Constant {0, 0}>_5`
   \   000383   7402         MOV       A,#0x2
   \   000385   12....       LCALL     ?XSTACK_DISP102_8
   \   000388   7404         MOV       A,#0x4
   \   00038A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1215                  rsps[length++] = CMD_JC_CMDREQ;
   \   00038D   7402         MOV       A,#0x2
   \   00038F   12....       LCALL     ?XSTACK_DISP0_8
   \   000392   7405         MOV       A,#0x5
   \   000394   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_23 & 0xFFFF
   1216                  rsps[length++] = stat;
   1217                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1218                }
   1219                else {
   1220                  // The successfull UART response is generated in function
   1221                  // Set a timer for TIMEOUT detection
   1222                  osal_start_timerEx(zclSampleSw_TaskID, 
   1223                                     SAMPLEAPP_ACT_EVT, 
   1224                                     SAMPLEAPP_ACT_TIMEOUT);
   1225                }
   1226                break;
   1227              }
   1228              case CMD_JC_ZCLREQ:
   1229              {
   1230                uint16 nwkAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??zclSampleSw_ProcessUartMsgs_6:
   \   000397   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00039A   F9           MOV       R1,A
   \   00039B   EC           MOV       A,R4
   \   00039C   F8           MOV       R0,A
   \   00039D   7408         MOV       A,#0x8
   \   00039F   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A2   12....       LCALL     ?Subroutine21 & 0xFFFF
   1231                uint8 flag = uartMsg[3];
   \                     ??CrossCallReturnLabel_48:
   \   0003A5   8A82         MOV       DPL,R2
   \   0003A7   8B83         MOV       DPH,R3
   \   0003A9   E0           MOVX      A,@DPTR
   \   0003AA   C0E0         PUSH      A
   \   0003AC   7406         MOV       A,#0x6
   \   0003AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B1   D0E0         POP       A
   \   0003B3   12....       LCALL     ?Subroutine25 & 0xFFFF
   1232                uint8 endpoint = uartMsg[4];
   \                     ??CrossCallReturnLabel_53:
   \   0003B6   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0003B9   C0E0         PUSH      A
   \   0003BB   7418         MOV       A,#0x18
   \   0003BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C0   D0E0         POP       A
   \   0003C2   12....       LCALL     ?Subroutine5 & 0xFFFF
   1233                uint16 cid = BUILD_UINT16(uartMsg[5], uartMsg[6]);
   \                     ??CrossCallReturnLabel_1:
   \   0003C5   F5..         MOV       ?V4,A
   \   0003C7   E4           CLR       A
   \   0003C8   39           ADDC      A,R1
   \   0003C9   F5..         MOV       ?V5,A
   1234          
   1235                uint16 pid = BUILD_UINT16(uartMsg[7], uartMsg[8]);
   \   0003CB   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0003CE   2407         ADD       A,#0x7
   \   0003D0   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0003D3   2408         ADD       A,#0x8
   \   0003D5   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0003D8   12....       LCALL     ?Subroutine28 & 0xFFFF
   1236                //sampleSw_TestEp.simpleDesc->AppProfId = pid;
   1237                uint8 cmd = uartMsg[9]; rx_zcl_cmd_id = cmd;
   \                     ??CrossCallReturnLabel_61:
   \   0003DB   C0E0         PUSH      A
   \   0003DD   7407         MOV       A,#0x7
   \   0003DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E2   D0E0         POP       A
   \   0003E4   F0           MOVX      @DPTR,A
   \   0003E5   90....       MOV       DPTR,#rx_zcl_cmd_id
   \   0003E8   12....       LCALL     ?Subroutine10 & 0xFFFF
   1238                uint8 clusterSpecific = uartMsg[10];
   \                     ??CrossCallReturnLabel_12:
   \   0003EB   240A         ADD       A,#0xa
   \   0003ED   F582         MOV       DPL,A
   \   0003EF   E4           CLR       A
   \   0003F0   38           ADDC      A,R0
   \   0003F1   F583         MOV       DPH,A
   \   0003F3   E0           MOVX      A,@DPTR
   \   0003F4   C0E0         PUSH      A
   \   0003F6   7417         MOV       A,#0x17
   \   0003F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0003FB   D0E0         POP       A
   \   0003FD   12....       LCALL     ?Subroutine10 & 0xFFFF
   1239                uint16 manuCode = BUILD_UINT16(uartMsg[11], uartMsg[12]);
   \                     ??CrossCallReturnLabel_13:
   \   000400   240B         ADD       A,#0xb
   \   000402   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000405   240C         ADD       A,#0xc
   \   000407   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00040A   FE           MOV       R6,A
   \   00040B   E4           CLR       A
   \   00040C   39           ADDC      A,R1
   \   00040D   FF           MOV       R7,A
   1240                uint8 monitor_response_flag = uartMsg[13];
   \   00040E   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000411   240D         ADD       A,#0xd
   \   000413   F582         MOV       DPL,A
   \   000415   E4           CLR       A
   \   000416   38           ADDC      A,R0
   \   000417   F583         MOV       DPH,A
   \   000419   E0           MOVX      A,@DPTR
   \   00041A   C0E0         PUSH      A
   \   00041C   7416         MOV       A,#0x16
   \   00041E   12....       LCALL     ?XSTACK_DISP0_8
   \   000421   D0E0         POP       A
   \   000423   12....       LCALL     ?Subroutine10 & 0xFFFF
   1241                uint16 len = BUILD_UINT16(uartMsg[14], uartMsg[15]);
   \                     ??CrossCallReturnLabel_14:
   \   000426   240E         ADD       A,#0xe
   \   000428   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00042B   240F         ADD       A,#0xf
   \   00042D   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000430   F5..         MOV       ?V2,A
   \   000432   E4           CLR       A
   \   000433   39           ADDC      A,R1
   \   000434   F5..         MOV       ?V3,A
   1242                uint8 *payload = NULL;
   \   000436   740B         MOV       A,#0xb
   \   000438   12....       LCALL     ?XSTACK_DISP0_8
   \   00043B   E4           CLR       A
   \   00043C   F0           MOVX      @DPTR,A
   \   00043D   A3           INC       DPTR
   \   00043E   F0           MOVX      @DPTR,A
   1243                if (len > 0)
   \   00043F   EA           MOV       A,R2
   \   000440   45..         ORL       A,?V3
   \   000442   6049         JZ        ??zclSampleSw_ProcessUartMsgs_24
   1244                {
   1245                  payload = osal_mem_alloc(len);
   \   000444                ; Setup parameters for call to function osal_mem_alloc
   \   000444   AB..         MOV       R3,?V3
   \   000446   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000449   740B         MOV       A,#0xb
   \   00044B   12....       LCALL     ?XSTACK_DISP0_8
   \   00044E   12....       LCALL     ?Subroutine24 & 0xFFFF
   1246                  for (int i = 1; i <= len; i++)
   \                     ??CrossCallReturnLabel_52:
   \   000451   8031         SJMP      ??zclSampleSw_ProcessUartMsgs_25
   1247                  {
   1248                    payload[len-i] = uartMsg[msgLen-i];
   \                     ??zclSampleSw_ProcessUartMsgs_26:
   \   000453   740A         MOV       A,#0xa
   \   000455   12....       LCALL     ?XSTACK_DISP0_8
   \   000458   E0           MOVX      A,@DPTR
   \   000459   C3           CLR       C
   \   00045A   98           SUBB      A,R0
   \   00045B   FA           MOV       R2,A
   \   00045C   E4           CLR       A
   \   00045D   99           SUBB      A,R1
   \   00045E   FB           MOV       R3,A
   \   00045F   85..82       MOV       DPL,?XSP + 0
   \   000462   85..83       MOV       DPH,?XSP + 1
   \   000465   12....       LCALL     ?Subroutine36 & 0xFFFF
   1249                  }
   \                     ??CrossCallReturnLabel_78:
   \   000468   E0           MOVX      A,@DPTR
   \   000469   C0E0         PUSH      A
   \   00046B   E5..         MOV       A,?V2
   \   00046D   C3           CLR       C
   \   00046E   98           SUBB      A,R0
   \   00046F   FA           MOV       R2,A
   \   000470   E5..         MOV       A,?V3
   \   000472   99           SUBB      A,R1
   \   000473   FB           MOV       R3,A
   \   000474   740B         MOV       A,#0xb
   \   000476   12....       LCALL     ?XSTACK_DISP0_8
   \   000479   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00047C   D0E0         POP       A
   \   00047E   F0           MOVX      @DPTR,A
   \   00047F   08           INC       R0
   \   000480   E8           MOV       A,R0
   \   000481   7001         JNZ       ??zclSampleSw_ProcessUartMsgs_25
   \   000483   09           INC       R1
   \                     ??zclSampleSw_ProcessUartMsgs_25:
   \   000484   C3           CLR       C
   \   000485   E5..         MOV       A,?V2
   \   000487   98           SUBB      A,R0
   \   000488   E5..         MOV       A,?V3
   \   00048A   99           SUBB      A,R1
   \   00048B   50C6         JNC       ??zclSampleSw_ProcessUartMsgs_26
   1250                }
   1251                stat = inject_zclData(nwkAddr, flag, endpoint, cid, pid, cmd, clusterSpecific, manuCode, len, payload);
   \                     ??zclSampleSw_ProcessUartMsgs_24:
   \   00048D                ; Setup parameters for call to function inject_zclData
   \   00048D   740B         MOV       A,#0xb
   \   00048F   12....       LCALL     ?XSTACK_DISP0_8
   \   000492   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000495   78..         MOV       R0,#?V2
   \   000497   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00049A   8E..         MOV       ?V6,R6
   \   00049C   8F..         MOV       ?V7,R7
   \   00049E   78..         MOV       R0,#?V6
   \   0004A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004A3   741D         MOV       A,#0x1d
   \   0004A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0004A8   E0           MOVX      A,@DPTR
   \   0004A9   F5..         MOV       ?V6,A
   \   0004AB   78..         MOV       R0,#?V6
   \   0004AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004B0   740E         MOV       A,#0xe
   \   0004B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B5   E0           MOVX      A,@DPTR
   \   0004B6   F5..         MOV       ?V6,A
   \   0004B8   78..         MOV       R0,#?V6
   \   0004BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004BD   78..         MOV       R0,#?V0
   \   0004BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004C2   78..         MOV       R0,#?V4
   \   0004C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004C7   7424         MOV       A,#0x24
   \   0004C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004CC   E0           MOVX      A,@DPTR
   \   0004CD   FC           MOV       R4,A
   \   0004CE   7D00         MOV       R5,#0x0
   \   0004D0   7412         MOV       A,#0x12
   \   0004D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0004D5   E0           MOVX      A,@DPTR
   \   0004D6   F9           MOV       R1,A
   \   0004D7   7414         MOV       A,#0x14
   \   0004D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004DC   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0004DF   12....       LCALL     `??inject_zclData::?relay`; Banked call to: inject_zclData
   \   0004E2   740C         MOV       A,#0xc
   \   0004E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004E7   E9           MOV       A,R1
   \   0004E8   F5..         MOV       ?V0,A
   1252                if (len > 0)
   \   0004EA   E5..         MOV       A,?V2
   \   0004EC   45..         ORL       A,?V3
   \   0004EE   600B         JZ        ??zclSampleSw_ProcessUartMsgs_27
   1253                {
   1254                  osal_mem_free(payload);
   \   0004F0                ; Setup parameters for call to function osal_mem_free
   \   0004F0   740B         MOV       A,#0xb
   \   0004F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0004F5   12....       LCALL     ?Subroutine29 & 0xFFFF
   1255                }
   \                     ??CrossCallReturnLabel_66:
   \   0004F8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1256                if (stat != afStatus_SUCCESS)
   \                     ??zclSampleSw_ProcessUartMsgs_27:
   \   0004FB   E5..         MOV       A,?V0
   \   0004FD   6017         JZ        ??zclSampleSw_ProcessUartMsgs_28
   1257                {
   1258                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   0004FF   90....       MOV       DPTR,#`?<Constant {0, 0}>_6`
   \   000502   7402         MOV       A,#0x2
   \   000504   12....       LCALL     ?XSTACK_DISP102_8
   \   000507   7404         MOV       A,#0x4
   \   000509   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1259                  rsps[length++] = CMD_JC_ZCLREQ;
   \   00050C   7402         MOV       A,#0x2
   \   00050E   12....       LCALL     ?XSTACK_DISP0_8
   \   000511   7407         MOV       A,#0x7
   \   000513   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_23 & 0xFFFF
   1260                  rsps[length++] = stat;
   1261                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1262                }
   1263                else {
   1264                  // The successfull UART response is generated in function
   1265                  // Set a timer for TIMEOUT detection
   1266                  // It really depends on whether the response is needed.
   1267                  // If not needed, the timer will not be set, and the coordinator will not send any UART response.
   1268                  if (monitor_response_flag > 0) {
   \                     ??zclSampleSw_ProcessUartMsgs_28:
   \   000516   7416         MOV       A,#0x16
   \   000518   12....       LCALL     ?XSTACK_DISP0_8
   \   00051B   E0           MOVX      A,@DPTR
   \   00051C   7003         JNZ       $+5
   \   00051E   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_29 & 0xFFFF
   1269                    osal_start_timerEx(zclSampleSw_TaskID, 
   1270                                       SAMPLEAPP_ACT_EVT, 
   1271                                       SAMPLEAPP_ACT_TIMEOUT);
   \                     ??zclSampleSw_ProcessUartMsgs_13:
   \   000521                ; Setup parameters for call to function osal_start_timerEx
   \   000521   90....       MOV       DPTR,#__Constant_1388
   \   000524   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000527   7A40         MOV       R2,#0x40
   \   000529   7B00         MOV       R3,#0x0
   \   00052B   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00052E   E0           MOVX      A,@DPTR
   \   00052F   F9           MOV       R1,A
   \   000530   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000533   7404         MOV       A,#0x4
   \   000535   12....       LCALL     ?DEALLOC_XSTACK8
   \   000538   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_29 & 0xFFFF
   1272                  }
   1273                }
   1274                break;
   1275              }
   1276              case CMD_JC_LEVREQ:
   1277              {
   1278                zAddrType_t srcAddr;
   1279                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??zclSampleSw_ProcessUartMsgs_7:
   \   00053B   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00053E   FA           MOV       R2,A
   \   00053F   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000542   EA           MOV       A,R2
   \   000543   F8           MOV       R0,A
   \   000544   740D         MOV       A,#0xd
   \   000546   12....       LCALL     ?XSTACK_DISP0_8
   \   000549   12....       LCALL     ?Subroutine16 & 0xFFFF
   1280                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_28:
   \   00054C   12....       LCALL     ?XSTACK_DISP0_8
   \   00054F   7402         MOV       A,#0x2
   \   000551   F0           MOVX      @DPTR,A
   1281                uint8 extAddr[8] = {0};
   \   000552   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`
   \   000555   7425         MOV       A,#0x25
   \   000557   12....       LCALL     ?XSTACK_DISP102_8
   \   00055A   7408         MOV       A,#0x8
   \   00055C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1282                stat = AddrMgrExtAddrLookup(srcAddr.addr.shortAddr, extAddr);
   \   00055F                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00055F   7425         MOV       A,#0x25
   \   000561   12....       LCALL     ?XSTACK_DISP102_8
   \   000564   740D         MOV       A,#0xd
   \   000566   12....       LCALL     ?XSTACK_DISP0_8
   \   000569   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00056C   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00056F   E9           MOV       A,R1
   \   000570   F5..         MOV       ?V0,A
   1283                if (stat == true)
   \   000572   7401         MOV       A,#0x1
   \   000574   65..         XRL       A,?V0
   \   000576   7024         JNZ       ??zclSampleSw_ProcessUartMsgs_30
   1284                {
   1285                  stat = ZDP_MgmtLeaveReq(&srcAddr, extAddr, 0, 0, 0);
   \   000578                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   000578   75..00       MOV       ?V0,#0x0
   \   00057B   78..         MOV       R0,#?V0
   \   00057D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000580   78..         MOV       R0,#?V0
   \   000582   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000585   7900         MOV       R1,#0x0
   \   000587   7427         MOV       A,#0x27
   \   000589   12....       LCALL     ?XSTACK_DISP102_8
   \   00058C   740F         MOV       A,#0xf
   \   00058E   12....       LCALL     ?XSTACK_DISP101_8
   \   000591   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \   000594   7402         MOV       A,#0x2
   \   000596   12....       LCALL     ?DEALLOC_XSTACK8
   \   000599   E9           MOV       A,R1
   \   00059A   F5..         MOV       ?V0,A
   1286                }
   1287                uint16 rsps[2] = {0}; uint8 length = 0;
   \                     ??zclSampleSw_ProcessUartMsgs_30:
   \   00059C   90....       MOV       DPTR,#`?<Constant {0, 0}>_7`
   \   00059F   7402         MOV       A,#0x2
   \   0005A1   12....       LCALL     ?XSTACK_DISP102_8
   \   0005A4   7404         MOV       A,#0x4
   \   0005A6   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1288                rsps[length++] = CMD_JC_LEVREQ;
   \   0005A9   7402         MOV       A,#0x2
   \   0005AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0005AE   7408         MOV       A,#0x8
   1289                rsps[length++] = stat;
   1290                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   1291                break;
   1292              }
   \                     ??zclSampleSw_ProcessUartMsgs_23:
   \   0005B0   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0005B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0005B6   E5..         MOV       A,?V0
   \   0005B8   801F         SJMP      ??zclSampleSw_ProcessUartMsgs_15
   1293              default:
   1294              {
   1295                uint16 rsps[2] = {0}; uint8 length = 0;
   \                     ??zclSampleSw_ProcessUartMsgs_8:
   \   0005BA   90....       MOV       DPTR,#`?<Constant {0, 0}>_8`
   \   0005BD   7402         MOV       A,#0x2
   \   0005BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0005C2   7404         MOV       A,#0x4
   \   0005C4   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1296                rsps[length++] = uartMsg[0];
   \   0005C7   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0005CA   F8           MOV       R0,A
   \   0005CB   7402         MOV       A,#0x2
   \   0005CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0005D0   E8           MOV       A,R0
   \   0005D1   12....       LCALL     ?Subroutine20 & 0xFFFF
   1297                rsps[length++] = ERR_CMD_NOTFOUND;
   \                     ??CrossCallReturnLabel_40:
   \   0005D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0005D7   74FE         MOV       A,#-0x2
   \                     ??zclSampleSw_ProcessUartMsgs_15:
   \   0005D9   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   1298                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_160:
   \   0005DC                ; Setup parameters for call to function HalUARTWrite
   \   0005DC   7C04         MOV       R4,#0x4
   \   0005DE   FD           MOV       R5,A
   \   0005DF   7402         MOV       A,#0x2
   \                     ??zclSampleSw_ProcessUartMsgs_12:
   \   0005E1   12....       LCALL     ?XSTACK_DISP101_8
   \   0005E4   7900         MOV       R1,#0x0
   \   0005E6   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1299                break;
   1300              }
   1301            }
   1302            return stat;
   \                     ??zclSampleSw_ProcessUartMsgs_29:
   \   0005E9   A9..         MOV       R1,?V0
   \   0005EB   7441         MOV       A,#0x41
   \   0005ED   02....       LJMP      ??Subroutine59_0 & 0xFFFF
   1303          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2A           ADD       A,R2
   \   000002   FC           MOV       R4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3B           ADDC      A,R3
   \   000006   8C82         MOV       DPL,R4
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F8           MOV       R0,A
   \   000001   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   740E         MOV       A,#0xe
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2C           ADD       A,R4
   \   000002   F5..         MOV       ?V5,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3D           ADDC      A,R5
   \   000007   85..82       MOV       DPL,?V5
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   39           ADDC      A,R1
   \   000004   F5..         MOV       ?V1,A
   \   000006   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000009   2409         ADD       A,#0x9
   \   00000B   F582         MOV       DPL,A
   \   00000D   E4           CLR       A
   \   00000E   38           ADDC      A,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   FC           MOV       R4,A
   \   000004   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   18           DEC       R0
   \   000007   18           DEC       R0
   \   000008   18           DEC       R0
   \   000009   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FA           MOV       R2,A
   \   000008   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   C8           XCH       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7801         MOV       R0,#0x1
   \   000007   7900         MOV       R1,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7415         MOV       A,#0x15
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   C8           XCH       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000005   FA           MOV       R2,A
   \   000006   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000009   EA           MOV       A,R2
   \   00000A   F8           MOV       R0,A
   \   00000B   740D         MOV       A,#0xd
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FA           MOV       R2,A
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   C8           XCH       A,R0
   \   000013   2406         ADD       A,#0x6
   \   000015   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   E4           CLR       A
   \   000009   C8           XCH       A,R0
   \   00000A   F9           MOV       R1,A
   \   00000B   EA           MOV       A,R2
   \   00000C   28           ADD       A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET
   1304          
   1305          /**
   1306           * @fn      zclSampleSw_UartCB
   1307           *
   1308           * @brief   Uart Callback. When there are UART messages comming in, this callback function will handle the message.
   1309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          static void zclSampleSw_UartCB(uint8 port, uint8 event)
   \                     zclSampleSw_UartCB:
   1311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1312            uint8 rxLen = Hal_UART_RxBufLen(HAL_UART_PORT_0);
   \   000005                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000005   7900         MOV       R1,#0x0
   \   000007   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00000A   EA           MOV       A,R2
   \   00000B   F5..         MOV       ?V0,A
   1313            if(rxLen != 0)
   \   00000D   700A         JNZ       ??zclSampleSw_UartCB_0
   \   00000F   806B         SJMP      ??zclSampleSw_UartCB_1
   1314            {
   1315              while (1)
   1316              {
   1317                halSleepWait(50000); // Wait for 50 ms
   1318                if (rxLen == Hal_UART_RxBufLen(HAL_UART_PORT_0))
   1319                {
   1320                  break;
   1321                }
   1322                else
   1323                {
   1324                  rxLen = Hal_UART_RxBufLen(HAL_UART_PORT_0);
   \                     ??zclSampleSw_UartCB_2:
   \   000011                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000016   EA           MOV       A,R2
   \   000017   F5..         MOV       ?V0,A
   1325                }
   \                     ??zclSampleSw_UartCB_0:
   \   000019                ; Setup parameters for call to function halSleepWait
   \   000019   7A50         MOV       R2,#0x50
   \   00001B   7BC3         MOV       R3,#-0x3d
   \   00001D   12....       LCALL     `??halSleepWait::?relay`; Banked call to: halSleepWait
   \   000020   AE..         MOV       R6,?V0
   \   000022                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000022   7900         MOV       R1,#0x0
   \   000024   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000027   EA           MOV       A,R2
   \   000028   6E           XRL       A,R6
   \   000029   4B           ORL       A,R3
   \   00002A   70E5         JNZ       ??zclSampleSw_UartCB_2
   1326              }
   1327              uint8 *zclSampleSw_UartReadBuf = osal_mem_alloc(ZCLSAMPLESW_UART_BUF_LEN);
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A40         MOV       R2,#0x40
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V2,R2
   \   000035   8B..         MOV       ?V3,R3
   1328              if(zclSampleSw_UartReadBuf==NULL)
   \   000037   EA           MOV       A,R2
   \   000038   45..         ORL       A,?V3
   \   00003A   701A         JNZ       ??zclSampleSw_UartCB_3
   1329              {
   1330                char *point = "[fail,memfail]";
   1331                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)point, osal_strlen(point));
   \   00003C                ; Setup parameters for call to function osal_strlen
   \   00003C   7A..         MOV       R2,#`?<Constant "[fail,memfail]">` & 0xff
   \   00003E   7B..         MOV       R3,#(`?<Constant "[fail,memfail]">` >> 8) & 0xff
   \   000040   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000043   8A..         MOV       ?V0,R2
   \   000045   8B..         MOV       ?V1,R3
   \   000047   AC..         MOV       R4,?V0
   \   000049   AD..         MOV       R5,?V1
   \   00004B                ; Setup parameters for call to function HalUARTWrite
   \   00004B   7A..         MOV       R2,#`?<Constant "[fail,memfail]">` & 0xff
   \   00004D   7B..         MOV       R3,#(`?<Constant "[fail,memfail]">` >> 8) & 0xff
   \   00004F   7900         MOV       R1,#0x0
   \   000051   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000054   8026         SJMP      ??zclSampleSw_UartCB_1
   1332              }
   1333              else
   1334              {
   1335                osal_memset(zclSampleSw_UartReadBuf, 0, ZCLSAMPLESW_UART_BUF_LEN);
   \                     ??zclSampleSw_UartCB_3:
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C40         MOV       R4,#0x40
   \   000058   7D00         MOV       R5,#0x0
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1336                HalUARTRead(HAL_UART_PORT_0, zclSampleSw_UartReadBuf, rxLen);
   \   00005F                ; Setup parameters for call to function HalUARTRead
   \   00005F   EE           MOV       A,R6
   \   000060   FC           MOV       R4,A
   \   000061   7D00         MOV       R5,#0x0
   \   000063   AA..         MOV       R2,?V2
   \   000065   AB..         MOV       R3,?V3
   \   000067   7900         MOV       R1,#0x0
   \   000069   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   1337                zclSampleSw_ProcessUartMsgs(zclSampleSw_UartReadBuf, rxLen);
   \   00006C                ; Setup parameters for call to function zclSampleSw_ProcessUartMsgs
   \   00006C   A9..         MOV       R1,?V0
   \   00006E   AA..         MOV       R2,?V2
   \   000070   AB..         MOV       R3,?V3
   \   000072   12....       LCALL     `??zclSampleSw_ProcessUartMsgs::?relay`; Banked call to: zclSampleSw_ProcessUartMsgs
   1338                osal_mem_free(zclSampleSw_UartReadBuf); zclSampleSw_UartReadBuf = NULL;
   \   000075                ; Setup parameters for call to function osal_mem_free
   \   000075   AA..         MOV       R2,?V2
   \   000077   AB..         MOV       R3,?V3
   \   000079   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1339              }
   1340            }
   1341          }
   \                     ??zclSampleSw_UartCB_1:
   \   00007C   7F06         MOV       R7,#0x6
   \   00007E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1342          
   1343          static afStatus_t inject_afData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 len, uint8 *data)
   1344          {
   1345          /**
   1346           * This function is responsible for injecting applicaiton-layer data (APS + ZCL)
   1347           * Note 1: In order to successfully send AF data, destNwkAddr must exist in the association table.
   1348           * Note 2: The profileID (e.g., ZHA or ZDO) is configured by changing sampleSw_TestEp variable. However, it is unknown if there is any side effect, as the variable has been registered before.
   1349           * params
   1350              * destNwkAddr: The target device address.
   1351              * Flag: Determine whether the packet is broadcast, groupcast, or unicast
   1352              * ep: Target endpoint number.
   1353              * cid: Target cluster ID.
   1354              * pid: The profile ID.
   1355              * len: Length of the payload.
   1356              * data: AF-layer payload.
   1357          **/
   1358          	afAddrType_t dstAddr;  
   1359            //sampleSw_TestEp.simpleDesc->AppProfId = pid;
   1360          
   1361          	/* Destination */
   1362            if (flag==SAMPLEAPP_BROADCAST)
   1363            {
   1364              dstAddr.addrMode = afAddrBroadcast;
   1365          	  dstAddr.addr.shortAddr = 0xffff;
   1366            }
   1367            else if (flag==SAMPLEAPP_GROUPCAST)
   1368            {
   1369              dstAddr.addrMode = afAddrGroup;
   1370              dstAddr.addr.shortAddr = destNwkAddr;
   1371            }
   1372            else if (flag==SAMPLEAPP_UNICAST)
   1373            {
   1374          	  dstAddr.addrMode = afAddr16Bit;
   1375          	  dstAddr.addr.shortAddr = destNwkAddr;
   1376            }
   1377          	dstAddr.endPoint = ep;
   1378          	af_transferId++;
   1379          
   1380          	return AF_DataRequest(&dstAddr, 
   1381          		&sampleSw_HAEp,
   1382          		cid,    
   1383          		len, 
   1384          		data,    
   1385          		&af_transferId,
   1386          		AF_SKIP_ROUTING,
   1387          		AF_DEFAULT_RADIUS);
   1388          }
   1389          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1390          static afStatus_t inject_zclData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 cmd, uint8 clusterSpecific, uint16 manuCode, uint16 len, uint8* cmdFormat)
   \                     inject_zclData:
   1391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1392          /**
   1393           * This function is responsible for injecting applicaiton-layer data (ZCL)
   1394           * Note 1: In order to successfully send AF data, destNwkAddr must exist in the association table.
   1395           * Note 2: The profileID (e.g., ZHA or ZDO) is configured by changing sampleSw_TestEp variable. However, it is unknown if there is any side effect, as the variable has been registered before.
   1396           * params
   1397              * destNwkAddr: The target device address.
   1398              * Flag: Determine whether the packet is broadcast, groupcast, or unicast
   1399              * ep: Target endpoint number.
   1400              * cid: Target cluster ID.
   1401          **/
   1402          	afAddrType_t dstAddr;  
   1403          
   1404          	/* Destination */
   1405            if (flag==SAMPLEAPP_BROADCAST)
   \   00000C   7010         JNZ       ??inject_zclData_0
   1406            {
   1407              dstAddr.addrMode = afAddrBroadcast;
   \   00000E   7408         MOV       A,#0x8
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   740F         MOV       A,#0xf
   \   000015   12....       LCALL     ?Subroutine55 & 0xFFFF
   1408          	  dstAddr.addr.shortAddr = 0xffff;
   1409            }
   \                     ??CrossCallReturnLabel_116:
   \   000018   74FF         MOV       A,#-0x1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   8021         SJMP      ??inject_zclData_1
   1410            else if (flag==SAMPLEAPP_GROUPCAST)
   \                     ??inject_zclData_0:
   \   00001E   7401         MOV       A,#0x1
   \   000020   6E           XRL       A,R6
   \   000021   7009         JNZ       ??inject_zclData_2
   1411            {
   1412              dstAddr.addrMode = afAddrGroup;
   \   000023   7408         MOV       A,#0x8
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   7401         MOV       A,#0x1
   \   00002A   800C         SJMP      ??inject_zclData_3
   1413              dstAddr.addr.shortAddr = destNwkAddr;
   1414            }
   1415            else if (flag==SAMPLEAPP_UNICAST)
   \                     ??inject_zclData_2:
   \   00002C   7410         MOV       A,#0x10
   \   00002E   6E           XRL       A,R6
   \   00002F   700F         JNZ       ??inject_zclData_4
   1416            {
   1417          	  dstAddr.addrMode = afAddr16Bit;
   \   000031   7408         MOV       A,#0x8
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   7402         MOV       A,#0x2
   1418          	  dstAddr.addr.shortAddr = destNwkAddr;
   1419            }
   \                     ??inject_zclData_3:
   \   000038   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00003B   EA           MOV       A,R2
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   EB           MOV       A,R3
   \                     ??inject_zclData_1:
   \   00003F   F0           MOVX      @DPTR,A
   1420          	dstAddr.endPoint = ep;
   \                     ??inject_zclData_4:
   \   000040   7409         MOV       A,#0x9
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   EC           MOV       A,R4
   \   000046   F0           MOVX      @DPTR,A
   1421          	zcl_transferId++;
   \   000047   90....       MOV       DPTR,#zcl_transferId
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   04           INC       A
   \   00004C   F0           MOVX      @DPTR,A
   1422          
   1423            uint8 sep = locate_ep_given_profile(pid);
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F5..         MOV       ?V0,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V1,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for inject_zclData>_0`:
   \   000060   0000         DW        0
   \   000062   0300         DW        3
   \   000064   0401         DW        260
   \   000066   ....         DW        ??inject_zclData_5
   \   000068   E0A1         DW        41440
   \   00006A   ....         DW        ??inject_zclData_6
   \   00006C   5EC0         DW        49246
   \   00006E   ....         DW        ??inject_zclData_7
   \   000070   ....         DW        ??inject_zclData_8
   \                     ??inject_zclData_6:
   \   000072   790A         MOV       R1,#0xa
   \   000074   8006         SJMP      ??inject_zclData_8
   \                     ??inject_zclData_7:
   \   000076   7909         MOV       R1,#0x9
   \   000078   8002         SJMP      ??inject_zclData_8
   \                     ??inject_zclData_5:
   \   00007A   7908         MOV       R1,#0x8
   1424          
   1425            ZStatus_t cmd_stat = zcl_SendCommand(sep,
   1426              &dstAddr,
   1427              cid,
   1428              cmd,
   1429              clusterSpecific,
   1430              0,
   1431              0,
   1432              manuCode,
   1433              zcl_transferId,
   1434              len,
   1435              cmdFormat);
   1436          
   1437            return cmd_stat;
   \                     ??inject_zclData_8:
   \   00007C                ; Setup parameters for call to function zcl_SendCommand
   \   00007C   7420         MOV       A,#0x20
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000084   7420         MOV       A,#0x20
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008C   90....       MOV       DPTR,#zcl_transferId
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F5..         MOV       ?V0,A
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000097   7421         MOV       A,#0x21
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009F   75..00       MOV       ?V0,#0x0
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A7   78..         MOV       R0,#?V0
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AC   7424         MOV       A,#0x24
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V0,A
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   7424         MOV       A,#0x24
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F5..         MOV       ?V0,A
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   7421         MOV       A,#0x21
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   FC           MOV       R4,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FD           MOV       R5,A
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D8   740B         MOV       A,#0xb
   \   0000DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DD   740C         MOV       A,#0xc
   \   0000DF   02....       LJMP      ?Subroutine1 & 0xFFFF
   1438          
   1439          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_HAEp>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   ....         DW zclSampleSw_HASimpleDesc
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_ZLLEp>`:
   \   000000   09           DB 9
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   ....         DW zclSampleSw_ZLLSimpleDesc
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_GPEp>`:
   \   000000   0A           DB 10
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   ....         DW zclSampleSw_GPSimpleDesc
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   ....         DW `??zclSampleSw_handleGroupRsp::?relay`
   \   00000E   ....         DW `??zclSampleSw_handleSceneRsp::?relay`
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   ....         DW `??zclSampleSw_handleIdentifyQueryRsp::?relay`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_ClosureCmdCallba`:
   \   000000   ....         DW `??zclSampleSw_handleDoorLockRsp::?relay`

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessCommissioningStatus::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_handleDoorLockRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_handleDoorLockRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_handleGroupRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_handleGroupRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_handleSceneRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_handleSceneRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_handleIdentifyQueryRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_handleIdentifyQueryRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessInWriteRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessInConfigReportRspCmd::?rel`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessInConfigReportRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessInDiscCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessUartMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessUartMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_UartCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_UartCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??inject_zclData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    inject_zclData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Write: %d">`:
   \   000000   57726974     DB "Write: %d"
   \            653A2025
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read: %d">`:
   \   000000   52656164     DB "Read: %d"
   \            3A202564
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_1`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_2`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_3`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_1`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_4`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_2`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_3`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_4`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_5`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_6`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_7`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_8`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[fail,memfail]">`:
   \   000000   5B666169     DB "[fail,memfail]"
   \            6C2C6D65
   \            6D666169
   \            6C5D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000
   1440          
   1441          static uint8 locate_ep_given_profile(uint16 profileId)
   1442          {
   1443            uint8 ep = 0;
   1444            switch (profileId)
   1445            {
   1446              case ZCL_HA_PROFILE_ID:
   1447              {
   1448                ep = SAMPLESW_HA_ENDPOINT;
   1449                break;
   1450              }
   1451              case ZCL_ZLL_PROFILE_ID:
   1452              {
   1453                ep = SAMPLESW_ZLL_ENDPOINT;
   1454                break;
   1455              }
   1456              case ZCL_GP_PROFILE_ID:
   1457              {
   1458                ep = SAMPLESW_GP_ENDPOINT;
   1459                break;
   1460              }
   1461              default:
   1462              {
   1463                ep = 0;
   1464                break;
   1465              }
   1466            }
   1467            return ep;
   1468          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1    126   inject_zclData
        0     33   -> zcl_SendCommand
      0     93   zclSampleSw_HandleKeys
        0     73   -> HalLedSet
        0     73   -> HalUARTWrite
        0     75   -> osal_nv_item_init
        0     77   -> osal_nv_read
        0     77   -> osal_nv_write
        0     73   -> osal_strlen
        0     75   -> sprintf
      0     38   zclSampleSw_Init
        0     38   -> HalUARTOpen
        0     38   -> RegisterForKeys
        0     38   -> ZDO_RegisterForZDOMsg
        0     38   -> afRegister
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> bdb_StartCommissioning
        0     38   -> zclClosures_RegisterDoorLockCmdCallbacks
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zclSampleSw_ResetAttributesToDefaultValues
        0     38   -> zcl_registerForMsg
      2      0   zclSampleSw_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
      0    114   zclSampleSw_ProcessInConfigReportRspCmd
        0     56   -> HalUARTWrite
        0     56   -> osal_get_timeoutEx
        0     56   -> osal_stop_timerEx
      2     58   zclSampleSw_ProcessInDiscCmdsRspCmd
      0    114   zclSampleSw_ProcessInReadRspCmd
        0     56   -> HalUARTWrite
        0     56   -> osal_get_timeoutEx
        0     56   -> osal_stop_timerEx
      0    114   zclSampleSw_ProcessInWriteRspCmd
        0     56   -> HalUARTWrite
        0     56   -> osal_get_timeoutEx
        0     56   -> osal_stop_timerEx
      0     74   zclSampleSw_ProcessIncomingMsg
        0     58   -> HalUARTWrite
        0     58   -> osal_get_timeoutEx
        0     58   -> osal_mem_free
        0     58   -> osal_stop_timerEx
        0     58   -> zclSampleSw_ProcessInConfigReportRspCmd
        0     58   -> zclSampleSw_ProcessInDiscCmdsRspCmd
        0     58   -> zclSampleSw_ProcessInReadRspCmd
        0     58   -> zclSampleSw_ProcessInWriteRspCmd
      1    107   zclSampleSw_ProcessUartMsgs
        0     90   -> AF_DataRequest
        0     81   -> AddrMgrExtAddrLookup
        0     81   -> AssocCount
        0     81   -> HalUARTWrite
        0     81   -> NLME_PermitJoiningRequest
        0     83   -> ZDP_MgmtLeaveReq
        0     82   -> ZDP_NWKAddrOfInterestReq
        0     82   -> ZDP_SimpleDescReq
        0     93   -> inject_zclData
        0     81   -> osal_mem_alloc
        0     81   -> osal_mem_free
        0     85   -> osal_start_timerEx
      0    129   zclSampleSw_ProcessZDOMsgs
        0    113   -> AssocGetWithShort
        0    113   -> HalUARTWrite
        0    113   -> ZDO_ParseDeviceAnnce
        0    113   -> ZDO_ParseEPListRsp
        0    113   -> ZDO_ParseNodeDescRsp
        0    113   -> ZDO_ParseSimpleDescRsp
        0    113   -> osal_memset
        0    113   -> osal_stop_timerEx
      0     14   zclSampleSw_UartCB
        0     14   -> HalUARTRead
        0     14   -> HalUARTWrite
        0     14   -> Hal_UART_RxBufLen
        0     14   -> halSleepWait
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_memset
        0     14   -> osal_strlen
        0     14   -> zclSampleSw_ProcessUartMsgs
      0     16   zclSampleSw_event_loop
        0     16   -> HalUARTWrite
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> zclSampleSw_HandleKeys
        0     16   -> zclSampleSw_ProcessIncomingMsg
        0     16   -> zclSampleSw_ProcessZDOMsgs
      0     36   zclSampleSw_handleDoorLockRsp
        0     36   -> HalUARTWrite
        0     36   -> osal_get_timeoutEx
        0     36   -> osal_stop_timerEx
      0     36   zclSampleSw_handleGroupRsp
        0     36   -> HalUARTWrite
        0     36   -> osal_get_timeoutEx
        0     36   -> osal_stop_timerEx
      0     36   zclSampleSw_handleIdentifyQueryRsp
        0     36   -> HalUARTWrite
        0     36   -> osal_get_timeoutEx
        0     36   -> osal_stop_timerEx
      0     36   zclSampleSw_handleSceneRsp
        0     36   -> HalUARTWrite
        0     36   -> osal_get_timeoutEx
        0     36   -> osal_stop_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant "Read: %d">
      10  ?<Constant "Write: %d">
      15  ?<Constant "[fail,memfail]">
       3  ?<Constant "\r\n">
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_4
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_5
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_6
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_1
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_2
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_3
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>_4
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       4  ?<Constant {0, 0}>
       4  ?<Constant {0, 0}>_1
       4  ?<Constant {0, 0}>_2
       4  ?<Constant {0, 0}>_3
       4  ?<Constant {0, 0}>_4
       4  ?<Constant {0, 0}>_5
       4  ?<Constant {0, 0}>_6
       4  ?<Constant {0, 0}>_7
       4  ?<Constant {0, 0}>_8
       7  ?<Initializer for sampleSw_GPEp>
       7  ?<Initializer for sampleSw_HAEp>
       7  ?<Initializer for sampleSw_ZLLEp>
       2  ?<Initializer for zclSampleSw_ClosureCmdCallba
      22  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
       8  ??Subroutine59_0
       6  ??Subroutine60_0
       8  ??Subroutine61_0
       6  ??Subroutine62_0
       6  ??Subroutine63_0
       4  ??Subroutine64_0
       8  ??Subroutine65_0
       5  ??Subroutine66_0
       8  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine10
      12  ?Subroutine11
       6  ?Subroutine12
       4  ?Subroutine13
      15  ?Subroutine14
      15  ?Subroutine15
       8  ?Subroutine16
       7  ?Subroutine17
      13  ?Subroutine18
       6  ?Subroutine19
       7  ?Subroutine2
       6  ?Subroutine20
       6  ?Subroutine21
       8  ?Subroutine22
       1  ?Subroutine23
      10  ?Subroutine24
       4  ?Subroutine25
      12  ?Subroutine26
       8  ?Subroutine27
      19  ?Subroutine28
       6  ?Subroutine29
       4  ?Subroutine3
      13  ?Subroutine30
       4  ?Subroutine31
       3  ?Subroutine32
       4  ?Subroutine33
       8  ?Subroutine34
       9  ?Subroutine35
      11  ?Subroutine36
       5  ?Subroutine37
       4  ?Subroutine38
      31  ?Subroutine39
       5  ?Subroutine4
      16  ?Subroutine40
      11  ?Subroutine41
      17  ?Subroutine42
       6  ?Subroutine43
       4  ?Subroutine44
      12  ?Subroutine45
      20  ?Subroutine46
       1  ?Subroutine47
       5  ?Subroutine48
      14  ?Subroutine49
      25  ?Subroutine5
      12  ?Subroutine50
       5  ?Subroutine51
      13  ?Subroutine52
      14  ?Subroutine53
       5  ?Subroutine54
       8  ?Subroutine55
      12  ?Subroutine56
       8  ?Subroutine57
      15  ?Subroutine58
      10  ?Subroutine6
      14  ?Subroutine7
       8  ?Subroutine8
       8  ?Subroutine9
       4  __Constant_1388
       1  af_transferId
       1  cluster_cmd_rx
       1  current_cmd_type
       1  endpoint_cmd_rx
     226  inject_zclData
       6  inject_zclData::?relay
       1  node_cmd_rx
       1  rx_zcl_cmd_id
       7  sampleSw_GPEp
       7  sampleSw_HAEp
       7  sampleSw_ZLLEp
       1  writeVal
       1  zclSampleSwSeqNum
       2  zclSampleSw_ClosureCmdCallbacks
      22  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
     277  zclSampleSw_HandleKeys
       6  zclSampleSw_HandleKeys::?relay
     308  zclSampleSw_Init
       6  zclSampleSw_Init::?relay
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      30  zclSampleSw_ProcessCommissioningStatus
       6  zclSampleSw_ProcessCommissioningStatus::?relay
     205  zclSampleSw_ProcessInConfigReportRspCmd
       6  zclSampleSw_ProcessInConfigReportRspCmd::?relay
      37  zclSampleSw_ProcessInDiscCmdsRspCmd
       6  zclSampleSw_ProcessInDiscCmdsRspCmd::?relay
     143  zclSampleSw_ProcessInReadRspCmd
       6  zclSampleSw_ProcessInReadRspCmd::?relay
     141  zclSampleSw_ProcessInWriteRspCmd
       6  zclSampleSw_ProcessInWriteRspCmd::?relay
     323  zclSampleSw_ProcessIncomingMsg
       6  zclSampleSw_ProcessIncomingMsg::?relay
    1520  zclSampleSw_ProcessUartMsgs
       6  zclSampleSw_ProcessUartMsgs::?relay
     767  zclSampleSw_ProcessZDOMsgs
       6  zclSampleSw_ProcessZDOMsgs::?relay
       1  zclSampleSw_TaskID
     129  zclSampleSw_UartCB
       6  zclSampleSw_UartCB::?relay
     156  zclSampleSw_event_loop
       6  zclSampleSw_event_loop::?relay
     132  zclSampleSw_handleDoorLockRsp
       6  zclSampleSw_handleDoorLockRsp::?relay
     126  zclSampleSw_handleGroupRsp
       6  zclSampleSw_handleGroupRsp::?relay
     142  zclSampleSw_handleIdentifyQueryRsp
       6  zclSampleSw_handleIdentifyQueryRsp::?relay
     123  zclSampleSw_handleSceneRsp
       6  zclSampleSw_handleSceneRsp::?relay
       1  zcl_transferId

 
 5 397 bytes in segment BANKED_CODE
   102 bytes in segment BANK_RELAYS
    47 bytes in segment XDATA_I
    47 bytes in segment XDATA_ID
   465 bytes in segment XDATA_ROM_C
    23 bytes in segment XDATA_Z
 
   149 bytes of CODE     memory
   461 bytes of CONST    memory (+ 4 bytes shared)
 5 397 bytes of HUGECODE memory
    70 bytes of XDATA    memory

Errors: none
Warnings: 1
